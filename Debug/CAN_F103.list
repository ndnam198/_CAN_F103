
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08006db8  08006db8  00016db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007560  08007560  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08007560  08007560  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007560  08007560  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007560  08007560  00017560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001e8  08007750  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08007750  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012945  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000293f  00000000  00000000  00032b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d98  00000000  00000000  00036378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000177a3  00000000  00000000  00037110  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f2db  00000000  00000000  0004e8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079042  00000000  00000000  0005db8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6bd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b3c  00000000  00000000  000d6c4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006d9c 	.word	0x08006d9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08006d9c 	.word	0x08006d9c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b42:	f001 fb8b 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b46:	f000 f8df 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4a:	f000 f9a7 	bl	8000e9c <MX_GPIO_Init>
  MX_CAN_Init();
 8000b4e:	f000 f923 	bl	8000d98 <MX_CAN_Init>
  MX_TIM3_Init();
 8000b52:	f000 f955 	bl	8000e00 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  I2C_Init();
 8000b56:	f000 fd45 	bl	80015e4 <I2C_Init>
  vUART_Init(&huart2, USART2, (USART_StringReceive_t *)&uart_receive_handle);
 8000b5a:	4a5a      	ldr	r2, [pc, #360]	; (8000cc4 <main+0x188>)
 8000b5c:	495a      	ldr	r1, [pc, #360]	; (8000cc8 <main+0x18c>)
 8000b5e:	485b      	ldr	r0, [pc, #364]	; (8000ccc <main+0x190>)
 8000b60:	f000 fa4c 	bl	8000ffc <vUART_Init>
  //  vIWDG_Init(&hiwdg, IWDG_TIME);
  __RETARGET_INIT(DEBUG_USART);
 8000b64:	4859      	ldr	r0, [pc, #356]	; (8000ccc <main+0x190>)
 8000b66:	f001 f87f 	bl	8001c68 <RetargetInit>
  __PRINT_RESET_CAUSE();
 8000b6a:	f000 fbbf 	bl	80012ec <resetCauseGet>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 fc01 	bl	8001378 <resetCauseGetName>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 f991 	bl	8004ea0 <iprintf>
 8000b7e:	4854      	ldr	r0, [pc, #336]	; (8000cd0 <main+0x194>)
 8000b80:	f004 fa02 	bl	8004f88 <puts>
  __MY_OFF_ALL_LED();
 8000b84:	2201      	movs	r2, #1
 8000b86:	2120      	movs	r1, #32
 8000b88:	4852      	ldr	r0, [pc, #328]	; (8000cd4 <main+0x198>)
 8000b8a:	f001 ff4f 	bl	8002a2c <HAL_GPIO_WritePin>
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b94:	4850      	ldr	r0, [pc, #320]	; (8000cd8 <main+0x19c>)
 8000b96:	f001 ff49 	bl	8002a2c <HAL_GPIO_WritePin>
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ba0:	484d      	ldr	r0, [pc, #308]	; (8000cd8 <main+0x19c>)
 8000ba2:	f001 ff43 	bl	8002a2c <HAL_GPIO_WritePin>
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	4849      	ldr	r0, [pc, #292]	; (8000cd4 <main+0x198>)
 8000bae:	f001 ff3d 	bl	8002a2c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 8000bb2:	484a      	ldr	r0, [pc, #296]	; (8000cdc <main+0x1a0>)
 8000bb4:	f002 fc03 	bl	80033be <HAL_TIM_Base_Start_IT>
  printf("Start Application\r\n");
 8000bb8:	4849      	ldr	r0, [pc, #292]	; (8000ce0 <main+0x1a4>)
 8000bba:	f004 f9e5 	bl	8004f88 <puts>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    superloop_first_tick = HAL_GetTick();
 8000bbe:	f001 fb75 	bl	80022ac <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	4b47      	ldr	r3, [pc, #284]	; (8000ce4 <main+0x1a8>)
 8000bc6:	601a      	str	r2, [r3, #0]
    /* Task blink led 500ms */
    if (superloop_first_tick - prev_time_blink_led >= BLINK_LED_FREQ)
 8000bc8:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <main+0x1a8>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <main+0x1ac>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	1ad4      	subs	r4, r2, r3
 8000bd2:	f001 fb75 	bl	80022c0 <HAL_GetTickFreq>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bde:	fb03 f302 	mul.w	r3, r3, r2
 8000be2:	429c      	cmp	r4, r3
 8000be4:	d308      	bcc.n	8000bf8 <main+0xbc>
    {
      prev_time_blink_led = superloop_first_tick;
 8000be6:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <main+0x1a8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a3f      	ldr	r2, [pc, #252]	; (8000ce8 <main+0x1ac>)
 8000bec:	6013      	str	r3, [r2, #0]
      __MY_TOGGLE_LED(LED_4);
 8000bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf2:	4838      	ldr	r0, [pc, #224]	; (8000cd4 <main+0x198>)
 8000bf4:	f001 ff32 	bl	8002a5c <HAL_GPIO_TogglePin>
    }

    /* Task read sensor 1000ms */
    if (superloop_first_tick - prev_time_app_1 >= APP1_FREQ)
 8000bf8:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <main+0x1a8>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b3b      	ldr	r3, [pc, #236]	; (8000cec <main+0x1b0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	1ad4      	subs	r4, r2, r3
 8000c02:	f001 fb5d 	bl	80022c0 <HAL_GetTickFreq>
 8000c06:	4603      	mov	r3, r0
 8000c08:	461a      	mov	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fb03 f302 	mul.w	r3, r3, r2
 8000c12:	429c      	cmp	r4, r3
 8000c14:	d303      	bcc.n	8000c1e <main+0xe2>
    {
      prev_time_app_1 = superloop_first_tick;
 8000c16:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <main+0x1a8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a34      	ldr	r2, [pc, #208]	; (8000cec <main+0x1b0>)
 8000c1c:	6013      	str	r3, [r2, #0]
    }

    if (superloop_first_tick - prev_time_app_2 >= APP2_FREQ)
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <main+0x1a8>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <main+0x1b4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	1ad4      	subs	r4, r2, r3
 8000c28:	f001 fb4a 	bl	80022c0 <HAL_GetTickFreq>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000c34:	fb03 f302 	mul.w	r3, r3, r2
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	d333      	bcc.n	8000ca4 <main+0x168>
    {
      prev_time_app_2 = superloop_first_tick;
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <main+0x1a8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2b      	ldr	r2, [pc, #172]	; (8000cf0 <main+0x1b4>)
 8000c42:	6013      	str	r3, [r2, #0]
      SHT31_SendCommand(eCMD_MEAS_CLOCKSTR_H);
 8000c44:	f642 4006 	movw	r0, #11270	; 0x2c06
 8000c48:	f000 ff1b 	bl	8001a82 <SHT31_SendCommand>
      SHT31_ReadData(&sht31_handle);
 8000c4c:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <main+0x1b8>)
 8000c4e:	f000 ff35 	bl	8001abc <SHT31_ReadData>
      SHT31_CRCCheck(&sht31_handle);
 8000c52:	4828      	ldr	r0, [pc, #160]	; (8000cf4 <main+0x1b8>)
 8000c54:	f000 ffc2 	bl	8001bdc <SHT31_CRCCheck>
      if (sht31_handle.crc_flag == 1)
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <main+0x1b8>)
 8000c5a:	7c9b      	ldrb	r3, [r3, #18]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d01b      	beq.n	8000c9e <main+0x162>
      {
        SHT31_calculateTemp(&sht31_handle);
 8000c66:	4823      	ldr	r0, [pc, #140]	; (8000cf4 <main+0x1b8>)
 8000c68:	f000 ff3e 	bl	8001ae8 <SHT31_calculateTemp>
        SHT31_calculateHumid(&sht31_handle);
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <main+0x1b8>)
 8000c6e:	f000 ff7f 	bl	8001b70 <SHT31_calculateHumid>
        printf("temp = %2.2f\r\nhumid = %2.2f\r\n\r\n", sht31_handle.Temperature, sht31_handle.Humidity);
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <main+0x1b8>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fbe0 	bl	800043c <__aeabi_f2d>
 8000c7c:	4605      	mov	r5, r0
 8000c7e:	460e      	mov	r6, r1
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <main+0x1b8>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fbd9 	bl	800043c <__aeabi_f2d>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	e9cd 3400 	strd	r3, r4, [sp]
 8000c92:	462a      	mov	r2, r5
 8000c94:	4633      	mov	r3, r6
 8000c96:	4818      	ldr	r0, [pc, #96]	; (8000cf8 <main+0x1bc>)
 8000c98:	f004 f902 	bl	8004ea0 <iprintf>
 8000c9c:	e002      	b.n	8000ca4 <main+0x168>
      }
      else
      {
        printf("CRC failed\r\n");
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <main+0x1c0>)
 8000ca0:	f004 f972 	bl	8004f88 <puts>
      }
    }

    superloop_process_time = HAL_GetTick() - superloop_first_tick;
 8000ca4:	f001 fb02 	bl	80022ac <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <main+0x1a8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <main+0x1c4>)
 8000cb2:	6013      	str	r3, [r2, #0]
    vMCUProcessTimeUpdate(&mcu_process_time_handle, superloop_process_time);
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <main+0x1c4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4812      	ldr	r0, [pc, #72]	; (8000d04 <main+0x1c8>)
 8000cbc:	f000 fc30 	bl	8001520 <vMCUProcessTimeUpdate>
    superloop_first_tick = HAL_GetTick();
 8000cc0:	e77d      	b.n	8000bbe <main+0x82>
 8000cc2:	bf00      	nop
 8000cc4:	20000218 	.word	0x20000218
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	2000037c 	.word	0x2000037c
 8000cd0:	08006db8 	.word	0x08006db8
 8000cd4:	40010c00 	.word	0x40010c00
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	2000033c 	.word	0x2000033c
 8000ce0:	08006dbc 	.word	0x08006dbc
 8000ce4:	20000210 	.word	0x20000210
 8000ce8:	20000204 	.word	0x20000204
 8000cec:	20000208 	.word	0x20000208
 8000cf0:	2000020c 	.word	0x2000020c
 8000cf4:	20000280 	.word	0x20000280
 8000cf8:	08006dd0 	.word	0x08006dd0
 8000cfc:	08006df0 	.word	0x08006df0
 8000d00:	20000214 	.word	0x20000214
 8000d04:	20000000 	.word	0x20000000

08000d08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b090      	sub	sp, #64	; 0x40
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	2228      	movs	r2, #40	; 0x28
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fc02 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000d2a:	2309      	movs	r3, #9
 8000d2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d40:	2302      	movs	r3, #2
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f001 febb 	bl	8002ad0 <HAL_RCC_OscConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d60:	f000 f932 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
     */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000d64:	230f      	movs	r3, #15
 8000d66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2102      	movs	r1, #2
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 f926 	bl	8002fd0 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d8a:	f000 f91d 	bl	8000fc8 <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3740      	adds	r7, #64	; 0x40
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_CAN_Init+0x60>)
 8000d9e:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <MX_CAN_Init+0x64>)
 8000da0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_CAN_Init+0x60>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_CAN_Init+0x60>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_CAN_Init+0x60>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_CAN_Init+0x60>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_CAN_Init+0x60>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_CAN_Init+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_CAN_Init+0x60>)
 8000de6:	f001 fa75 	bl	80022d4 <HAL_CAN_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f000 f8ea 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000314 	.word	0x20000314
 8000dfc:	40006400 	.word	0x40006400

08000e00 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	463b      	mov	r3, r7
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <MX_TIM3_Init+0x98>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e24:	2247      	movs	r2, #71	; 0x47
 8000e26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e42:	4814      	ldr	r0, [pc, #80]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e44:	f002 fa90 	bl	8003368 <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f000 f8bb 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e58:	f107 0308 	add.w	r3, r7, #8
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e60:	f002 fbd8 	bl	8003614 <HAL_TIM_ConfigClockSource>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f000 f8ad 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e76:	463b      	mov	r3, r7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4806      	ldr	r0, [pc, #24]	; (8000e94 <MX_TIM3_Init+0x94>)
 8000e7c:	f002 fd9e 	bl	80039bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000e86:	f000 f89f 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3718      	adds	r7, #24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000033c 	.word	0x2000033c
 8000e98:	40000400 	.word	0x40000400

08000e9c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000eb6:	f043 0320 	orr.w	r3, r3, #32
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b25      	ldr	r3, [pc, #148]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0320 	and.w	r3, r3, #32
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000ee6:	f043 0308 	orr.w	r3, r3, #8
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_GPIO_Init+0xb8>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin | USER_LED_4_Pin, GPIO_PIN_RESET);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000efe:	4816      	ldr	r0, [pc, #88]	; (8000f58 <MX_GPIO_Init+0xbc>)
 8000f00:	f001 fd94 	bl	8002a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT_UP_Pin BT_CENTER_Pin BT_DOWN_Pin */
  GPIO_InitStruct.Pin = BT_UP_Pin | BT_CENTER_Pin | BT_DOWN_Pin;
 8000f04:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_GPIO_Init+0xc0>)
 8000f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	4619      	mov	r1, r3
 8000f18:	4811      	ldr	r0, [pc, #68]	; (8000f60 <MX_GPIO_Init+0xc4>)
 8000f1a:	f001 fc2d 	bl	8002778 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_4_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin | USER_LED_4_Pin;
 8000f1e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	4619      	mov	r1, r3
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <MX_GPIO_Init+0xbc>)
 8000f38:	f001 fc1e 	bl	8002778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2102      	movs	r1, #2
 8000f40:	2017      	movs	r0, #23
 8000f42:	f001 fb78 	bl	8002636 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f46:	2017      	movs	r0, #23
 8000f48:	f001 fb91 	bl	800266e <HAL_NVIC_EnableIRQ>
}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010c00 	.word	0x40010c00
 8000f5c:	10210000 	.word	0x10210000
 8000f60:	40010800 	.word	0x40010800

08000f64 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM3)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d114      	bne.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
    static uint32_t count;
    count++;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f7e:	6013      	str	r3, [r2, #0]
    if (count == 50) /* Every 50ms */
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b32      	cmp	r3, #50	; 0x32
 8000f86:	d10b      	bne.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
      count = 0;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
      if (uart_receive_handle.rx_cplt_flag == 1)
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f90:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <HAL_TIM_PeriodElapsedCallback+0x3c>
      {
        vExecuteCLIcmd((USART_StringReceive_t *)&uart_receive_handle);
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f9c:	f000 f8aa 	bl	80010f4 <vExecuteCLIcmd>
      }
    }
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
    HAL_IncTick();
 8000faa:	f001 f96d 	bl	8002288 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	20000294 	.word	0x20000294
 8000fc0:	20000218 	.word	0x20000218
 8000fc4:	40000800 	.word	0x40000800

08000fc8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <__NVIC_SystemReset+0x20>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fe4:	4903      	ldr	r1, [pc, #12]	; (8000ff4 <__NVIC_SystemReset+0x20>)
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_SystemReset+0x24>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	60cb      	str	r3, [r1, #12]
 8000fec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <__NVIC_SystemReset+0x1c>
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	05fa0004 	.word	0x05fa0004

08000ffc <vUART_Init>:
/* Should be excluded if not used to prevent build errors */
extern USART_StringReceive_t uart_receive_handle;
extern MCUProcessingEvaluate_t mcu_process_time_handle;

void vUART_Init(UART_HandleTypeDef *huart, USART_TypeDef *USARTx, USART_StringReceive_t *uart_receive_handle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
    huart->Instance = USARTx; /* Select this parameter according to USART Instance configured in .ioc */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	601a      	str	r2, [r3, #0]
    huart->Init.BaudRate = 115200;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001014:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(huart) != HAL_OK) /* Inside HAL_UART_Init also initialize GPIO used for USART */
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f002 fd14 	bl	8003a68 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <vUART_Init+0x52>
    {
        _Error_Handler(__FILE__, __LINE__);
 8001046:	2117      	movs	r1, #23
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <vUART_Init+0x68>)
 800104a:	f000 f9e3 	bl	8001414 <_Error_Handler>
    }
    /* Enable ISR when receive via USART */
    HAL_UART_Receive_IT(huart, (uint8_t *)(&uart_receive_handle->rx_data), 2);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3365      	adds	r3, #101	; 0x65
 8001052:	2202      	movs	r2, #2
 8001054:	4619      	mov	r1, r3
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f002 fe92 	bl	8003d80 <HAL_UART_Receive_IT>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08006dfc 	.word	0x08006dfc

08001068 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    /* Process USART2 Receive_Cplt_IT */
    if (huart->Instance == USART2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <HAL_UART_RxCpltCallback+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d130      	bne.n	80010dc <HAL_UART_RxCpltCallback+0x74>
    {
        /* Reset Receive Buffer whenever index_value = 0 */
        if (uart_receive_handle.rx_index == 0)
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10d      	bne.n	800109e <HAL_UART_RxCpltCallback+0x36>
        {
            for (i = 0; i < USART_RX_BUFFER_SIZE; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
 8001086:	e007      	b.n	8001098 <HAL_UART_RxCpltCallback+0x30>
            {
                uart_receive_handle.rx_buffer[i] = 0;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 800108c:	4413      	add	r3, r2
 800108e:	2200      	movs	r2, #0
 8001090:	705a      	strb	r2, [r3, #1]
            for (i = 0; i < USART_RX_BUFFER_SIZE; i++)
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	3301      	adds	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b63      	cmp	r3, #99	; 0x63
 800109c:	d9f4      	bls.n	8001088 <HAL_UART_RxCpltCallback+0x20>
            }
        }

        /* Case when user input data not equal to "\r" */
        if (uart_receive_handle.rx_data[0] != 13)
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 80010a0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80010a4:	2b0d      	cmp	r3, #13
 80010a6:	d00d      	beq.n	80010c4 <HAL_UART_RxCpltCallback+0x5c>
        {
            uart_receive_handle.rx_buffer[uart_receive_handle.rx_index++] = uart_receive_handle.rx_data[0];
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	b2d1      	uxtb	r1, r2
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 80010b2:	7011      	strb	r1, [r2, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 80010b8:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 80010be:	440b      	add	r3, r1
 80010c0:	705a      	strb	r2, [r3, #1]
 80010c2:	e006      	b.n	80010d2 <HAL_UART_RxCpltCallback+0x6a>
        }

        else /* Case when user input data = "\r" */
        {
            uart_receive_handle.rx_index = 0;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
            uart_receive_handle.rx_cplt_flag = 1;
 80010ca:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <HAL_UART_RxCpltCallback+0x80>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        }

        /* Trigger to Receive and jump into ISR on each ISR process is necessary */
        HAL_UART_Receive_IT(&huart2, (uint8_t *)(&uart_receive_handle.rx_data), 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	4905      	ldr	r1, [pc, #20]	; (80010ec <HAL_UART_RxCpltCallback+0x84>)
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <HAL_UART_RxCpltCallback+0x88>)
 80010d8:	f002 fe52 	bl	8003d80 <HAL_UART_Receive_IT>
    }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004400 	.word	0x40004400
 80010e8:	20000218 	.word	0x20000218
 80010ec:	2000027d 	.word	0x2000027d
 80010f0:	2000037c 	.word	0x2000037c

080010f4 <vExecuteCLIcmd>:

void vExecuteCLIcmd(USART_StringReceive_t *uart_receive_handle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    // "led1 off", /* 3 */
    // "led4 on",  /* 4 */
    // "led4 off", /* 5 */
    // "time",     /* 6 */
    // "evaluate", /* 7 */
    char *input_string = (char *)&uart_receive_handle->rx_buffer;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3301      	adds	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
    // PRINTF("Command string: \"%s\"\r\n", uart_receive_handle->rx_buffer);

    if (IS_STRING(input_string, "help"))
 8001102:	4961      	ldr	r1, [pc, #388]	; (8001288 <vExecuteCLIcmd+0x194>)
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff f823 	bl	8000150 <strcmp>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d11e      	bne.n	800114e <vExecuteCLIcmd+0x5a>
    {
        printf("/* -------------------------------------------------------------------------- */\r\n");
 8001110:	485e      	ldr	r0, [pc, #376]	; (800128c <vExecuteCLIcmd+0x198>)
 8001112:	f003 ff39 	bl	8004f88 <puts>
        printf("/*                               CLI - HELP MENU                              */\r\n");
 8001116:	485e      	ldr	r0, [pc, #376]	; (8001290 <vExecuteCLIcmd+0x19c>)
 8001118:	f003 ff36 	bl	8004f88 <puts>
        printf("/*--------------------------------------------------------------------------- */\r\n");
 800111c:	485d      	ldr	r0, [pc, #372]	; (8001294 <vExecuteCLIcmd+0x1a0>)
 800111e:	f003 ff33 	bl	8004f88 <puts>
        printf("\"help\"            : Display help menu\r\n");
 8001122:	485d      	ldr	r0, [pc, #372]	; (8001298 <vExecuteCLIcmd+0x1a4>)
 8001124:	f003 ff30 	bl	8004f88 <puts>
        printf("\"led<x> <state>\"  : Control LED x in range 1 or 4, state either 1-on or 0-off\r\n");
 8001128:	485c      	ldr	r0, [pc, #368]	; (800129c <vExecuteCLIcmd+0x1a8>)
 800112a:	f003 ff2d 	bl	8004f88 <puts>
        printf("\"time\"            : Get MCU working time\r\n");
 800112e:	485c      	ldr	r0, [pc, #368]	; (80012a0 <vExecuteCLIcmd+0x1ac>)
 8001130:	f003 ff2a 	bl	8004f88 <puts>
        printf("\"process\"         : Evaluate superloop processing time\r\n");
 8001134:	485b      	ldr	r0, [pc, #364]	; (80012a4 <vExecuteCLIcmd+0x1b0>)
 8001136:	f003 ff27 	bl	8004f88 <puts>
        printf("\"reboot\"          : Perform chip reset\r\n");
 800113a:	485b      	ldr	r0, [pc, #364]	; (80012a8 <vExecuteCLIcmd+0x1b4>)
 800113c:	f003 ff24 	bl	8004f88 <puts>
        printf("\"clock\"           : MCU clock\r\n");
 8001140:	485a      	ldr	r0, [pc, #360]	; (80012ac <vExecuteCLIcmd+0x1b8>)
 8001142:	f003 ff21 	bl	8004f88 <puts>
        printf("\r\n\r\n>>> ");
 8001146:	485a      	ldr	r0, [pc, #360]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001148:	f003 feaa 	bl	8004ea0 <iprintf>
 800114c:	e094      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, ""))
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <vExecuteCLIcmd+0x6a>
    {
        printf("\r\n\r\n>>> ");
 8001156:	4856      	ldr	r0, [pc, #344]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001158:	f003 fea2 	bl	8004ea0 <iprintf>
 800115c:	e08c      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "led1 1"))
 800115e:	4955      	ldr	r1, [pc, #340]	; (80012b4 <vExecuteCLIcmd+0x1c0>)
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7fe fff5 	bl	8000150 <strcmp>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d108      	bne.n	800117e <vExecuteCLIcmd+0x8a>
    {
        __MY_WRITE_LED(LED_1, ON);
 800116c:	2200      	movs	r2, #0
 800116e:	2120      	movs	r1, #32
 8001170:	4851      	ldr	r0, [pc, #324]	; (80012b8 <vExecuteCLIcmd+0x1c4>)
 8001172:	f001 fc5b 	bl	8002a2c <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8001176:	484e      	ldr	r0, [pc, #312]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001178:	f003 fe92 	bl	8004ea0 <iprintf>
 800117c:	e07c      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "led1 0"))
 800117e:	494f      	ldr	r1, [pc, #316]	; (80012bc <vExecuteCLIcmd+0x1c8>)
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7fe ffe5 	bl	8000150 <strcmp>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d108      	bne.n	800119e <vExecuteCLIcmd+0xaa>
    {
        __MY_WRITE_LED(LED_1, OFF);
 800118c:	2201      	movs	r2, #1
 800118e:	2120      	movs	r1, #32
 8001190:	4849      	ldr	r0, [pc, #292]	; (80012b8 <vExecuteCLIcmd+0x1c4>)
 8001192:	f001 fc4b 	bl	8002a2c <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 8001196:	4846      	ldr	r0, [pc, #280]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001198:	f003 fe82 	bl	8004ea0 <iprintf>
 800119c:	e06c      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "led4 1"))
 800119e:	4948      	ldr	r1, [pc, #288]	; (80012c0 <vExecuteCLIcmd+0x1cc>)
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f7fe ffd5 	bl	8000150 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d109      	bne.n	80011c0 <vExecuteCLIcmd+0xcc>
    {
        __MY_WRITE_LED(LED_4, ON);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b2:	4841      	ldr	r0, [pc, #260]	; (80012b8 <vExecuteCLIcmd+0x1c4>)
 80011b4:	f001 fc3a 	bl	8002a2c <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 80011b8:	483d      	ldr	r0, [pc, #244]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 80011ba:	f003 fe71 	bl	8004ea0 <iprintf>
 80011be:	e05b      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "led4 0"))
 80011c0:	4940      	ldr	r1, [pc, #256]	; (80012c4 <vExecuteCLIcmd+0x1d0>)
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7fe ffc4 	bl	8000150 <strcmp>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <vExecuteCLIcmd+0xee>
    {
        __MY_WRITE_LED(LED_4, OFF);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	4838      	ldr	r0, [pc, #224]	; (80012b8 <vExecuteCLIcmd+0x1c4>)
 80011d6:	f001 fc29 	bl	8002a2c <HAL_GPIO_WritePin>
        printf("\r\n\r\n>>> ");
 80011da:	4835      	ldr	r0, [pc, #212]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 80011dc:	f003 fe60 	bl	8004ea0 <iprintf>
 80011e0:	e04a      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "time"))
 80011e2:	4939      	ldr	r1, [pc, #228]	; (80012c8 <vExecuteCLIcmd+0x1d4>)
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7fe ffb3 	bl	8000150 <strcmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d10c      	bne.n	800120a <vExecuteCLIcmd+0x116>
    {
        printf("MCU working time: ");
 80011f0:	4836      	ldr	r0, [pc, #216]	; (80012cc <vExecuteCLIcmd+0x1d8>)
 80011f2:	f003 fe55 	bl	8004ea0 <iprintf>
        __PRINT_TIME_STAMP();
 80011f6:	f001 f859 	bl	80022ac <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f917 	bl	8001430 <vTimeStamp>
        printf("\r\n\r\n>>> ");
 8001202:	482b      	ldr	r0, [pc, #172]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001204:	f003 fe4c 	bl	8004ea0 <iprintf>
 8001208:	e036      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "process"))
 800120a:	4931      	ldr	r1, [pc, #196]	; (80012d0 <vExecuteCLIcmd+0x1dc>)
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f7fe ff9f 	bl	8000150 <strcmp>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d106      	bne.n	8001226 <vExecuteCLIcmd+0x132>
    {
        vPrintProcessingTime(&mcu_process_time_handle);
 8001218:	482e      	ldr	r0, [pc, #184]	; (80012d4 <vExecuteCLIcmd+0x1e0>)
 800121a:	f000 f9bd 	bl	8001598 <vPrintProcessingTime>
        printf("\r\n\r\n>>> ");
 800121e:	4824      	ldr	r0, [pc, #144]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001220:	f003 fe3e 	bl	8004ea0 <iprintf>
 8001224:	e028      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "clock"))
 8001226:	492c      	ldr	r1, [pc, #176]	; (80012d8 <vExecuteCLIcmd+0x1e4>)
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7fe ff91 	bl	8000150 <strcmp>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d111      	bne.n	8001258 <vExecuteCLIcmd+0x164>
    {
        printf("RCC_HCLK Freq: %lu\r\n", HAL_RCC_GetHCLKFreq());
 8001234:	f002 f818 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8001238:	4603      	mov	r3, r0
 800123a:	4619      	mov	r1, r3
 800123c:	4827      	ldr	r0, [pc, #156]	; (80012dc <vExecuteCLIcmd+0x1e8>)
 800123e:	f003 fe2f 	bl	8004ea0 <iprintf>
        printf("Tick Freq: %d\r\n", HAL_GetTickFreq());
 8001242:	f001 f83d 	bl	80022c0 <HAL_GetTickFreq>
 8001246:	4603      	mov	r3, r0
 8001248:	4619      	mov	r1, r3
 800124a:	4825      	ldr	r0, [pc, #148]	; (80012e0 <vExecuteCLIcmd+0x1ec>)
 800124c:	f003 fe28 	bl	8004ea0 <iprintf>
        printf("\r\n\r\n>>> ");
 8001250:	4817      	ldr	r0, [pc, #92]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001252:	f003 fe25 	bl	8004ea0 <iprintf>
 8001256:	e00f      	b.n	8001278 <vExecuteCLIcmd+0x184>
    }
    else if (IS_STRING(input_string, "reboot"))
 8001258:	4922      	ldr	r1, [pc, #136]	; (80012e4 <vExecuteCLIcmd+0x1f0>)
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7fe ff78 	bl	8000150 <strcmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <vExecuteCLIcmd+0x176>
    {
        NVIC_SystemReset();
 8001266:	f7ff feb5 	bl	8000fd4 <__NVIC_SystemReset>
    }
    else
    {
        printf("Unknown Command: \"%s\"\r\n", input_string);
 800126a:	68f9      	ldr	r1, [r7, #12]
 800126c:	481e      	ldr	r0, [pc, #120]	; (80012e8 <vExecuteCLIcmd+0x1f4>)
 800126e:	f003 fe17 	bl	8004ea0 <iprintf>
        printf("\r\n\r\n>>> ");
 8001272:	480f      	ldr	r0, [pc, #60]	; (80012b0 <vExecuteCLIcmd+0x1bc>)
 8001274:	f003 fe14 	bl	8004ea0 <iprintf>
    }
    /* Clear receive complete flag */
    uart_receive_handle->rx_cplt_flag = 0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08006e10 	.word	0x08006e10
 800128c:	08006e18 	.word	0x08006e18
 8001290:	08006e6c 	.word	0x08006e6c
 8001294:	08006ec0 	.word	0x08006ec0
 8001298:	08006f14 	.word	0x08006f14
 800129c:	08006f3c 	.word	0x08006f3c
 80012a0:	08006f8c 	.word	0x08006f8c
 80012a4:	08006fb8 	.word	0x08006fb8
 80012a8:	08006ff0 	.word	0x08006ff0
 80012ac:	08007018 	.word	0x08007018
 80012b0:	08007038 	.word	0x08007038
 80012b4:	08007044 	.word	0x08007044
 80012b8:	40010c00 	.word	0x40010c00
 80012bc:	0800704c 	.word	0x0800704c
 80012c0:	08007054 	.word	0x08007054
 80012c4:	0800705c 	.word	0x0800705c
 80012c8:	08007064 	.word	0x08007064
 80012cc:	0800706c 	.word	0x0800706c
 80012d0:	08007080 	.word	0x08007080
 80012d4:	20000000 	.word	0x20000000
 80012d8:	08007088 	.word	0x08007088
 80012dc:	08007090 	.word	0x08007090
 80012e0:	080070a8 	.word	0x080070a8
 80012e4:	080070b8 	.word	0x080070b8
 80012e8:	080070c0 	.word	0x080070c0

080012ec <resetCauseGet>:
	}
}
#endif /* !configLL_UART */

reset_cause_t resetCauseGet(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
	reset_cause_t reset_cause;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <resetCauseGet+0x84>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da02      	bge.n	8001300 <resetCauseGet+0x14>
	{
		reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 80012fa:	2301      	movs	r3, #1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	e02e      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <resetCauseGet+0x84>)
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <resetCauseGet+0x26>
	{
		reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800130c:	2302      	movs	r3, #2
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	e025      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <resetCauseGet+0x84>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <resetCauseGet+0x38>
	{
		reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800131e:	2303      	movs	r3, #3
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	e01c      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <resetCauseGet+0x84>)
 8001326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <resetCauseGet+0x4a>
	{
		reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8001330:	2304      	movs	r3, #4
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	e013      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <resetCauseGet+0x84>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <resetCauseGet+0x5c>
	{
		reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8001342:	2305      	movs	r3, #5
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	e00a      	b.n	800135e <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <resetCauseGet+0x84>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <resetCauseGet+0x6e>
	{
		reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8001354:	2306      	movs	r3, #6
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	e001      	b.n	800135e <resetCauseGet+0x72>
     {
     reset_cause = eRESET_CAUSE_BROWNOUT_RESET;
     } */
	else
	{
		reset_cause = eRESET_CAUSE_UNKNOWN;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
	}

	// Clear all the reset flags or else they will remain set during future resets until system power is fully removed.
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <resetCauseGet+0x88>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]

	return reset_cause;
 8001364:	79fb      	ldrb	r3, [r7, #7]
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	424204e0 	.word	0x424204e0

08001378 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
	const char *reset_cause_name = "TBD";
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <resetCauseGetName+0x78>)
 8001384:	60fb      	str	r3, [r7, #12]

	switch (reset_cause)
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	2b07      	cmp	r3, #7
 800138a:	d82b      	bhi.n	80013e4 <resetCauseGetName+0x6c>
 800138c:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <resetCauseGetName+0x1c>)
 800138e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001392:	bf00      	nop
 8001394:	080013b5 	.word	0x080013b5
 8001398:	080013bb 	.word	0x080013bb
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	080013c7 	.word	0x080013c7
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	080013d3 	.word	0x080013d3
 80013ac:	080013d9 	.word	0x080013d9
 80013b0:	080013df 	.word	0x080013df
	{
	case eRESET_CAUSE_UNKNOWN:
		reset_cause_name = "UNKNOWN";
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <resetCauseGetName+0x7c>)
 80013b6:	60fb      	str	r3, [r7, #12]
		break;
 80013b8:	e014      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_LOW_POWER_RESET:
		reset_cause_name = "LOW_POWER_RESET";
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <resetCauseGetName+0x80>)
 80013bc:	60fb      	str	r3, [r7, #12]
		break;
 80013be:	e011      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
		reset_cause_name = "WINDOW_WATCHDOG_RESET";
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <resetCauseGetName+0x84>)
 80013c2:	60fb      	str	r3, [r7, #12]
		break;
 80013c4:	e00e      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
		reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <resetCauseGetName+0x88>)
 80013c8:	60fb      	str	r3, [r7, #12]
		break;
 80013ca:	e00b      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_SOFTWARE_RESET:
		reset_cause_name = "SOFTWARE_RESET";
 80013cc:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <resetCauseGetName+0x8c>)
 80013ce:	60fb      	str	r3, [r7, #12]
		break;
 80013d0:	e008      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
		reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 80013d2:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <resetCauseGetName+0x90>)
 80013d4:	60fb      	str	r3, [r7, #12]
		break;
 80013d6:	e005      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
		reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <resetCauseGetName+0x94>)
 80013da:	60fb      	str	r3, [r7, #12]
		break;
 80013dc:	e002      	b.n	80013e4 <resetCauseGetName+0x6c>
	case eRESET_CAUSE_BROWNOUT_RESET:
		reset_cause_name = "BROWNOUT_RESET (BOR)";
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <resetCauseGetName+0x98>)
 80013e0:	60fb      	str	r3, [r7, #12]
		break;
 80013e2:	bf00      	nop
	}
	return reset_cause_name;
 80013e4:	68fb      	ldr	r3, [r7, #12]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	080070d8 	.word	0x080070d8
 80013f4:	080070dc 	.word	0x080070dc
 80013f8:	080070e4 	.word	0x080070e4
 80013fc:	080070f4 	.word	0x080070f4
 8001400:	0800710c 	.word	0x0800710c
 8001404:	08007128 	.word	0x08007128
 8001408:	08007138 	.word	0x08007138
 800140c:	08007168 	.word	0x08007168
 8001410:	08007184 	.word	0x08007184

08001414 <_Error_Handler>:
	printf("Set IWDG %lums\r\n", IWDG_TIME);
#endif
}

__weak void _Error_Handler(char *file, int line)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	while (1)
	{
		printf("\r\nError file %s line %d", file, line);
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <_Error_Handler+0x18>)
 8001424:	f003 fd3c 	bl	8004ea0 <iprintf>
 8001428:	e7f9      	b.n	800141e <_Error_Handler+0xa>
 800142a:	bf00      	nop
 800142c:	080071c8 	.word	0x080071c8

08001430 <vTimeStamp>:
	}
}

void vTimeStamp(uint32_t now_tick)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]

	// HAL_TICK_FREQ_10HZ = 100U,
	// HAL_TICK_FREQ_100HZ = 10U,
	// HAL_TICK_FREQ_1KHZ = 1U,
	// HAL_TICK_FREQ_DEFAULT = HAL_TICK_FREQ_1KHZ
	hal_tick_freq = HAL_GetTickFreq();
 8001438:	f000 ff42 	bl	80022c0 <HAL_GetTickFreq>
 800143c:	4603      	mov	r3, r0
 800143e:	613b      	str	r3, [r7, #16]
	if (hal_tick_freq == HAL_TICK_FREQ_1KHZ)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d103      	bne.n	800144e <vTimeStamp+0x1e>
	{
		divider = 1000;
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e005      	b.n	800145a <vTimeStamp+0x2a>
	}
	else if (hal_tick_freq == HAL_TICK_FREQ_100HZ)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	2b0a      	cmp	r3, #10
 8001452:	d102      	bne.n	800145a <vTimeStamp+0x2a>
	{
		divider = 10000;
 8001454:	f242 7310 	movw	r3, #10000	; 0x2710
 8001458:	617b      	str	r3, [r7, #20]
	}
	if (hal_tick_freq == HAL_TICK_FREQ_10HZ)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b64      	cmp	r3, #100	; 0x64
 800145e:	d101      	bne.n	8001464 <vTimeStamp+0x34>
	{
		divider = 100000;
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <vTimeStamp+0xdc>)
 8001462:	617b      	str	r3, [r7, #20]
	}
	/* ex: 450235ms => now_second = 450 */
	now_second = now_tick / divider;
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	60fb      	str	r3, [r7, #12]
	/* ex: 450235ms => millis_second = 235 */
	millis_second = now_tick - now_second * divider;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	fb02 f303 	mul.w	r3, r2, r3
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	61bb      	str	r3, [r7, #24]
	if (millis_second > 10000)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001482:	4293      	cmp	r3, r2
 8001484:	d906      	bls.n	8001494 <vTimeStamp+0x64>
	{
		millis_second /= 100;
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <vTimeStamp+0xe0>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	e009      	b.n	80014a8 <vTimeStamp+0x78>
	}
	else if (millis_second > 1000)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800149a:	d905      	bls.n	80014a8 <vTimeStamp+0x78>
	{
		millis_second /= 10;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <vTimeStamp+0xe4>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	61bb      	str	r3, [r7, #24]
	}
	/* ex: 450235ms => 450/60 = 7 */
	minute = now_second / 60;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <vTimeStamp+0xe8>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	77fb      	strb	r3, [r7, #31]
	/* ex: 450235ms => 450 - 7*60 = 30 */
	second = now_second - minute * 60;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	7ffb      	ldrb	r3, [r7, #31]
 80014ba:	4619      	mov	r1, r3
 80014bc:	0109      	lsls	r1, r1, #4
 80014be:	1acb      	subs	r3, r1, r3
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	72fb      	strb	r3, [r7, #11]
	if (minute > 60)
 80014c8:	7ffb      	ldrb	r3, [r7, #31]
 80014ca:	2b3c      	cmp	r3, #60	; 0x3c
 80014cc:	d90f      	bls.n	80014ee <vTimeStamp+0xbe>
	{
		hour = minute / 60;
 80014ce:	7ffb      	ldrb	r3, [r7, #31]
 80014d0:	4a11      	ldr	r2, [pc, #68]	; (8001518 <vTimeStamp+0xe8>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	095b      	lsrs	r3, r3, #5
 80014d8:	77bb      	strb	r3, [r7, #30]
		minute = minute - hour * 60;
 80014da:	7fbb      	ldrb	r3, [r7, #30]
 80014dc:	461a      	mov	r2, r3
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	4413      	add	r3, r2
 80014ea:	77fb      	strb	r3, [r7, #31]
 80014ec:	e001      	b.n	80014f2 <vTimeStamp+0xc2>
	}
	else
	{
		hour = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	77bb      	strb	r3, [r7, #30]
	}

#if (defined(PRINT_DEBUG))
	printf("[%02d:%02d:%02d.%03lu]\r\n", hour, minute, second, millis_second);
 80014f2:	7fb9      	ldrb	r1, [r7, #30]
 80014f4:	7ffa      	ldrb	r2, [r7, #31]
 80014f6:	7af8      	ldrb	r0, [r7, #11]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	4603      	mov	r3, r0
 80014fe:	4807      	ldr	r0, [pc, #28]	; (800151c <vTimeStamp+0xec>)
 8001500:	f003 fcce 	bl	8004ea0 <iprintf>
#endif
	return;
 8001504:	bf00      	nop
}
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	000186a0 	.word	0x000186a0
 8001510:	51eb851f 	.word	0x51eb851f
 8001514:	cccccccd 	.word	0xcccccccd
 8001518:	88888889 	.word	0x88888889
 800151c:	080071e0 	.word	0x080071e0

08001520 <vMCUProcessTimeUpdate>:

void vMCUProcessTimeUpdate(MCUProcessingEvaluate_t *mcu_process_time_handle, uint32_t current_processing_time)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
	//    HAL_TICK_FREQ_10HZ         = 100U,
	//    HAL_TICK_FREQ_100HZ        = 10U,
	//    HAL_TICK_FREQ_1KHZ         = 1U,
	uint32_t tick_freq, current_process_tick;
	tick_freq = HAL_GetTickFreq();
 800152a:	f000 fec9 	bl	80022c0 <HAL_GetTickFreq>
 800152e:	4603      	mov	r3, r0
 8001530:	60bb      	str	r3, [r7, #8]
	if (tick_freq == HAL_TICK_FREQ_1KHZ)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d102      	bne.n	800153e <vMCUProcessTimeUpdate+0x1e>
	{
		current_process_tick = current_processing_time;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	e00f      	b.n	800155e <vMCUProcessTimeUpdate+0x3e>
	}
	else if (tick_freq == HAL_TICK_FREQ_100HZ)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b0a      	cmp	r3, #10
 8001542:	d106      	bne.n	8001552 <vMCUProcessTimeUpdate+0x32>
	{
		current_process_tick = current_processing_time / 10;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <vMCUProcessTimeUpdate+0x70>)
 8001548:	fba2 2303 	umull	r2, r3, r2, r3
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e005      	b.n	800155e <vMCUProcessTimeUpdate+0x3e>
	}
	else
	{
		current_process_tick = current_processing_time / 100;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <vMCUProcessTimeUpdate+0x74>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	095b      	lsrs	r3, r3, #5
 800155c:	60fb      	str	r3, [r7, #12]
	}
	mcu_process_time_handle->current_process_time = current_process_tick;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]

	if (current_process_tick > mcu_process_time_handle->max_process_time)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	429a      	cmp	r2, r3
 800156c:	d902      	bls.n	8001574 <vMCUProcessTimeUpdate+0x54>
	{
		mcu_process_time_handle->max_process_time = current_process_tick;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	605a      	str	r2, [r3, #4]
	}
	else
	{
	}
	if (current_process_tick < mcu_process_time_handle->min_process_time)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	429a      	cmp	r2, r3
 800157c:	d203      	bcs.n	8001586 <vMCUProcessTimeUpdate+0x66>
	{
		mcu_process_time_handle->min_process_time = current_process_tick;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	601a      	str	r2, [r3, #0]
	}
	else
	{
	}
	return;
 8001584:	bf00      	nop
 8001586:	bf00      	nop
}
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	cccccccd 	.word	0xcccccccd
 8001594:	51eb851f 	.word	0x51eb851f

08001598 <vPrintProcessingTime>:

void vPrintProcessingTime(MCUProcessingEvaluate_t *mcu_process_time_handle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	newline;
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <vPrintProcessingTime+0x3c>)
 80015a2:	f003 fcf1 	bl	8004f88 <puts>
	printf("Current processing time: %ldms\r\n", mcu_process_time_handle->current_process_time);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	4619      	mov	r1, r3
 80015ac:	480a      	ldr	r0, [pc, #40]	; (80015d8 <vPrintProcessingTime+0x40>)
 80015ae:	f003 fc77 	bl	8004ea0 <iprintf>
	printf("Max processing time: %ldms\r\n", mcu_process_time_handle->max_process_time);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <vPrintProcessingTime+0x44>)
 80015ba:	f003 fc71 	bl	8004ea0 <iprintf>
	printf("Min processing time: %ldms\r\n", mcu_process_time_handle->min_process_time);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <vPrintProcessingTime+0x48>)
 80015c6:	f003 fc6b 	bl	8004ea0 <iprintf>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	080071fc 	.word	0x080071fc
 80015d8:	08007200 	.word	0x08007200
 80015dc:	08007224 	.word	0x08007224
 80015e0:	08007244 	.word	0x08007244

080015e4 <I2C_Init>:
#include "retarget.h"

static void delay_ms(uint32_t ms);

void I2C_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]

    /* Clock Port B Enable - IOPBEN bit = 1 */
    RCC->APB2ENR |= (1 << 3);
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <I2C_Init+0x50>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <I2C_Init+0x50>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	6193      	str	r3, [r2, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8001602:	23c0      	movs	r3, #192	; 0xc0
 8001604:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <I2C_Init+0x54>)
 8001614:	f001 f8b0 	bl	8002778 <HAL_GPIO_Init>
    I2C_SCL_SET;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <I2C_Init+0x54>)
 800161a:	2240      	movs	r2, #64	; 0x40
 800161c:	611a      	str	r2, [r3, #16]
    I2C_SDA_SET;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <I2C_Init+0x54>)
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	4a05      	ldr	r2, [pc, #20]	; (8001638 <I2C_Init+0x54>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001628:	6113      	str	r3, [r2, #16]
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	40010c00 	.word	0x40010c00

0800163c <I2C_Start>:

void I2C_Start(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
    I2C_SDA_OUT();
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <I2C_Start+0x50>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a11      	ldr	r2, [pc, #68]	; (800168c <I2C_Start+0x50>)
 8001646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <I2C_Start+0x50>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <I2C_Start+0x50>)
 8001652:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001656:	6013      	str	r3, [r2, #0]
    I2C_SCL_SET;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <I2C_Start+0x50>)
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	611a      	str	r2, [r3, #16]
    I2C_SDA_SET;
 800165e:	4b0b      	ldr	r3, [pc, #44]	; (800168c <I2C_Start+0x50>)
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	4a0a      	ldr	r2, [pc, #40]	; (800168c <I2C_Start+0x50>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	6113      	str	r3, [r2, #16]
    delay_ms(4);
 800166a:	2004      	movs	r0, #4
 800166c:	f000 f9f0 	bl	8001a50 <delay_ms>
    I2C_SDA_RESET;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <I2C_Start+0x50>)
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	4a05      	ldr	r2, [pc, #20]	; (800168c <I2C_Start+0x50>)
 8001676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167a:	6153      	str	r3, [r2, #20]
    delay_ms(4);
 800167c:	2004      	movs	r0, #4
 800167e:	f000 f9e7 	bl	8001a50 <delay_ms>
    I2C_SCL_RESET;
 8001682:	4b02      	ldr	r3, [pc, #8]	; (800168c <I2C_Start+0x50>)
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	615a      	str	r2, [r3, #20]
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40010c00 	.word	0x40010c00

08001690 <I2C_Stop>:

void I2C_Stop(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    I2C_SDA_OUT();
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <I2C_Stop+0x50>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a11      	ldr	r2, [pc, #68]	; (80016e0 <I2C_Stop+0x50>)
 800169a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <I2C_Stop+0x50>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <I2C_Stop+0x50>)
 80016a6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80016aa:	6013      	str	r3, [r2, #0]
    I2C_SCL_RESET;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <I2C_Stop+0x50>)
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	615a      	str	r2, [r3, #20]
    I2C_SDA_RESET;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <I2C_Stop+0x50>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <I2C_Stop+0x50>)
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	6153      	str	r3, [r2, #20]
    delay_ms(4);
 80016be:	2004      	movs	r0, #4
 80016c0:	f000 f9c6 	bl	8001a50 <delay_ms>
    I2C_SDA_SET;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <I2C_Stop+0x50>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <I2C_Stop+0x50>)
 80016ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ce:	6113      	str	r3, [r2, #16]
    I2C_SCL_SET;
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <I2C_Stop+0x50>)
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	611a      	str	r2, [r3, #16]
    delay_ms(4);
 80016d6:	2004      	movs	r0, #4
 80016d8:	f000 f9ba 	bl	8001a50 <delay_ms>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40010c00 	.word	0x40010c00

080016e4 <I2C_Send_Byte>:

void I2C_Send_Byte(uint8_t txd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
    I2C_SDA_OUT();
 80016f2:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <I2C_Send_Byte+0x8c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1e      	ldr	r2, [pc, #120]	; (8001770 <I2C_Send_Byte+0x8c>)
 80016f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <I2C_Send_Byte+0x8c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <I2C_Send_Byte+0x8c>)
 8001704:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001708:	6013      	str	r3, [r2, #0]
    I2C_SCL_RESET;
 800170a:	4b19      	ldr	r3, [pc, #100]	; (8001770 <I2C_Send_Byte+0x8c>)
 800170c:	2240      	movs	r2, #64	; 0x40
 800170e:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 8; i++)
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e024      	b.n	8001760 <I2C_Send_Byte+0x7c>
    {
        uint8_t send_bit = (txd & 0x80) >> 7;
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	09db      	lsrs	r3, r3, #7
 800171a:	72fb      	strb	r3, [r7, #11]
        if (send_bit == 1)
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d106      	bne.n	8001730 <I2C_Send_Byte+0x4c>
        {
            I2C_SDA_SET;
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <I2C_Send_Byte+0x8c>)
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	4a12      	ldr	r2, [pc, #72]	; (8001770 <I2C_Send_Byte+0x8c>)
 8001728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172c:	6113      	str	r3, [r2, #16]
 800172e:	e005      	b.n	800173c <I2C_Send_Byte+0x58>
        }
        else
        {
            I2C_SDA_RESET;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <I2C_Send_Byte+0x8c>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <I2C_Send_Byte+0x8c>)
 8001736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800173a:	6153      	str	r3, [r2, #20]
        }
        txd <<= 1;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	71fb      	strb	r3, [r7, #7]
        delay_ms(2);
 8001742:	2002      	movs	r0, #2
 8001744:	f000 f984 	bl	8001a50 <delay_ms>
        I2C_SCL_SET;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <I2C_Send_Byte+0x8c>)
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	611a      	str	r2, [r3, #16]
        delay_ms(2);
 800174e:	2002      	movs	r0, #2
 8001750:	f000 f97e 	bl	8001a50 <delay_ms>
        I2C_SCL_RESET;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <I2C_Send_Byte+0x8c>)
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	615a      	str	r2, [r3, #20]
    for (i = 0; i < 8; i++)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3301      	adds	r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b07      	cmp	r3, #7
 8001764:	ddd7      	ble.n	8001716 <I2C_Send_Byte+0x32>
    }
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40010c00 	.word	0x40010c00

08001774 <I2C_SendACK>:

void I2C_SendACK(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
    I2C_SCL_RESET;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <I2C_SendACK+0x4c>)
 800177a:	2240      	movs	r2, #64	; 0x40
 800177c:	615a      	str	r2, [r3, #20]
    I2C_SDA_OUT();
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <I2C_SendACK+0x4c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <I2C_SendACK+0x4c>)
 8001784:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <I2C_SendACK+0x4c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <I2C_SendACK+0x4c>)
 8001790:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001794:	6013      	str	r3, [r2, #0]
    I2C_SDA_RESET;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <I2C_SendACK+0x4c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <I2C_SendACK+0x4c>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a0:	6153      	str	r3, [r2, #20]
    delay_ms(2);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f000 f954 	bl	8001a50 <delay_ms>
    I2C_SCL_SET;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <I2C_SendACK+0x4c>)
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	611a      	str	r2, [r3, #16]
    delay_ms(2);
 80017ae:	2002      	movs	r0, #2
 80017b0:	f000 f94e 	bl	8001a50 <delay_ms>
    I2C_SCL_RESET;
 80017b4:	4b02      	ldr	r3, [pc, #8]	; (80017c0 <I2C_SendACK+0x4c>)
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	615a      	str	r2, [r3, #20]
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010c00 	.word	0x40010c00

080017c4 <I2C_SendNACK>:

void I2C_SendNACK(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
    I2C_SCL_RESET;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <I2C_SendNACK+0x4c>)
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	615a      	str	r2, [r3, #20]
    I2C_SDA_OUT();
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <I2C_SendNACK+0x4c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <I2C_SendNACK+0x4c>)
 80017d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <I2C_SendNACK+0x4c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <I2C_SendNACK+0x4c>)
 80017e0:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80017e4:	6013      	str	r3, [r2, #0]
    I2C_SDA_SET;
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <I2C_SendNACK+0x4c>)
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	4a09      	ldr	r2, [pc, #36]	; (8001810 <I2C_SendNACK+0x4c>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f0:	6113      	str	r3, [r2, #16]
    delay_ms(2);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f000 f92c 	bl	8001a50 <delay_ms>
    I2C_SCL_SET;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <I2C_SendNACK+0x4c>)
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	611a      	str	r2, [r3, #16]
    delay_ms(2);
 80017fe:	2002      	movs	r0, #2
 8001800:	f000 f926 	bl	8001a50 <delay_ms>
    I2C_SCL_RESET;
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <I2C_SendNACK+0x4c>)
 8001806:	2240      	movs	r2, #64	; 0x40
 8001808:	615a      	str	r2, [r3, #20]
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40010c00 	.word	0x40010c00

08001814 <I2C_Read_Byte>:

uint8_t I2C_Read_Byte(unsigned char ack)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
    int i = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
    uint8_t rec = 0;
 8001822:	2300      	movs	r3, #0
 8001824:	72fb      	strb	r3, [r7, #11]
    I2C_SDA_IN();
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <I2C_Read_Byte+0x88>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <I2C_Read_Byte+0x88>)
 800182c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <I2C_Read_Byte+0x88>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a19      	ldr	r2, [pc, #100]	; (800189c <I2C_Read_Byte+0x88>)
 8001838:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800183c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 8; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e01a      	b.n	800187a <I2C_Read_Byte+0x66>
    {
        I2C_SCL_RESET;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <I2C_Read_Byte+0x88>)
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	615a      	str	r2, [r3, #20]
        delay_ms(2);
 800184a:	2002      	movs	r0, #2
 800184c:	f000 f900 	bl	8001a50 <delay_ms>
        I2C_SCL_SET;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <I2C_Read_Byte+0x88>)
 8001852:	2240      	movs	r2, #64	; 0x40
 8001854:	611a      	str	r2, [r3, #16]
        delay_ms(2);
 8001856:	2002      	movs	r0, #2
 8001858:	f000 f8fa 	bl	8001a50 <delay_ms>
        rec <<= 1;
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	72fb      	strb	r3, [r7, #11]
        if (I2C_SDA_READ)
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <I2C_Read_Byte+0x88>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <I2C_Read_Byte+0x60>
        {
            rec++;
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	3301      	adds	r3, #1
 8001872:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < 8; i++)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b07      	cmp	r3, #7
 800187e:	dde1      	ble.n	8001844 <I2C_Read_Byte+0x30>
        }
    }
    if (!ack)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <I2C_Read_Byte+0x78>
    {
        I2C_SendACK();
 8001886:	f7ff ff75 	bl	8001774 <I2C_SendACK>
 800188a:	e001      	b.n	8001890 <I2C_Read_Byte+0x7c>
    }
    else
    {
        I2C_SendNACK();
 800188c:	f7ff ff9a 	bl	80017c4 <I2C_SendNACK>
    }
    return rec;
 8001890:	7afb      	ldrb	r3, [r7, #11]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40010c00 	.word	0x40010c00

080018a0 <I2C_Wait_Ack>:

uint8_t I2C_Wait_Ack(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
    static uint32_t i2c_error_count;
    uint32_t time = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
    I2C_SDA_IN();
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <I2C_Wait_Ack+0x88>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <I2C_Wait_Ack+0x88>)
 80018b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <I2C_Wait_Ack+0x88>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a1b      	ldr	r2, [pc, #108]	; (8001928 <I2C_Wait_Ack+0x88>)
 80018bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018c0:	6013      	str	r3, [r2, #0]
    I2C_SDA_SET;
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <I2C_Wait_Ack+0x88>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <I2C_Wait_Ack+0x88>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6113      	str	r3, [r2, #16]
    delay_ms(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 f8be 	bl	8001a50 <delay_ms>
    I2C_SCL_SET;
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <I2C_Wait_Ack+0x88>)
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	611a      	str	r2, [r3, #16]
    delay_ms(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 f8b8 	bl	8001a50 <delay_ms>
    while (I2C_SDA_READ)
 80018e0:	e013      	b.n	800190a <I2C_Wait_Ack+0x6a>
    {
        time++;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3301      	adds	r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
        if (time > 10000)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d90b      	bls.n	800190a <I2C_Wait_Ack+0x6a>
        {
            ++i2c_error_count;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <I2C_Wait_Ack+0x8c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	3301      	adds	r3, #1
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <I2C_Wait_Ack+0x8c>)
 80018fa:	6013      	str	r3, [r2, #0]
            printf("I2C Bus Timout\r\n");
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <I2C_Wait_Ack+0x90>)
 80018fe:	f003 fb43 	bl	8004f88 <puts>
            I2C_Stop();
 8001902:	f7ff fec5 	bl	8001690 <I2C_Stop>
            return 0; /* Return 0 to avoid application halt */
 8001906:	2300      	movs	r3, #0
 8001908:	e009      	b.n	800191e <I2C_Wait_Ack+0x7e>
    while (I2C_SDA_READ)
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <I2C_Wait_Ack+0x88>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1e5      	bne.n	80018e2 <I2C_Wait_Ack+0x42>
        }
    }
    I2C_SCL_RESET;
 8001916:	4b04      	ldr	r3, [pc, #16]	; (8001928 <I2C_Wait_Ack+0x88>)
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	615a      	str	r2, [r3, #20]
    return 0;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40010c00 	.word	0x40010c00
 800192c:	20000298 	.word	0x20000298
 8001930:	08007264 	.word	0x08007264

08001934 <I2C_Write>:
    I2C_Stop();
    delay_ms(2);
}

uint8_t I2C_Write(uint8_t addr, uint8_t reg, uint8_t data)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	460b      	mov	r3, r1
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	4613      	mov	r3, r2
 8001944:	717b      	strb	r3, [r7, #5]
    I2C_Start();
 8001946:	f7ff fe79 	bl	800163c <I2C_Start>

    I2C_Send_Byte(addr | 0);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fec9 	bl	80016e4 <I2C_Send_Byte>
    if (I2C_Wait_Ack())
 8001952:	f7ff ffa5 	bl	80018a0 <I2C_Wait_Ack>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <I2C_Write+0x30>
    {
        I2C_Stop();
 800195c:	f7ff fe98 	bl	8001690 <I2C_Stop>
        return 1;
 8001960:	2301      	movs	r3, #1
 8001962:	e01f      	b.n	80019a4 <I2C_Write+0x70>
    }
    I2C_Send_Byte(reg);
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff febc 	bl	80016e4 <I2C_Send_Byte>
    if (I2C_Wait_Ack())
 800196c:	f7ff ff98 	bl	80018a0 <I2C_Wait_Ack>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <I2C_Write+0x4a>
    {
        I2C_Stop();
 8001976:	f7ff fe8b 	bl	8001690 <I2C_Stop>
        return 1;
 800197a:	2301      	movs	r3, #1
 800197c:	e012      	b.n	80019a4 <I2C_Write+0x70>
    }
    I2C_Send_Byte(data);
 800197e:	797b      	ldrb	r3, [r7, #5]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff feaf 	bl	80016e4 <I2C_Send_Byte>
    if (I2C_Wait_Ack())
 8001986:	f7ff ff8b 	bl	80018a0 <I2C_Wait_Ack>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <I2C_Write+0x64>
    {
        I2C_Stop();
 8001990:	f7ff fe7e 	bl	8001690 <I2C_Stop>
        return 1;
 8001994:	2301      	movs	r3, #1
 8001996:	e005      	b.n	80019a4 <I2C_Write+0x70>
    }

    I2C_Stop();
 8001998:	f7ff fe7a 	bl	8001690 <I2C_Stop>
    delay_ms(2);
 800199c:	2002      	movs	r0, #2
 800199e:	f000 f857 	bl	8001a50 <delay_ms>
    return 0;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <I2C_ReadMulti>:
    delay_ms(2);
    return reg;
}

uint8_t I2C_ReadMulti(uint8_t addr, uint8_t reg, uint8_t len, uint8_t *buf)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	460b      	mov	r3, r1
 80019ba:	71bb      	strb	r3, [r7, #6]
 80019bc:	4613      	mov	r3, r2
 80019be:	717b      	strb	r3, [r7, #5]
    I2C_Start();
 80019c0:	f7ff fe3c 	bl	800163c <I2C_Start>
    I2C_Send_Byte(addr | 0);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fe8c 	bl	80016e4 <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 80019cc:	bf00      	nop
 80019ce:	f7ff ff67 	bl	80018a0 <I2C_Wait_Ack>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1fa      	bne.n	80019ce <I2C_ReadMulti+0x22>
        ;
    I2C_Send_Byte(reg);
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fe82 	bl	80016e4 <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 80019e0:	bf00      	nop
 80019e2:	f7ff ff5d 	bl	80018a0 <I2C_Wait_Ack>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1fa      	bne.n	80019e2 <I2C_ReadMulti+0x36>
        ;

    I2C_Start();
 80019ec:	f7ff fe26 	bl	800163c <I2C_Start>
    I2C_Send_Byte(addr | 1);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fe73 	bl	80016e4 <I2C_Send_Byte>
    while (I2C_Wait_Ack())
 80019fe:	bf00      	nop
 8001a00:	f7ff ff4e 	bl	80018a0 <I2C_Wait_Ack>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1fa      	bne.n	8001a00 <I2C_ReadMulti+0x54>
        ;

    while (len)
 8001a0a:	e017      	b.n	8001a3c <I2C_ReadMulti+0x90>
    {
        if (len == 1)
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <I2C_ReadMulti+0x76>
            *buf = I2C_Read_Byte(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7ff fefe 	bl	8001814 <I2C_Read_Byte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	e006      	b.n	8001a30 <I2C_ReadMulti+0x84>
        else
            *buf = I2C_Read_Byte(0);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fef6 	bl	8001814 <I2C_Read_Byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	701a      	strb	r2, [r3, #0]
        len--;
 8001a30:	797b      	ldrb	r3, [r7, #5]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	717b      	strb	r3, [r7, #5]
        buf++;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	603b      	str	r3, [r7, #0]
    while (len)
 8001a3c:	797b      	ldrb	r3, [r7, #5]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1e4      	bne.n	8001a0c <I2C_ReadMulti+0x60>
    }

    I2C_Stop();
 8001a42:	f7ff fe25 	bl	8001690 <I2C_Stop>
    return 0;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <delay_ms>:
    I2C_Stop();
    return 0;
}

static void delay_ms(uint32_t ms)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    volatile uint32_t delay = 10000 * ms;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	60fb      	str	r3, [r7, #12]
    while (delay--)
 8001a64:	e003      	b.n	8001a6e <delay_ms+0x1e>
    {
        __NOP();
 8001a66:	bf00      	nop
        __NOP();
 8001a68:	bf00      	nop
        __NOP();
 8001a6a:	bf00      	nop
        __NOP();
 8001a6c:	bf00      	nop
    while (delay--)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1e5a      	subs	r2, r3, #1
 8001a72:	60fa      	str	r2, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f6      	bne.n	8001a66 <delay_ms+0x16>
    }
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <SHT31_SendCommand>:
 * 
 * @param command 
 * @return SHT31_Status 
 */
SHT31_Status SHT31_SendCommand(SHT31_Command command)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	80fb      	strh	r3, [r7, #6]
    uint8_t msb_cmd, lsb_cmd, i2c_status;
    msb_cmd = (uint8_t)(command >> 8);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	73fb      	strb	r3, [r7, #15]
    lsb_cmd = (uint8_t)(command & 0xFF);
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	73bb      	strb	r3, [r7, #14]
    i2c_status = I2C_Write(SHT31_I2C_ADDRESS_A, msb_cmd, lsb_cmd);
 8001a98:	7bba      	ldrb	r2, [r7, #14]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	2088      	movs	r0, #136	; 0x88
 8001aa0:	f7ff ff48 	bl	8001934 <I2C_Write>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	737b      	strb	r3, [r7, #13]
    if (i2c_status == 0)
 8001aa8:	7b7b      	ldrb	r3, [r7, #13]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <SHT31_SendCommand+0x30>
    {
        return SHT31_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <SHT31_SendCommand+0x32>
    }
    else
    {
        return SHT31_FAILED;
 8001ab2:	2301      	movs	r3, #1
    }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SHT31_ReadData>:
 * 
 * @param sht31_data_struct 
 * @return SHT31_Status 
 */
SHT31_Status SHT31_ReadData(SHT31_TypeDef_t *sht31_data_struct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
    uint8_t i2c_status;
    i2c_status = I2C_ReadMulti(SHT31_I2C_ADDRESS_A, 0x00, SHT31_DATA_LENGTH, sht31_data_struct->raw_data_buffer);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2206      	movs	r2, #6
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2088      	movs	r0, #136	; 0x88
 8001acc:	f7ff ff6e 	bl	80019ac <I2C_ReadMulti>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
    if (i2c_status == 0)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <SHT31_ReadData+0x22>
    {
        return SHT31_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e000      	b.n	8001ae0 <SHT31_ReadData+0x24>
    }
    else
    {
        return SHT31_FAILED;
 8001ade:	2301      	movs	r3, #1
    }
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <SHT31_calculateTemp>:
 * @brief Calculate Temperature to Celcius based on raw data
 * 
 * @param sht31_data_struct 
 */
void SHT31_calculateTemp(SHT31_TypeDef_t *sht31_data_struct)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    uint16_t raw_temp = (uint16_t)(sht31_data_struct->raw_data_buffer[0] << 8 | sht31_data_struct->raw_data_buffer[1]);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	785b      	ldrb	r3, [r3, #1]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	81fb      	strh	r3, [r7, #14]
    sht31_data_struct->Temperature = (-45 + 175 * (raw_temp / 65535.0));
 8001b04:	89fb      	ldrh	r3, [r7, #14]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fc86 	bl	8000418 <__aeabi_i2d>
 8001b0c:	a312      	add	r3, pc, #72	; (adr r3, 8001b58 <SHT31_calculateTemp+0x70>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fe15 	bl	8000740 <__aeabi_ddiv>
 8001b16:	4603      	mov	r3, r0
 8001b18:	460c      	mov	r4, r1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <SHT31_calculateTemp+0x78>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fce2 	bl	80004ec <__aeabi_dmul>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	460c      	mov	r4, r1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4621      	mov	r1, r4
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <SHT31_calculateTemp+0x80>)
 8001b36:	f7fe fb21 	bl	800017c <__aeabi_dsub>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460c      	mov	r4, r1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4621      	mov	r1, r4
 8001b42:	f7fe ffab 	bl	8000a9c <__aeabi_d2f>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd90      	pop	{r4, r7, pc}
 8001b54:	f3af 8000 	nop.w
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40efffe0 	.word	0x40efffe0
 8001b60:	00000000 	.word	0x00000000
 8001b64:	4065e000 	.word	0x4065e000
 8001b68:	40468000 	.word	0x40468000
 8001b6c:	00000000 	.word	0x00000000

08001b70 <SHT31_calculateHumid>:
 * @brief Calculate Humidity to Celcius based on raw data
 * 
 * @param sht31_data_struct 
 */
void SHT31_calculateHumid(SHT31_TypeDef_t *sht31_data_struct)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    uint16_t raw_humid = (uint16_t)(sht31_data_struct->raw_data_buffer[3] << 8 | sht31_data_struct->raw_data_buffer[4]);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	78db      	ldrb	r3, [r3, #3]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	791b      	ldrb	r3, [r3, #4]
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	81fb      	strh	r3, [r7, #14]
    sht31_data_struct->Humidity = (100 * (raw_humid / 65535.0));
 8001b8c:	89fb      	ldrh	r3, [r7, #14]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fc42 	bl	8000418 <__aeabi_i2d>
 8001b94:	a30e      	add	r3, pc, #56	; (adr r3, 8001bd0 <SHT31_calculateHumid+0x60>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fdd1 	bl	8000740 <__aeabi_ddiv>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <SHT31_calculateHumid+0x68>)
 8001bac:	f7fe fc9e 	bl	80004ec <__aeabi_dmul>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	460c      	mov	r4, r1
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	f7fe ff70 	bl	8000a9c <__aeabi_d2f>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]
}
 8001bc2:	bf00      	nop
 8001bc4:	3714      	adds	r7, #20
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40efffe0 	.word	0x40efffe0
 8001bd8:	40590000 	.word	0x40590000

08001bdc <SHT31_CRCCheck>:
 * @brief Check CRC validity
 * 
 * @param sht31_data_struct 
 */
void SHT31_CRCCheck(SHT31_TypeDef_t *sht31_data_struct)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    uint8_t bit;
    uint8_t crc = 0xFF; // calculated checksum
 8001be4:	23ff      	movs	r3, #255	; 0xff
 8001be6:	73bb      	strb	r3, [r7, #14]
    uint8_t byteCtr;    // byte counter
    uint8_t *raw_data_buffer = sht31_data_struct->raw_data_buffer;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	60bb      	str	r3, [r7, #8]

    // calculates 8-Bit checksum with given polynomial
    for (byteCtr = 0; byteCtr < 2; byteCtr++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	737b      	strb	r3, [r7, #13]
 8001bf0:	e021      	b.n	8001c36 <SHT31_CRCCheck+0x5a>
    {
        crc ^= (raw_data_buffer[byteCtr]);
 8001bf2:	7b7b      	ldrb	r3, [r7, #13]
 8001bf4:	68ba      	ldr	r2, [r7, #8]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	4053      	eors	r3, r2
 8001bfe:	73bb      	strb	r3, [r7, #14]
        for (bit = 8; bit > 0; --bit)
 8001c00:	2308      	movs	r3, #8
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e011      	b.n	8001c2a <SHT31_CRCCheck+0x4e>
        {
            if (crc & 0x80)
 8001c06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da07      	bge.n	8001c1e <SHT31_CRCCheck+0x42>
            {
                crc = (crc << 1) ^ CRC_POLYNOMIAL;
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	b25b      	sxtb	r3, r3
 8001c14:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	73bb      	strb	r3, [r7, #14]
 8001c1c:	e002      	b.n	8001c24 <SHT31_CRCCheck+0x48>
            }
            else
            {
                crc = (crc << 1);
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	73bb      	strb	r3, [r7, #14]
        for (bit = 8; bit > 0; --bit)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ea      	bne.n	8001c06 <SHT31_CRCCheck+0x2a>
    for (byteCtr = 0; byteCtr < 2; byteCtr++)
 8001c30:	7b7b      	ldrb	r3, [r7, #13]
 8001c32:	3301      	adds	r3, #1
 8001c34:	737b      	strb	r3, [r7, #13]
 8001c36:	7b7b      	ldrb	r3, [r7, #13]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d9da      	bls.n	8001bf2 <SHT31_CRCCheck+0x16>
            }
        }
    }

    if (crc != *(raw_data_buffer + 2))
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	7bba      	ldrb	r2, [r7, #14]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d005      	beq.n	8001c54 <SHT31_CRCCheck+0x78>
    {
        sht31_data_struct->crc_flag = 0;
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	7c93      	ldrb	r3, [r2, #18]
 8001c4c:	f36f 0300 	bfc	r3, #0, #1
 8001c50:	7493      	strb	r3, [r2, #18]
    }
    else
    {
        sht31_data_struct->crc_flag = 1;
    }
    return;
 8001c52:	e005      	b.n	8001c60 <SHT31_CRCCheck+0x84>
        sht31_data_struct->crc_flag = 1;
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	7c93      	ldrb	r3, [r2, #18]
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	7493      	strb	r3, [r2, #18]
    return;
 8001c5e:	bf00      	nop
}
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <RetargetInit+0x28>)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <RetargetInit+0x2c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6898      	ldr	r0, [r3, #8]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2202      	movs	r2, #2
 8001c80:	2100      	movs	r1, #0
 8001c82:	f003 f999 	bl	8004fb8 <setvbuf>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200003bc 	.word	0x200003bc
 8001c94:	20000018 	.word	0x20000018

08001c98 <_isatty>:

int _isatty(int fd) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db04      	blt.n	8001cb0 <_isatty+0x18>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	dc01      	bgt.n	8001cb0 <_isatty+0x18>
    return 1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e005      	b.n	8001cbc <_isatty+0x24>

  errno = EBADF;
 8001cb0:	f002 fc0c 	bl	80044cc <__errno>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	2309      	movs	r3, #9
 8001cb8:	6013      	str	r3, [r2, #0]
  return 0;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_write>:

int _write(int fd, char* ptr, int len) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d002      	beq.n	8001cdc <_write+0x18>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d111      	bne.n	8001d00 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <_write+0x54>)
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	f001 ff0a 	bl	8003b02 <HAL_UART_Transmit>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <_write+0x38>
      return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	e008      	b.n	8001d0e <_write+0x4a>
    else
      return EIO;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	e006      	b.n	8001d0e <_write+0x4a>
  }
  errno = EBADF;
 8001d00:	f002 fbe4 	bl	80044cc <__errno>
 8001d04:	4602      	mov	r2, r0
 8001d06:	2309      	movs	r3, #9
 8001d08:	6013      	str	r3, [r2, #0]
  return -1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200003bc 	.word	0x200003bc

08001d1c <_close>:

int _close(int fd) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db04      	blt.n	8001d34 <_close+0x18>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	dc01      	bgt.n	8001d34 <_close+0x18>
    return 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e006      	b.n	8001d42 <_close+0x26>

  errno = EBADF;
 8001d34:	f002 fbca 	bl	80044cc <__errno>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	6013      	str	r3, [r2, #0]
  return -1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001d56:	f002 fbb9 	bl	80044cc <__errno>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	6013      	str	r3, [r2, #0]
  return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_read>:

int _read(int fd, char* ptr, int len) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d110      	bne.n	8001da0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <_read+0x4c>)
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	2201      	movs	r2, #1
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	f001 ff53 	bl	8003c34 <HAL_UART_Receive>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <_read+0x30>
      return 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e008      	b.n	8001dae <_read+0x42>
    else
      return EIO;
 8001d9c:	2305      	movs	r3, #5
 8001d9e:	e006      	b.n	8001dae <_read+0x42>
  }
  errno = EBADF;
 8001da0:	f002 fb94 	bl	80044cc <__errno>
 8001da4:	4602      	mov	r2, r0
 8001da6:	2309      	movs	r3, #9
 8001da8:	6013      	str	r3, [r2, #0]
  return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200003bc 	.word	0x200003bc

08001dbc <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db08      	blt.n	8001dde <_fstat+0x22>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	dc05      	bgt.n	8001dde <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd8:	605a      	str	r2, [r3, #4]
    return 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e005      	b.n	8001dea <_fstat+0x2e>
  }

  errno = EBADF;
 8001dde:	f002 fb75 	bl	80044cc <__errno>
 8001de2:	4602      	mov	r2, r0
 8001de4:	2309      	movs	r3, #9
 8001de6:	6013      	str	r3, [r2, #0]
  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_MspInit+0x5c>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <HAL_MspInit+0x5c>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6193      	str	r3, [r2, #24]
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_MspInit+0x5c>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_MspInit+0x5c>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <HAL_MspInit+0x5c>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	61d3      	str	r3, [r2, #28]
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_MspInit+0x5c>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <HAL_MspInit+0x60>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <HAL_MspInit+0x60>)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000

08001e58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_CAN_MspInit+0x8c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d131      	bne.n	8001edc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_CAN_MspInit+0x90>)
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_CAN_MspInit+0x90>)
 8001e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e82:	61d3      	str	r3, [r2, #28]
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_CAN_MspInit+0x90>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_CAN_MspInit+0x90>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_CAN_MspInit+0x90>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_CAN_MspInit+0x90>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480b      	ldr	r0, [pc, #44]	; (8001eec <HAL_CAN_MspInit+0x94>)
 8001ebe:	f000 fc5b 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_CAN_MspInit+0x94>)
 8001ed8:	f000 fc4e 	bl	8002778 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40006400 	.word	0x40006400
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010800 	.word	0x40010800

08001ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0d      	ldr	r2, [pc, #52]	; (8001f34 <HAL_TIM_Base_MspInit+0x44>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d113      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_TIM_Base_MspInit+0x48>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_TIM_Base_MspInit+0x48>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	61d3      	str	r3, [r2, #28]
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_TIM_Base_MspInit+0x48>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	201d      	movs	r0, #29
 8001f20:	f000 fb89 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f24:	201d      	movs	r0, #29
 8001f26:	f000 fba2 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_UART_MspInit+0x98>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d137      	bne.n	8001fcc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f5c:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_UART_MspInit+0x9c>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <HAL_UART_MspInit+0x9c>)
 8001f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f66:	61d3      	str	r3, [r2, #28]
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_UART_MspInit+0x9c>)
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_UART_MspInit+0x9c>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_UART_MspInit+0x9c>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_UART_MspInit+0x9c>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480f      	ldr	r0, [pc, #60]	; (8001fdc <HAL_UART_MspInit+0xa0>)
 8001fa0:	f000 fbea 	bl	8002778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4809      	ldr	r0, [pc, #36]	; (8001fdc <HAL_UART_MspInit+0xa0>)
 8001fb8:	f000 fbde 	bl	8002778 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	2026      	movs	r0, #38	; 0x26
 8001fc2:	f000 fb38 	bl	8002636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc6:	2026      	movs	r0, #38	; 0x26
 8001fc8:	f000 fb51 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010800 	.word	0x40010800

08001fe0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	201e      	movs	r0, #30
 8001ff6:	f000 fb1e 	bl	8002636 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ffa:	201e      	movs	r0, #30
 8001ffc:	f000 fb37 	bl	800266e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <HAL_InitTick+0xa0>)
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_InitTick+0xa0>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	61d3      	str	r3, [r2, #28]
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_InitTick+0xa0>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002018:	f107 0210 	add.w	r2, r7, #16
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f001 f952 	bl	80032cc <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002028:	f001 f928 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 800202c:	4603      	mov	r3, r0
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	4a13      	ldr	r2, [pc, #76]	; (8002084 <HAL_InitTick+0xa4>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9b      	lsrs	r3, r3, #18
 800203c:	3b01      	subs	r3, #1
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_InitTick+0xa8>)
 8002042:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_InitTick+0xac>)
 8002044:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_InitTick+0xa8>)
 8002048:	f240 32e7 	movw	r2, #999	; 0x3e7
 800204c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_InitTick+0xa8>)
 8002050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002052:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_InitTick+0xa8>)
 8002056:	2200      	movs	r2, #0
 8002058:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_InitTick+0xa8>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002060:	4809      	ldr	r0, [pc, #36]	; (8002088 <HAL_InitTick+0xa8>)
 8002062:	f001 f981 	bl	8003368 <HAL_TIM_Base_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d104      	bne.n	8002076 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800206c:	4806      	ldr	r0, [pc, #24]	; (8002088 <HAL_InitTick+0xa8>)
 800206e:	f001 f9a6 	bl	80033be <HAL_TIM_Base_Start_IT>
 8002072:	4603      	mov	r3, r0
 8002074:	e000      	b.n	8002078 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	3730      	adds	r7, #48	; 0x30
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	431bde83 	.word	0x431bde83
 8002088:	200003c0 	.word	0x200003c0
 800208c:	40000800 	.word	0x40000800

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <HardFault_Handler+0x4>

080020a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a6:	e7fe      	b.n	80020a6 <MemManage_Handler+0x4>

080020a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <BusFault_Handler+0x4>

080020ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <UsageFault_Handler+0x4>

080020b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020e8:	2040      	movs	r0, #64	; 0x40
 80020ea:	f000 fccf 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020ee:	2080      	movs	r0, #128	; 0x80
 80020f0:	f000 fccc 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80020f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020f8:	f000 fcc8 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM3_IRQHandler+0x10>)
 8002106:	f001 f97d 	bl	8003404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000033c 	.word	0x2000033c

08002114 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <TIM4_IRQHandler+0x10>)
 800211a:	f001 f973 	bl	8003404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200003c0 	.word	0x200003c0

08002128 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <USART2_IRQHandler+0x10>)
 800212e:	f001 fe7b 	bl	8003e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000037c 	.word	0x2000037c

0800213c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002144:	4a14      	ldr	r2, [pc, #80]	; (8002198 <_sbrk+0x5c>)
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <_sbrk+0x60>)
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <_sbrk+0x64>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <_sbrk+0x64>)
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_sbrk+0x68>)
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	429a      	cmp	r2, r3
 800216a:	d207      	bcs.n	800217c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800216c:	f002 f9ae 	bl	80044cc <__errno>
 8002170:	4602      	mov	r2, r0
 8002172:	230c      	movs	r3, #12
 8002174:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	e009      	b.n	8002190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <_sbrk+0x64>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <_sbrk+0x64>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4413      	add	r3, r2
 800218a:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_sbrk+0x64>)
 800218c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20005000 	.word	0x20005000
 800219c:	00000400 	.word	0x00000400
 80021a0:	2000029c 	.word	0x2000029c
 80021a4:	20000408 	.word	0x20000408

080021a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <SystemInit+0x5c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a14      	ldr	r2, [pc, #80]	; (8002204 <SystemInit+0x5c>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <SystemInit+0x5c>)
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	4911      	ldr	r1, [pc, #68]	; (8002204 <SystemInit+0x5c>)
 80021be:	4b12      	ldr	r3, [pc, #72]	; (8002208 <SystemInit+0x60>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <SystemInit+0x5c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <SystemInit+0x5c>)
 80021ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <SystemInit+0x5c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SystemInit+0x5c>)
 80021da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <SystemInit+0x5c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <SystemInit+0x5c>)
 80021e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80021ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SystemInit+0x5c>)
 80021ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80021f2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SystemInit+0x64>)
 80021f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021fa:	609a      	str	r2, [r3, #8]
#endif 
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	40021000 	.word	0x40021000
 8002208:	f8ff0000 	.word	0xf8ff0000
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002210:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002212:	e003      	b.n	800221c <LoopCopyDataInit>

08002214 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002216:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002218:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800221a:	3104      	adds	r1, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800221c:	480a      	ldr	r0, [pc, #40]	; (8002248 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002220:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002222:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002224:	d3f6      	bcc.n	8002214 <CopyDataInit>
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002228:	e002      	b.n	8002230 <LoopFillZerobss>

0800222a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800222c:	f842 3b04 	str.w	r3, [r2], #4

08002230 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002232:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002234:	d3f9      	bcc.n	800222a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002236:	f7ff ffb7 	bl	80021a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223a:	f002 f94d 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800223e:	f7fe fc7d 	bl	8000b3c <main>
  bx lr
 8002242:	4770      	bx	lr
  ldr r3, =_sidata
 8002244:	08007568 	.word	0x08007568
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800224c:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8002250:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8002254:	20000408 	.word	0x20000408

08002258 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC1_2_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_Init+0x28>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_Init+0x28>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 f9d7 	bl	8002620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f7ff feb4 	bl	8001fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fdbc 	bl	8001df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40022000 	.word	0x40022000

08002288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_IncTick+0x1c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_IncTick+0x20>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4413      	add	r3, r2
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <HAL_IncTick+0x20>)
 800229a:	6013      	str	r3, [r2, #0]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr
 80022a4:	20000014 	.word	0x20000014
 80022a8:	20000400 	.word	0x20000400

080022ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return uwTick;
 80022b0:	4b02      	ldr	r3, [pc, #8]	; (80022bc <HAL_GetTick+0x10>)
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	20000400 	.word	0x20000400

080022c0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <HAL_GetTickFreq+0x10>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000014 	.word	0x20000014

080022d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0ed      	b.n	80024c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fdb0 	bl	8001e58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0202 	bic.w	r2, r2, #2
 8002306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002308:	f7ff ffd0 	bl	80022ac <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800230e:	e012      	b.n	8002336 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002310:	f7ff ffcc 	bl	80022ac <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b0a      	cmp	r3, #10
 800231c:	d90b      	bls.n	8002336 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2205      	movs	r2, #5
 800232e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0c5      	b.n	80024c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002354:	f7ff ffaa 	bl	80022ac <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800235a:	e012      	b.n	8002382 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800235c:	f7ff ffa6 	bl	80022ac <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b0a      	cmp	r3, #10
 8002368:	d90b      	bls.n	8002382 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2205      	movs	r2, #5
 800237a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e09f      	b.n	80024c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0e5      	beq.n	800235c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7e1b      	ldrb	r3, [r3, #24]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e007      	b.n	80023ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	7e5b      	ldrb	r3, [r3, #25]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	e007      	b.n	80023e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e9b      	ldrb	r3, [r3, #26]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d108      	bne.n	80023fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0220 	orr.w	r2, r2, #32
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e007      	b.n	800240e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0220 	bic.w	r2, r2, #32
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7edb      	ldrb	r3, [r3, #27]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0210 	bic.w	r2, r2, #16
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	e007      	b.n	8002438 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0210 	orr.w	r2, r2, #16
 8002436:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7f1b      	ldrb	r3, [r3, #28]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0208 	orr.w	r2, r2, #8
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e007      	b.n	8002462 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0208 	bic.w	r2, r2, #8
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7f5b      	ldrb	r3, [r3, #29]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0204 	orr.w	r2, r2, #4
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	e007      	b.n	800248c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0204 	bic.w	r2, r2, #4
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	ea42 0103 	orr.w	r1, r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <__NVIC_SetPriorityGrouping>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e8:	4013      	ands	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fe:	4a04      	ldr	r2, [pc, #16]	; (8002510 <__NVIC_SetPriorityGrouping+0x44>)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_GetPriorityGrouping>:
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <__NVIC_GetPriorityGrouping+0x18>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	0a1b      	lsrs	r3, r3, #8
 800251e:	f003 0307 	and.w	r3, r3, #7
}
 8002522:	4618      	mov	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <__NVIC_EnableIRQ>:
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253e:	2b00      	cmp	r3, #0
 8002540:	db0b      	blt.n	800255a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f003 021f 	and.w	r2, r3, #31
 8002548:	4906      	ldr	r1, [pc, #24]	; (8002564 <__NVIC_EnableIRQ+0x34>)
 800254a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	2001      	movs	r0, #1
 8002552:	fa00 f202 	lsl.w	r2, r0, r2
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ff4f 	bl	80024cc <__NVIC_SetPriorityGrouping>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4603      	mov	r3, r0
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002648:	f7ff ff64 	bl	8002514 <__NVIC_GetPriorityGrouping>
 800264c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	f7ff ffb2 	bl	80025bc <NVIC_EncodePriority>
 8002658:	4602      	mov	r2, r0
 800265a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff ff81 	bl	8002568 <__NVIC_SetPriority>
}
 8002666:	bf00      	nop
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	4603      	mov	r3, r0
 8002676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff57 	bl	8002530 <__NVIC_EnableIRQ>
}
 8002682:	bf00      	nop
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d005      	beq.n	80026ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2204      	movs	r2, #4
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
 80026ac:	e051      	b.n	8002752 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 020e 	bic.w	r2, r2, #14
 80026bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_DMA_Abort_IT+0xd0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d029      	beq.n	800272c <HAL_DMA_Abort_IT+0xa0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a20      	ldr	r2, [pc, #128]	; (8002760 <HAL_DMA_Abort_IT+0xd4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d022      	beq.n	8002728 <HAL_DMA_Abort_IT+0x9c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <HAL_DMA_Abort_IT+0xd8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d01a      	beq.n	8002722 <HAL_DMA_Abort_IT+0x96>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_DMA_Abort_IT+0xdc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d012      	beq.n	800271c <HAL_DMA_Abort_IT+0x90>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_DMA_Abort_IT+0xe0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00a      	beq.n	8002716 <HAL_DMA_Abort_IT+0x8a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_DMA_Abort_IT+0xe4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d102      	bne.n	8002710 <HAL_DMA_Abort_IT+0x84>
 800270a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800270e:	e00e      	b.n	800272e <HAL_DMA_Abort_IT+0xa2>
 8002710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002714:	e00b      	b.n	800272e <HAL_DMA_Abort_IT+0xa2>
 8002716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800271a:	e008      	b.n	800272e <HAL_DMA_Abort_IT+0xa2>
 800271c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002720:	e005      	b.n	800272e <HAL_DMA_Abort_IT+0xa2>
 8002722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002726:	e002      	b.n	800272e <HAL_DMA_Abort_IT+0xa2>
 8002728:	2310      	movs	r3, #16
 800272a:	e000      	b.n	800272e <HAL_DMA_Abort_IT+0xa2>
 800272c:	2301      	movs	r3, #1
 800272e:	4a11      	ldr	r2, [pc, #68]	; (8002774 <HAL_DMA_Abort_IT+0xe8>)
 8002730:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
    } 
  }
  return status;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40020008 	.word	0x40020008
 8002760:	4002001c 	.word	0x4002001c
 8002764:	40020030 	.word	0x40020030
 8002768:	40020044 	.word	0x40020044
 800276c:	40020058 	.word	0x40020058
 8002770:	4002006c 	.word	0x4002006c
 8002774:	40020000 	.word	0x40020000

08002778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002778:	b480      	push	{r7}
 800277a:	b08b      	sub	sp, #44	; 0x2c
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002786:	2300      	movs	r3, #0
 8002788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278a:	e127      	b.n	80029dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800278c:	2201      	movs	r2, #1
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 8116 	bne.w	80029d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b12      	cmp	r3, #18
 80027b0:	d034      	beq.n	800281c <HAL_GPIO_Init+0xa4>
 80027b2:	2b12      	cmp	r3, #18
 80027b4:	d80d      	bhi.n	80027d2 <HAL_GPIO_Init+0x5a>
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d02b      	beq.n	8002812 <HAL_GPIO_Init+0x9a>
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d804      	bhi.n	80027c8 <HAL_GPIO_Init+0x50>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d031      	beq.n	8002826 <HAL_GPIO_Init+0xae>
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d01c      	beq.n	8002800 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027c6:	e048      	b.n	800285a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	d043      	beq.n	8002854 <HAL_GPIO_Init+0xdc>
 80027cc:	2b11      	cmp	r3, #17
 80027ce:	d01b      	beq.n	8002808 <HAL_GPIO_Init+0x90>
          break;
 80027d0:	e043      	b.n	800285a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027d2:	4a89      	ldr	r2, [pc, #548]	; (80029f8 <HAL_GPIO_Init+0x280>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d026      	beq.n	8002826 <HAL_GPIO_Init+0xae>
 80027d8:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <HAL_GPIO_Init+0x280>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d806      	bhi.n	80027ec <HAL_GPIO_Init+0x74>
 80027de:	4a87      	ldr	r2, [pc, #540]	; (80029fc <HAL_GPIO_Init+0x284>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d020      	beq.n	8002826 <HAL_GPIO_Init+0xae>
 80027e4:	4a86      	ldr	r2, [pc, #536]	; (8002a00 <HAL_GPIO_Init+0x288>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_GPIO_Init+0xae>
          break;
 80027ea:	e036      	b.n	800285a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80027ec:	4a85      	ldr	r2, [pc, #532]	; (8002a04 <HAL_GPIO_Init+0x28c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d019      	beq.n	8002826 <HAL_GPIO_Init+0xae>
 80027f2:	4a85      	ldr	r2, [pc, #532]	; (8002a08 <HAL_GPIO_Init+0x290>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d016      	beq.n	8002826 <HAL_GPIO_Init+0xae>
 80027f8:	4a84      	ldr	r2, [pc, #528]	; (8002a0c <HAL_GPIO_Init+0x294>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0xae>
          break;
 80027fe:	e02c      	b.n	800285a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	623b      	str	r3, [r7, #32]
          break;
 8002806:	e028      	b.n	800285a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e023      	b.n	800285a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	3308      	adds	r3, #8
 8002818:	623b      	str	r3, [r7, #32]
          break;
 800281a:	e01e      	b.n	800285a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	330c      	adds	r3, #12
 8002822:	623b      	str	r3, [r7, #32]
          break;
 8002824:	e019      	b.n	800285a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282e:	2304      	movs	r3, #4
 8002830:	623b      	str	r3, [r7, #32]
          break;
 8002832:	e012      	b.n	800285a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800283c:	2308      	movs	r3, #8
 800283e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	611a      	str	r2, [r3, #16]
          break;
 8002846:	e008      	b.n	800285a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002848:	2308      	movs	r3, #8
 800284a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	615a      	str	r2, [r3, #20]
          break;
 8002852:	e002      	b.n	800285a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
          break;
 8002858:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2bff      	cmp	r3, #255	; 0xff
 800285e:	d801      	bhi.n	8002864 <HAL_GPIO_Init+0xec>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	e001      	b.n	8002868 <HAL_GPIO_Init+0xf0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2bff      	cmp	r3, #255	; 0xff
 800286e:	d802      	bhi.n	8002876 <HAL_GPIO_Init+0xfe>
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	e002      	b.n	800287c <HAL_GPIO_Init+0x104>
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	3b08      	subs	r3, #8
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	210f      	movs	r1, #15
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	401a      	ands	r2, r3
 800288e:	6a39      	ldr	r1, [r7, #32]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	431a      	orrs	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8096 	beq.w	80029d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028aa:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_GPIO_Init+0x298>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_GPIO_Init+0x298>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6193      	str	r3, [r2, #24]
 80028b6:	4b56      	ldr	r3, [pc, #344]	; (8002a10 <HAL_GPIO_Init+0x298>)
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c2:	4a54      	ldr	r2, [pc, #336]	; (8002a14 <HAL_GPIO_Init+0x29c>)
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4013      	ands	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <HAL_GPIO_Init+0x2a0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d013      	beq.n	8002916 <HAL_GPIO_Init+0x19e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4a      	ldr	r2, [pc, #296]	; (8002a1c <HAL_GPIO_Init+0x2a4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00d      	beq.n	8002912 <HAL_GPIO_Init+0x19a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a49      	ldr	r2, [pc, #292]	; (8002a20 <HAL_GPIO_Init+0x2a8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <HAL_GPIO_Init+0x196>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a48      	ldr	r2, [pc, #288]	; (8002a24 <HAL_GPIO_Init+0x2ac>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d101      	bne.n	800290a <HAL_GPIO_Init+0x192>
 8002906:	2303      	movs	r3, #3
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x1a0>
 800290a:	2304      	movs	r3, #4
 800290c:	e004      	b.n	8002918 <HAL_GPIO_Init+0x1a0>
 800290e:	2302      	movs	r3, #2
 8002910:	e002      	b.n	8002918 <HAL_GPIO_Init+0x1a0>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x1a0>
 8002916:	2300      	movs	r3, #0
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	f002 0203 	and.w	r2, r2, #3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4093      	lsls	r3, r2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002928:	493a      	ldr	r1, [pc, #232]	; (8002a14 <HAL_GPIO_Init+0x29c>)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	089b      	lsrs	r3, r3, #2
 800292e:	3302      	adds	r3, #2
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002942:	4b39      	ldr	r3, [pc, #228]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4938      	ldr	r1, [pc, #224]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
 800294e:	e006      	b.n	800295e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002950:	4b35      	ldr	r3, [pc, #212]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	43db      	mvns	r3, r3
 8002958:	4933      	ldr	r1, [pc, #204]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 800295a:	4013      	ands	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	492e      	ldr	r1, [pc, #184]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
 8002976:	e006      	b.n	8002986 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	43db      	mvns	r3, r3
 8002980:	4929      	ldr	r1, [pc, #164]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 8002982:	4013      	ands	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002992:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
 800299e:	e006      	b.n	80029ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029a0:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	491f      	ldr	r1, [pc, #124]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d006      	beq.n	80029c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	491a      	ldr	r1, [pc, #104]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
 80029c6:	e006      	b.n	80029d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	4915      	ldr	r1, [pc, #84]	; (8002a28 <HAL_GPIO_Init+0x2b0>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	3301      	adds	r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f47f aed0 	bne.w	800278c <HAL_GPIO_Init+0x14>
  }
}
 80029ec:	bf00      	nop
 80029ee:	372c      	adds	r7, #44	; 0x2c
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	10210000 	.word	0x10210000
 80029fc:	10110000 	.word	0x10110000
 8002a00:	10120000 	.word	0x10120000
 8002a04:	10310000 	.word	0x10310000
 8002a08:	10320000 	.word	0x10320000
 8002a0c:	10220000 	.word	0x10220000
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40010800 	.word	0x40010800
 8002a1c:	40010c00 	.word	0x40010c00
 8002a20:	40011000 	.word	0x40011000
 8002a24:	40011400 	.word	0x40011400
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	807b      	strh	r3, [r7, #2]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a3c:	787b      	ldrb	r3, [r7, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a42:	887a      	ldrh	r2, [r7, #2]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a48:	e003      	b.n	8002a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a4a:	887b      	ldrh	r3, [r7, #2]
 8002a4c:	041a      	lsls	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	611a      	str	r2, [r3, #16]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	887b      	ldrh	r3, [r7, #2]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002a7a:	e002      	b.n	8002a82 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	611a      	str	r2, [r3, #16]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f806 	bl	8002abc <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40010400 	.word	0x40010400

08002abc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e26c      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8087 	beq.w	8002bfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af0:	4b92      	ldr	r3, [pc, #584]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d00c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002afc:	4b8f      	ldr	r3, [pc, #572]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d112      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5e>
 8002b08:	4b8c      	ldr	r3, [pc, #560]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b16:	4b89      	ldr	r3, [pc, #548]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d06c      	beq.n	8002bfc <HAL_RCC_OscConfig+0x12c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d168      	bne.n	8002bfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e246      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x76>
 8002b38:	4b80      	ldr	r3, [pc, #512]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7f      	ldr	r2, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x98>
 8002b4e:	4b7b      	ldr	r3, [pc, #492]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7a      	ldr	r2, [pc, #488]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a77      	ldr	r2, [pc, #476]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e01d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0xbc>
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a71      	ldr	r2, [pc, #452]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a6e      	ldr	r2, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0xd4>
 8002b8c:	4b6b      	ldr	r3, [pc, #428]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6a      	ldr	r2, [pc, #424]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	4b68      	ldr	r3, [pc, #416]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a67      	ldr	r2, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d013      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff fb7e 	bl	80022ac <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb4:	f7ff fb7a 	bl	80022ac <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e1fa      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe4>
 8002bd2:	e014      	b.n	8002bfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7ff fb6a 	bl	80022ac <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bdc:	f7ff fb66 	bl	80022ac <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b64      	cmp	r3, #100	; 0x64
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e1e6      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bee:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x10c>
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d063      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0a:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c16:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x18c>
 8002c22:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d116      	bne.n	8002c5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2e:	4b43      	ldr	r3, [pc, #268]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_RCC_OscConfig+0x176>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d001      	beq.n	8002c46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e1ba      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b3d      	ldr	r3, [pc, #244]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4939      	ldr	r1, [pc, #228]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	e03a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c64:	4b36      	ldr	r3, [pc, #216]	; (8002d40 <HAL_RCC_OscConfig+0x270>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7ff fb1f 	bl	80022ac <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c72:	f7ff fb1b 	bl	80022ac <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e19b      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4927      	ldr	r1, [pc, #156]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
 8002ca4:	e015      	b.n	8002cd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7ff fafe 	bl	80022ac <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7ff fafa 	bl	80022ac <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e17a      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d03a      	beq.n	8002d54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d019      	beq.n	8002d1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cec:	f7ff fade 	bl	80022ac <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf4:	f7ff fada 	bl	80022ac <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e15a      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_RCC_OscConfig+0x26c>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f000 fb0a 	bl	800332c <RCC_Delay>
 8002d18:	e01c      	b.n	8002d54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d20:	f7ff fac4 	bl	80022ac <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d26:	e00f      	b.n	8002d48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d28:	f7ff fac0 	bl	80022ac <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d908      	bls.n	8002d48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e140      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	42420000 	.word	0x42420000
 8002d44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d48:	4b9e      	ldr	r3, [pc, #632]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e9      	bne.n	8002d28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a6 	beq.w	8002eae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d66:	4b97      	ldr	r3, [pc, #604]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d72:	4b94      	ldr	r3, [pc, #592]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	4a93      	ldr	r2, [pc, #588]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	61d3      	str	r3, [r2, #28]
 8002d7e:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b8b      	ldr	r3, [pc, #556]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a8a      	ldr	r2, [pc, #552]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7ff fa81 	bl	80022ac <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7ff fa7d 	bl	80022ac <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0fd      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b81      	ldr	r3, [pc, #516]	; (8002fc8 <HAL_RCC_OscConfig+0x4f8>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x312>
 8002dd4:	4b7b      	ldr	r3, [pc, #492]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	4a7a      	ldr	r2, [pc, #488]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6213      	str	r3, [r2, #32]
 8002de0:	e02d      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x334>
 8002dea:	4b76      	ldr	r3, [pc, #472]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a75      	ldr	r2, [pc, #468]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	4a72      	ldr	r2, [pc, #456]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002dfc:	f023 0304 	bic.w	r3, r3, #4
 8002e00:	6213      	str	r3, [r2, #32]
 8002e02:	e01c      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d10c      	bne.n	8002e26 <HAL_RCC_OscConfig+0x356>
 8002e0c:	4b6d      	ldr	r3, [pc, #436]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a6c      	ldr	r2, [pc, #432]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	4a69      	ldr	r2, [pc, #420]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6213      	str	r3, [r2, #32]
 8002e24:	e00b      	b.n	8002e3e <HAL_RCC_OscConfig+0x36e>
 8002e26:	4b67      	ldr	r3, [pc, #412]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a66      	ldr	r2, [pc, #408]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f023 0301 	bic.w	r3, r3, #1
 8002e30:	6213      	str	r3, [r2, #32]
 8002e32:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	f023 0304 	bic.w	r3, r3, #4
 8002e3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d015      	beq.n	8002e72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7ff fa31 	bl	80022ac <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7ff fa2d 	bl	80022ac <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0ab      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e64:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ee      	beq.n	8002e4e <HAL_RCC_OscConfig+0x37e>
 8002e70:	e014      	b.n	8002e9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e72:	f7ff fa1b 	bl	80022ac <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e78:	e00a      	b.n	8002e90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f7ff fa17 	bl	80022ac <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e095      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ee      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d105      	bne.n	8002eae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea2:	4b48      	ldr	r3, [pc, #288]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 8081 	beq.w	8002fba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb8:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d061      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d146      	bne.n	8002f5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7ff f9eb 	bl	80022ac <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7ff f9e7 	bl	80022ac <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e067      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f0      	bne.n	8002eda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f02:	4b30      	ldr	r3, [pc, #192]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	492d      	ldr	r1, [pc, #180]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f14:	4b2b      	ldr	r3, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a19      	ldr	r1, [r3, #32]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	430b      	orrs	r3, r1
 8002f26:	4927      	ldr	r1, [pc, #156]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f32:	f7ff f9bb 	bl	80022ac <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7ff f9b7 	bl	80022ac <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e037      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x46a>
 8002f58:	e02f      	b.n	8002fba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCC_OscConfig+0x4fc>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7ff f9a4 	bl	80022ac <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7ff f9a0 	bl	80022ac <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e020      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7a:	4b12      	ldr	r3, [pc, #72]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x498>
 8002f86:	e018      	b.n	8002fba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e013      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d001      	beq.n	8002fba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	42420060 	.word	0x42420060

08002fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0d0      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b6a      	ldr	r3, [pc, #424]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d910      	bls.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 0207 	bic.w	r2, r3, #7
 8002ffa:	4965      	ldr	r1, [pc, #404]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003036:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a52      	ldr	r2, [pc, #328]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800304e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d040      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d115      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d107      	bne.n	800309e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308e:	4b41      	ldr	r3, [pc, #260]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e073      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06b      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4936      	ldr	r1, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c0:	f7ff f8f4 	bl	80022ac <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7ff f8f0 	bl	80022ac <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e053      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 020c 	and.w	r2, r3, #12
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d1eb      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d210      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 0207 	bic.w	r2, r3, #7
 8003106:	4922      	ldr	r1, [pc, #136]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	4313      	orrs	r3, r2
 800310c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f821 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003162:	4601      	mov	r1, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	fa21 f303 	lsr.w	r3, r1, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1cc>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x1d0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe ff2e 	bl	8001fe0 <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40022000 	.word	0x40022000
 8003194:	40021000 	.word	0x40021000
 8003198:	08007288 	.word	0x08007288
 800319c:	2000000c 	.word	0x2000000c
 80031a0:	20000010 	.word	0x20000010

080031a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	b490      	push	{r4, r7}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031aa:	4b2a      	ldr	r3, [pc, #168]	; (8003254 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031ac:	1d3c      	adds	r4, r7, #4
 80031ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d002      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x40>
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d003      	beq.n	80031ea <HAL_RCC_GetSysClockFreq+0x46>
 80031e2:	e02d      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031e4:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031e6:	623b      	str	r3, [r7, #32]
      break;
 80031e8:	e02d      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	0c9b      	lsrs	r3, r3, #18
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80031f6:	4413      	add	r3, r2
 80031f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_RCC_GetSysClockFreq+0xb8>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c5b      	lsrs	r3, r3, #17
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003216:	4413      	add	r3, r2
 8003218:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800321c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003222:	fb02 f203 	mul.w	r2, r2, r3
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e004      	b.n	800323a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	4a0c      	ldr	r2, [pc, #48]	; (8003264 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	623b      	str	r3, [r7, #32]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003242:	623b      	str	r3, [r7, #32]
      break;
 8003244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003246:	6a3b      	ldr	r3, [r7, #32]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3728      	adds	r7, #40	; 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bc90      	pop	{r4, r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	08007274 	.word	0x08007274
 8003258:	08007284 	.word	0x08007284
 800325c:	40021000 	.word	0x40021000
 8003260:	007a1200 	.word	0x007a1200
 8003264:	003d0900 	.word	0x003d0900

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b02      	ldr	r3, [pc, #8]	; (8003278 <HAL_RCC_GetHCLKFreq+0x10>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	2000000c 	.word	0x2000000c

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff2 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003284:	4601      	mov	r1, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	; (800329c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4a03      	ldr	r2, [pc, #12]	; (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40021000 	.word	0x40021000
 80032a0:	08007298 	.word	0x08007298

080032a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032a8:	f7ff ffde 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032ac:	4601      	mov	r1, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	0adb      	lsrs	r3, r3, #11
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4a03      	ldr	r2, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	08007298 	.word	0x08007298

080032cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	220f      	movs	r2, #15
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_GetClockConfig+0x58>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	08db      	lsrs	r3, r3, #3
 8003306:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetClockConfig+0x5c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0207 	and.w	r2, r3, #7
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr
 8003324:	40021000 	.word	0x40021000
 8003328:	40022000 	.word	0x40022000

0800332c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <RCC_Delay+0x34>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <RCC_Delay+0x38>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a5b      	lsrs	r3, r3, #9
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003348:	bf00      	nop
  }
  while (Delay --);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	60fa      	str	r2, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f9      	bne.n	8003348 <RCC_Delay+0x1c>
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2000000c 	.word	0x2000000c
 8003364:	10624dd3 	.word	0x10624dd3

08003368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e01d      	b.n	80033b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe fdae 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fa10 	bl	80037cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d007      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b02      	cmp	r3, #2
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9a4 	bl	8003794 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f997 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f9a6 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b04      	cmp	r3, #4
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0204 	mvn.w	r2, #4
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f97a 	bl	8003794 <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f96d 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f97c 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d122      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d11b      	bne.n	8003508 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0208 	mvn.w	r2, #8
 80034d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2204      	movs	r2, #4
 80034de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f950 	bl	8003794 <HAL_TIM_IC_CaptureCallback>
 80034f4:	e005      	b.n	8003502 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f943 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f952 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b10      	cmp	r3, #16
 8003514:	d122      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b10      	cmp	r3, #16
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f06f 0210 	mvn.w	r2, #16
 800352c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2208      	movs	r2, #8
 8003532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f926 	bl	8003794 <HAL_TIM_IC_CaptureCallback>
 8003548:	e005      	b.n	8003556 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f919 	bl	8003782 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f928 	bl	80037a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10e      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0201 	mvn.w	r2, #1
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fcee 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b80      	cmp	r3, #128	; 0x80
 8003594:	d10e      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a0:	2b80      	cmp	r3, #128	; 0x80
 80035a2:	d107      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fa51 	bl	8003a56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f8ec 	bl	80037b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0220 	mvn.w	r2, #32
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fa1c 	bl	8003a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_TIM_ConfigClockSource+0x18>
 8003628:	2302      	movs	r3, #2
 800362a:	e0a6      	b.n	800377a <HAL_TIM_ConfigClockSource+0x166>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800364a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003652:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d067      	beq.n	8003734 <HAL_TIM_ConfigClockSource+0x120>
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d80b      	bhi.n	8003680 <HAL_TIM_ConfigClockSource+0x6c>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d073      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
 800366c:	2b10      	cmp	r3, #16
 800366e:	d802      	bhi.n	8003676 <HAL_TIM_ConfigClockSource+0x62>
 8003670:	2b00      	cmp	r3, #0
 8003672:	d06f      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003674:	e078      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003676:	2b20      	cmp	r3, #32
 8003678:	d06c      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d06a      	beq.n	8003754 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800367e:	e073      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003680:	2b70      	cmp	r3, #112	; 0x70
 8003682:	d00d      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x8c>
 8003684:	2b70      	cmp	r3, #112	; 0x70
 8003686:	d804      	bhi.n	8003692 <HAL_TIM_ConfigClockSource+0x7e>
 8003688:	2b50      	cmp	r3, #80	; 0x50
 800368a:	d033      	beq.n	80036f4 <HAL_TIM_ConfigClockSource+0xe0>
 800368c:	2b60      	cmp	r3, #96	; 0x60
 800368e:	d041      	beq.n	8003714 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003690:	e06a      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	d066      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x152>
 8003698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800369c:	d017      	beq.n	80036ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800369e:	e063      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f000 f965 	bl	800397e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	609a      	str	r2, [r3, #8]
      break;
 80036cc:	e04c      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	6899      	ldr	r1, [r3, #8]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f000 f94e 	bl	800397e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f0:	609a      	str	r2, [r3, #8]
      break;
 80036f2:	e039      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	461a      	mov	r2, r3
 8003702:	f000 f8c5 	bl	8003890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2150      	movs	r1, #80	; 0x50
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f91c 	bl	800394a <TIM_ITRx_SetConfig>
      break;
 8003712:	e029      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	461a      	mov	r2, r3
 8003722:	f000 f8e3 	bl	80038ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2160      	movs	r1, #96	; 0x60
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f90c 	bl	800394a <TIM_ITRx_SetConfig>
      break;
 8003732:	e019      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	461a      	mov	r2, r3
 8003742:	f000 f8a5 	bl	8003890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2140      	movs	r1, #64	; 0x40
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f8fc 	bl	800394a <TIM_ITRx_SetConfig>
      break;
 8003752:	e009      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 f8f3 	bl	800394a <TIM_ITRx_SetConfig>
      break;
 8003764:	e000      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr

080037a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
	...

080037cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a29      	ldr	r2, [pc, #164]	; (8003884 <TIM_Base_SetConfig+0xb8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00b      	beq.n	80037fc <TIM_Base_SetConfig+0x30>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d007      	beq.n	80037fc <TIM_Base_SetConfig+0x30>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a26      	ldr	r2, [pc, #152]	; (8003888 <TIM_Base_SetConfig+0xbc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <TIM_Base_SetConfig+0x30>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a25      	ldr	r2, [pc, #148]	; (800388c <TIM_Base_SetConfig+0xc0>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <TIM_Base_SetConfig+0xb8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00b      	beq.n	800382e <TIM_Base_SetConfig+0x62>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800381c:	d007      	beq.n	800382e <TIM_Base_SetConfig+0x62>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a19      	ldr	r2, [pc, #100]	; (8003888 <TIM_Base_SetConfig+0xbc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_Base_SetConfig+0x62>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a18      	ldr	r2, [pc, #96]	; (800388c <TIM_Base_SetConfig+0xc0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d108      	bne.n	8003840 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <TIM_Base_SetConfig+0xb8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d103      	bne.n	8003874 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	615a      	str	r2, [r3, #20]
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	40012c00 	.word	0x40012c00
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800

08003890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f023 0201 	bic.w	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 030a 	bic.w	r3, r3, #10
 80038cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr

080038ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f023 0210 	bic.w	r2, r3, #16
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003916:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	031b      	lsls	r3, r3, #12
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003928:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	f043 0307 	orr.w	r3, r3, #7
 800396c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800397e:	b480      	push	{r7}
 8003980:	b087      	sub	sp, #28
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003998:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	021a      	lsls	r2, r3, #8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	609a      	str	r2, [r3, #8]
}
 80039b2:	bf00      	nop
 80039b4:	371c      	adds	r7, #28
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e032      	b.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a0c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e03f      	b.n	8003afa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe fa54 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fc33 	bl	8004318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af02      	add	r7, sp, #8
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	f040 8083 	bne.w	8003c2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Transmit+0x2e>
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e07b      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Transmit+0x40>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e074      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2221      	movs	r2, #33	; 0x21
 8003b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b58:	f7fe fba8 	bl	80022ac <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b6a:	e042      	b.n	8003bf2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	d122      	bne.n	8003bca <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa58 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e046      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d103      	bne.n	8003bc2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	e017      	b.n	8003bf2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60bb      	str	r3, [r7, #8]
 8003bc8:	e013      	b.n	8003bf2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fa35 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e023      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	60ba      	str	r2, [r7, #8]
 8003bea:	781a      	ldrb	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1b7      	bne.n	8003b6c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2200      	movs	r2, #0
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 fa1c 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e00a      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	f040 8090 	bne.w	8003d76 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_UART_Receive+0x2e>
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e088      	b.n	8003d78 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Receive+0x40>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e081      	b.n	8003d78 <HAL_UART_Receive+0x144>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2222      	movs	r2, #34	; 0x22
 8003c86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c8a:	f7fe fb0f 	bl	80022ac <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	88fa      	ldrh	r2, [r7, #6]
 8003c94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003c9c:	e05c      	b.n	8003d58 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d12b      	bne.n	8003d0e <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2120      	movs	r1, #32
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f9bf 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e053      	b.n	8003d78 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10c      	bne.n	8003cf6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	e030      	b.n	8003d58 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	e024      	b.n	8003d58 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	2120      	movs	r1, #32
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f993 	bl	8004044 <UART_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e027      	b.n	8003d78 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d108      	bne.n	8003d42 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	60ba      	str	r2, [r7, #8]
 8003d3c:	b2ca      	uxtb	r2, r1
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	e00a      	b.n	8003d58 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	1c59      	adds	r1, r3, #1
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d19d      	bne.n	8003c9e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	e000      	b.n	8003d78 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003d76:	2302      	movs	r3, #2
  }
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d140      	bne.n	8003e1c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_UART_Receive_IT+0x26>
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e039      	b.n	8003e1e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_UART_Receive_IT+0x38>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e032      	b.n	8003e1e <HAL_UART_Receive_IT+0x9e>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2222      	movs	r2, #34	; 0x22
 8003ddc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0220 	orr.w	r2, r2, #32
 8003e16:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e000      	b.n	8003e1e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003e1c:	2302      	movs	r3, #2
  }
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bc80      	pop	{r7}
 8003e26:	4770      	bx	lr

08003e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_UART_IRQHandler+0x52>
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9ce 	bl	8004214 <UART_Receive_IT>
      return;
 8003e78:	e0cc      	b.n	8004014 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80ab 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x1b0>
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_UART_IRQHandler+0x70>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80a0 	beq.w	8003fd8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x90>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	f043 0201 	orr.w	r2, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xb0>
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d005      	beq.n	8003ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	f043 0202 	orr.w	r2, r3, #2
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xd0>
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	f043 0204 	orr.w	r2, r3, #4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_UART_IRQHandler+0xf0>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	f043 0208 	orr.w	r2, r3, #8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d078      	beq.n	8004012 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <HAL_UART_IRQHandler+0x112>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f96d 	bl	8004214 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <HAL_UART_IRQHandler+0x13a>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d031      	beq.n	8003fc6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8b8 	bl	80040d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d023      	beq.n	8003fbe <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695a      	ldr	r2, [r3, #20]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d013      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f92:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_UART_IRQHandler+0x1f4>)
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fe fb76 	bl	800268c <HAL_DMA_Abort_IT>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	e00e      	b.n	8003fd4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f83b 	bl	8004032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	e00a      	b.n	8003fd4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f837 	bl	8004032 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc4:	e006      	b.n	8003fd4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f833 	bl	8004032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003fd2:	e01e      	b.n	8004012 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd4:	bf00      	nop
    return;
 8003fd6:	e01c      	b.n	8004012 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x1cc>
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8a4 	bl	800413a <UART_Transmit_IT>
    return;
 8003ff2:	e00f      	b.n	8004014 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_UART_IRQHandler+0x1ec>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8eb 	bl	80041e4 <UART_EndTransmit_IT>
    return;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004012:	bf00      	nop
  }
}
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	08004113 	.word	0x08004113

08004020 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004054:	e02c      	b.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d028      	beq.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <UART_WaitOnFlagUntilTimeout+0x30>
 8004064:	f7fe f922 	bl	80022ac <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	429a      	cmp	r2, r3
 8004072:	d21d      	bcs.n	80040b0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004082:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e00f      	b.n	80040d0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4013      	ands	r3, r2
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	429a      	cmp	r2, r3
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d0c3      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040ee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff ff80 	bl	8004032 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b21      	cmp	r3, #33	; 0x21
 800414c:	d144      	bne.n	80041d8 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004156:	d11a      	bne.n	800418e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d105      	bne.n	8004182 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	621a      	str	r2, [r3, #32]
 8004180:	e00e      	b.n	80041a0 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	621a      	str	r2, [r3, #32]
 800418c:	e008      	b.n	80041a0 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	1c59      	adds	r1, r3, #1
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6211      	str	r1, [r2, #32]
 8004198:	781a      	ldrb	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4619      	mov	r1, r3
 80041ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10f      	bne.n	80041d4 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff0b 	bl	8004020 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b22      	cmp	r3, #34	; 0x22
 8004226:	d171      	bne.n	800430c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004230:	d123      	bne.n	800427a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10e      	bne.n	800425e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
 800425c:	e029      	b.n	80042b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	b29b      	uxth	r3, r3
 8004266:	b2db      	uxtb	r3, r3
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
 8004278:	e01b      	b.n	80042b2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10a      	bne.n	8004298 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6858      	ldr	r0, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	1c59      	adds	r1, r3, #1
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6291      	str	r1, [r2, #40]	; 0x28
 8004292:	b2c2      	uxtb	r2, r0
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e00c      	b.n	80042b2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a4:	1c58      	adds	r0, r3, #1
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	6288      	str	r0, [r1, #40]	; 0x28
 80042aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d120      	bne.n	8004308 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0220 	bic.w	r2, r2, #32
 80042d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc feb2 	bl	8001068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	e002      	b.n	800430e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004352:	f023 030c 	bic.w	r3, r3, #12
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	430b      	orrs	r3, r1
 800435e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <UART_SetConfig+0x1ac>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d14e      	bne.n	800441e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7fe ff90 	bl	80032a4 <HAL_RCC_GetPCLK2Freq>
 8004384:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009a      	lsls	r2, r3, #2
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	4a4a      	ldr	r2, [pc, #296]	; (80044c8 <UART_SetConfig+0x1b0>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	0119      	lsls	r1, r3, #4
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	009a      	lsls	r2, r3, #2
 80043b0:	441a      	add	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80043bc:	4b42      	ldr	r3, [pc, #264]	; (80044c8 <UART_SetConfig+0x1b0>)
 80043be:	fba3 0302 	umull	r0, r3, r3, r2
 80043c2:	095b      	lsrs	r3, r3, #5
 80043c4:	2064      	movs	r0, #100	; 0x64
 80043c6:	fb00 f303 	mul.w	r3, r0, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	3332      	adds	r3, #50	; 0x32
 80043d0:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <UART_SetConfig+0x1b0>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	4419      	add	r1, r3
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009a      	lsls	r2, r3, #2
 80043e8:	441a      	add	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <UART_SetConfig+0x1b0>)
 80043f6:	fba3 0302 	umull	r0, r3, r3, r2
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2064      	movs	r0, #100	; 0x64
 80043fe:	fb00 f303 	mul.w	r3, r0, r3
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	3332      	adds	r3, #50	; 0x32
 8004408:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <UART_SetConfig+0x1b0>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f003 020f 	and.w	r2, r3, #15
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	440a      	add	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 800441c:	e04d      	b.n	80044ba <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800441e:	f7fe ff2d 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8004422:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009a      	lsls	r2, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <UART_SetConfig+0x1b0>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	0119      	lsls	r1, r3, #4
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4413      	add	r3, r2
 800444c:	009a      	lsls	r2, r3, #2
 800444e:	441a      	add	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	fbb2 f2f3 	udiv	r2, r2, r3
 800445a:	4b1b      	ldr	r3, [pc, #108]	; (80044c8 <UART_SetConfig+0x1b0>)
 800445c:	fba3 0302 	umull	r0, r3, r3, r2
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	2064      	movs	r0, #100	; 0x64
 8004464:	fb00 f303 	mul.w	r3, r0, r3
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	3332      	adds	r3, #50	; 0x32
 800446e:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <UART_SetConfig+0x1b0>)
 8004470:	fba2 2303 	umull	r2, r3, r2, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800447a:	4419      	add	r1, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009a      	lsls	r2, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <UART_SetConfig+0x1b0>)
 8004494:	fba3 0302 	umull	r0, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2064      	movs	r0, #100	; 0x64
 800449c:	fb00 f303 	mul.w	r3, r0, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	3332      	adds	r3, #50	; 0x32
 80044a6:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <UART_SetConfig+0x1b0>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 020f 	and.w	r2, r3, #15
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	440a      	add	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40013800 	.word	0x40013800
 80044c8:	51eb851f 	.word	0x51eb851f

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000018 	.word	0x20000018

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2500      	movs	r5, #0
 80044dc:	4e0c      	ldr	r6, [pc, #48]	; (8004510 <__libc_init_array+0x38>)
 80044de:	4c0d      	ldr	r4, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044e0:	1ba4      	subs	r4, r4, r6
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a5      	cmp	r5, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	f002 fc58 	bl	8006d9c <_init>
 80044ec:	2500      	movs	r5, #0
 80044ee:	4e0a      	ldr	r6, [pc, #40]	; (8004518 <__libc_init_array+0x40>)
 80044f0:	4c0a      	ldr	r4, [pc, #40]	; (800451c <__libc_init_array+0x44>)
 80044f2:	1ba4      	subs	r4, r4, r6
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a5      	cmp	r5, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004500:	4798      	blx	r3
 8004502:	3501      	adds	r5, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800450a:	4798      	blx	r3
 800450c:	3501      	adds	r5, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08007560 	.word	0x08007560
 8004514:	08007560 	.word	0x08007560
 8004518:	08007560 	.word	0x08007560
 800451c:	08007564 	.word	0x08007564

08004520 <memset>:
 8004520:	4603      	mov	r3, r0
 8004522:	4402      	add	r2, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <_calloc_r>:
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	fb02 f401 	mul.w	r4, r2, r1
 8004536:	4621      	mov	r1, r4
 8004538:	f000 f808 	bl	800454c <_malloc_r>
 800453c:	4605      	mov	r5, r0
 800453e:	b118      	cbz	r0, 8004548 <_calloc_r+0x18>
 8004540:	4622      	mov	r2, r4
 8004542:	2100      	movs	r1, #0
 8004544:	f7ff ffec 	bl	8004520 <memset>
 8004548:	4628      	mov	r0, r5
 800454a:	bd38      	pop	{r3, r4, r5, pc}

0800454c <_malloc_r>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	1ccd      	adds	r5, r1, #3
 8004550:	f025 0503 	bic.w	r5, r5, #3
 8004554:	3508      	adds	r5, #8
 8004556:	2d0c      	cmp	r5, #12
 8004558:	bf38      	it	cc
 800455a:	250c      	movcc	r5, #12
 800455c:	2d00      	cmp	r5, #0
 800455e:	4606      	mov	r6, r0
 8004560:	db01      	blt.n	8004566 <_malloc_r+0x1a>
 8004562:	42a9      	cmp	r1, r5
 8004564:	d903      	bls.n	800456e <_malloc_r+0x22>
 8004566:	230c      	movs	r3, #12
 8004568:	6033      	str	r3, [r6, #0]
 800456a:	2000      	movs	r0, #0
 800456c:	bd70      	pop	{r4, r5, r6, pc}
 800456e:	f001 fee0 	bl	8006332 <__malloc_lock>
 8004572:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <_malloc_r+0xac>)
 8004574:	6814      	ldr	r4, [r2, #0]
 8004576:	4621      	mov	r1, r4
 8004578:	b991      	cbnz	r1, 80045a0 <_malloc_r+0x54>
 800457a:	4c20      	ldr	r4, [pc, #128]	; (80045fc <_malloc_r+0xb0>)
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	b91b      	cbnz	r3, 8004588 <_malloc_r+0x3c>
 8004580:	4630      	mov	r0, r6
 8004582:	f000 fd09 	bl	8004f98 <_sbrk_r>
 8004586:	6020      	str	r0, [r4, #0]
 8004588:	4629      	mov	r1, r5
 800458a:	4630      	mov	r0, r6
 800458c:	f000 fd04 	bl	8004f98 <_sbrk_r>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d124      	bne.n	80045de <_malloc_r+0x92>
 8004594:	230c      	movs	r3, #12
 8004596:	4630      	mov	r0, r6
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	f001 fecb 	bl	8006334 <__malloc_unlock>
 800459e:	e7e4      	b.n	800456a <_malloc_r+0x1e>
 80045a0:	680b      	ldr	r3, [r1, #0]
 80045a2:	1b5b      	subs	r3, r3, r5
 80045a4:	d418      	bmi.n	80045d8 <_malloc_r+0x8c>
 80045a6:	2b0b      	cmp	r3, #11
 80045a8:	d90f      	bls.n	80045ca <_malloc_r+0x7e>
 80045aa:	600b      	str	r3, [r1, #0]
 80045ac:	18cc      	adds	r4, r1, r3
 80045ae:	50cd      	str	r5, [r1, r3]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f001 febf 	bl	8006334 <__malloc_unlock>
 80045b6:	f104 000b 	add.w	r0, r4, #11
 80045ba:	1d23      	adds	r3, r4, #4
 80045bc:	f020 0007 	bic.w	r0, r0, #7
 80045c0:	1ac3      	subs	r3, r0, r3
 80045c2:	d0d3      	beq.n	800456c <_malloc_r+0x20>
 80045c4:	425a      	negs	r2, r3
 80045c6:	50e2      	str	r2, [r4, r3]
 80045c8:	e7d0      	b.n	800456c <_malloc_r+0x20>
 80045ca:	684b      	ldr	r3, [r1, #4]
 80045cc:	428c      	cmp	r4, r1
 80045ce:	bf16      	itet	ne
 80045d0:	6063      	strne	r3, [r4, #4]
 80045d2:	6013      	streq	r3, [r2, #0]
 80045d4:	460c      	movne	r4, r1
 80045d6:	e7eb      	b.n	80045b0 <_malloc_r+0x64>
 80045d8:	460c      	mov	r4, r1
 80045da:	6849      	ldr	r1, [r1, #4]
 80045dc:	e7cc      	b.n	8004578 <_malloc_r+0x2c>
 80045de:	1cc4      	adds	r4, r0, #3
 80045e0:	f024 0403 	bic.w	r4, r4, #3
 80045e4:	42a0      	cmp	r0, r4
 80045e6:	d005      	beq.n	80045f4 <_malloc_r+0xa8>
 80045e8:	1a21      	subs	r1, r4, r0
 80045ea:	4630      	mov	r0, r6
 80045ec:	f000 fcd4 	bl	8004f98 <_sbrk_r>
 80045f0:	3001      	adds	r0, #1
 80045f2:	d0cf      	beq.n	8004594 <_malloc_r+0x48>
 80045f4:	6025      	str	r5, [r4, #0]
 80045f6:	e7db      	b.n	80045b0 <_malloc_r+0x64>
 80045f8:	200002a0 	.word	0x200002a0
 80045fc:	200002a4 	.word	0x200002a4

08004600 <__cvt>:
 8004600:	2b00      	cmp	r3, #0
 8004602:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004606:	461e      	mov	r6, r3
 8004608:	bfbb      	ittet	lt
 800460a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800460e:	461e      	movlt	r6, r3
 8004610:	2300      	movge	r3, #0
 8004612:	232d      	movlt	r3, #45	; 0x2d
 8004614:	b088      	sub	sp, #32
 8004616:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004618:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800461c:	f027 0720 	bic.w	r7, r7, #32
 8004620:	2f46      	cmp	r7, #70	; 0x46
 8004622:	4614      	mov	r4, r2
 8004624:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004626:	700b      	strb	r3, [r1, #0]
 8004628:	d004      	beq.n	8004634 <__cvt+0x34>
 800462a:	2f45      	cmp	r7, #69	; 0x45
 800462c:	d100      	bne.n	8004630 <__cvt+0x30>
 800462e:	3501      	adds	r5, #1
 8004630:	2302      	movs	r3, #2
 8004632:	e000      	b.n	8004636 <__cvt+0x36>
 8004634:	2303      	movs	r3, #3
 8004636:	aa07      	add	r2, sp, #28
 8004638:	9204      	str	r2, [sp, #16]
 800463a:	aa06      	add	r2, sp, #24
 800463c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004640:	e9cd 3500 	strd	r3, r5, [sp]
 8004644:	4622      	mov	r2, r4
 8004646:	4633      	mov	r3, r6
 8004648:	f000 feb2 	bl	80053b0 <_dtoa_r>
 800464c:	2f47      	cmp	r7, #71	; 0x47
 800464e:	4680      	mov	r8, r0
 8004650:	d102      	bne.n	8004658 <__cvt+0x58>
 8004652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004654:	07db      	lsls	r3, r3, #31
 8004656:	d526      	bpl.n	80046a6 <__cvt+0xa6>
 8004658:	2f46      	cmp	r7, #70	; 0x46
 800465a:	eb08 0905 	add.w	r9, r8, r5
 800465e:	d111      	bne.n	8004684 <__cvt+0x84>
 8004660:	f898 3000 	ldrb.w	r3, [r8]
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d10a      	bne.n	800467e <__cvt+0x7e>
 8004668:	2200      	movs	r2, #0
 800466a:	2300      	movs	r3, #0
 800466c:	4620      	mov	r0, r4
 800466e:	4631      	mov	r1, r6
 8004670:	f7fc f9a4 	bl	80009bc <__aeabi_dcmpeq>
 8004674:	b918      	cbnz	r0, 800467e <__cvt+0x7e>
 8004676:	f1c5 0501 	rsb	r5, r5, #1
 800467a:	f8ca 5000 	str.w	r5, [sl]
 800467e:	f8da 3000 	ldr.w	r3, [sl]
 8004682:	4499      	add	r9, r3
 8004684:	2200      	movs	r2, #0
 8004686:	2300      	movs	r3, #0
 8004688:	4620      	mov	r0, r4
 800468a:	4631      	mov	r1, r6
 800468c:	f7fc f996 	bl	80009bc <__aeabi_dcmpeq>
 8004690:	b938      	cbnz	r0, 80046a2 <__cvt+0xa2>
 8004692:	2230      	movs	r2, #48	; 0x30
 8004694:	9b07      	ldr	r3, [sp, #28]
 8004696:	454b      	cmp	r3, r9
 8004698:	d205      	bcs.n	80046a6 <__cvt+0xa6>
 800469a:	1c59      	adds	r1, r3, #1
 800469c:	9107      	str	r1, [sp, #28]
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	e7f8      	b.n	8004694 <__cvt+0x94>
 80046a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80046a6:	4640      	mov	r0, r8
 80046a8:	9b07      	ldr	r3, [sp, #28]
 80046aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046ac:	eba3 0308 	sub.w	r3, r3, r8
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	b008      	add	sp, #32
 80046b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046b8 <__exponent>:
 80046b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ba:	2900      	cmp	r1, #0
 80046bc:	bfb4      	ite	lt
 80046be:	232d      	movlt	r3, #45	; 0x2d
 80046c0:	232b      	movge	r3, #43	; 0x2b
 80046c2:	4604      	mov	r4, r0
 80046c4:	bfb8      	it	lt
 80046c6:	4249      	neglt	r1, r1
 80046c8:	2909      	cmp	r1, #9
 80046ca:	f804 2b02 	strb.w	r2, [r4], #2
 80046ce:	7043      	strb	r3, [r0, #1]
 80046d0:	dd21      	ble.n	8004716 <__exponent+0x5e>
 80046d2:	f10d 0307 	add.w	r3, sp, #7
 80046d6:	461f      	mov	r7, r3
 80046d8:	260a      	movs	r6, #10
 80046da:	fb91 f5f6 	sdiv	r5, r1, r6
 80046de:	fb06 1115 	mls	r1, r6, r5, r1
 80046e2:	2d09      	cmp	r5, #9
 80046e4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80046e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80046ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80046f0:	4629      	mov	r1, r5
 80046f2:	dc09      	bgt.n	8004708 <__exponent+0x50>
 80046f4:	3130      	adds	r1, #48	; 0x30
 80046f6:	3b02      	subs	r3, #2
 80046f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80046fc:	42bb      	cmp	r3, r7
 80046fe:	4622      	mov	r2, r4
 8004700:	d304      	bcc.n	800470c <__exponent+0x54>
 8004702:	1a10      	subs	r0, r2, r0
 8004704:	b003      	add	sp, #12
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004708:	4613      	mov	r3, r2
 800470a:	e7e6      	b.n	80046da <__exponent+0x22>
 800470c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004710:	f804 2b01 	strb.w	r2, [r4], #1
 8004714:	e7f2      	b.n	80046fc <__exponent+0x44>
 8004716:	2330      	movs	r3, #48	; 0x30
 8004718:	4419      	add	r1, r3
 800471a:	7083      	strb	r3, [r0, #2]
 800471c:	1d02      	adds	r2, r0, #4
 800471e:	70c1      	strb	r1, [r0, #3]
 8004720:	e7ef      	b.n	8004702 <__exponent+0x4a>
	...

08004724 <_printf_float>:
 8004724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004728:	b091      	sub	sp, #68	; 0x44
 800472a:	460c      	mov	r4, r1
 800472c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800472e:	4693      	mov	fp, r2
 8004730:	461e      	mov	r6, r3
 8004732:	4605      	mov	r5, r0
 8004734:	f001 fd6a 	bl	800620c <_localeconv_r>
 8004738:	6803      	ldr	r3, [r0, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	9309      	str	r3, [sp, #36]	; 0x24
 800473e:	f7fb fd11 	bl	8000164 <strlen>
 8004742:	2300      	movs	r3, #0
 8004744:	930e      	str	r3, [sp, #56]	; 0x38
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	900a      	str	r0, [sp, #40]	; 0x28
 800474a:	3307      	adds	r3, #7
 800474c:	f023 0307 	bic.w	r3, r3, #7
 8004750:	f103 0208 	add.w	r2, r3, #8
 8004754:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004758:	f8d4 a000 	ldr.w	sl, [r4]
 800475c:	603a      	str	r2, [r7, #0]
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004766:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800476a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800476e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004770:	f04f 32ff 	mov.w	r2, #4294967295
 8004774:	4ba6      	ldr	r3, [pc, #664]	; (8004a10 <_printf_float+0x2ec>)
 8004776:	4638      	mov	r0, r7
 8004778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800477a:	f7fc f951 	bl	8000a20 <__aeabi_dcmpun>
 800477e:	bb68      	cbnz	r0, 80047dc <_printf_float+0xb8>
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	4ba2      	ldr	r3, [pc, #648]	; (8004a10 <_printf_float+0x2ec>)
 8004786:	4638      	mov	r0, r7
 8004788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800478a:	f7fc f92b 	bl	80009e4 <__aeabi_dcmple>
 800478e:	bb28      	cbnz	r0, 80047dc <_printf_float+0xb8>
 8004790:	2200      	movs	r2, #0
 8004792:	2300      	movs	r3, #0
 8004794:	4638      	mov	r0, r7
 8004796:	4649      	mov	r1, r9
 8004798:	f7fc f91a 	bl	80009d0 <__aeabi_dcmplt>
 800479c:	b110      	cbz	r0, 80047a4 <_printf_float+0x80>
 800479e:	232d      	movs	r3, #45	; 0x2d
 80047a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047a4:	4f9b      	ldr	r7, [pc, #620]	; (8004a14 <_printf_float+0x2f0>)
 80047a6:	4b9c      	ldr	r3, [pc, #624]	; (8004a18 <_printf_float+0x2f4>)
 80047a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047ac:	bf98      	it	ls
 80047ae:	461f      	movls	r7, r3
 80047b0:	2303      	movs	r3, #3
 80047b2:	f04f 0900 	mov.w	r9, #0
 80047b6:	6123      	str	r3, [r4, #16]
 80047b8:	f02a 0304 	bic.w	r3, sl, #4
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	9600      	str	r6, [sp, #0]
 80047c0:	465b      	mov	r3, fp
 80047c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80047c4:	4621      	mov	r1, r4
 80047c6:	4628      	mov	r0, r5
 80047c8:	f000 f9e2 	bl	8004b90 <_printf_common>
 80047cc:	3001      	adds	r0, #1
 80047ce:	f040 8090 	bne.w	80048f2 <_printf_float+0x1ce>
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	b011      	add	sp, #68	; 0x44
 80047d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047dc:	463a      	mov	r2, r7
 80047de:	464b      	mov	r3, r9
 80047e0:	4638      	mov	r0, r7
 80047e2:	4649      	mov	r1, r9
 80047e4:	f7fc f91c 	bl	8000a20 <__aeabi_dcmpun>
 80047e8:	b110      	cbz	r0, 80047f0 <_printf_float+0xcc>
 80047ea:	4f8c      	ldr	r7, [pc, #560]	; (8004a1c <_printf_float+0x2f8>)
 80047ec:	4b8c      	ldr	r3, [pc, #560]	; (8004a20 <_printf_float+0x2fc>)
 80047ee:	e7db      	b.n	80047a8 <_printf_float+0x84>
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	a80d      	add	r0, sp, #52	; 0x34
 80047fa:	a90e      	add	r1, sp, #56	; 0x38
 80047fc:	d140      	bne.n	8004880 <_printf_float+0x15c>
 80047fe:	2306      	movs	r3, #6
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	f04f 0c00 	mov.w	ip, #0
 8004806:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800480a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800480e:	6863      	ldr	r3, [r4, #4]
 8004810:	6022      	str	r2, [r4, #0]
 8004812:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	463a      	mov	r2, r7
 800481a:	464b      	mov	r3, r9
 800481c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004820:	4628      	mov	r0, r5
 8004822:	f7ff feed 	bl	8004600 <__cvt>
 8004826:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800482a:	2b47      	cmp	r3, #71	; 0x47
 800482c:	4607      	mov	r7, r0
 800482e:	d109      	bne.n	8004844 <_printf_float+0x120>
 8004830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004832:	1cd8      	adds	r0, r3, #3
 8004834:	db02      	blt.n	800483c <_printf_float+0x118>
 8004836:	6862      	ldr	r2, [r4, #4]
 8004838:	4293      	cmp	r3, r2
 800483a:	dd47      	ble.n	80048cc <_printf_float+0x1a8>
 800483c:	f1a8 0802 	sub.w	r8, r8, #2
 8004840:	fa5f f888 	uxtb.w	r8, r8
 8004844:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004848:	990d      	ldr	r1, [sp, #52]	; 0x34
 800484a:	d824      	bhi.n	8004896 <_printf_float+0x172>
 800484c:	3901      	subs	r1, #1
 800484e:	4642      	mov	r2, r8
 8004850:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004854:	910d      	str	r1, [sp, #52]	; 0x34
 8004856:	f7ff ff2f 	bl	80046b8 <__exponent>
 800485a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800485c:	4681      	mov	r9, r0
 800485e:	1813      	adds	r3, r2, r0
 8004860:	2a01      	cmp	r2, #1
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	dc02      	bgt.n	800486c <_printf_float+0x148>
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	07d1      	lsls	r1, r2, #31
 800486a:	d501      	bpl.n	8004870 <_printf_float+0x14c>
 800486c:	3301      	adds	r3, #1
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0a2      	beq.n	80047be <_printf_float+0x9a>
 8004878:	232d      	movs	r3, #45	; 0x2d
 800487a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487e:	e79e      	b.n	80047be <_printf_float+0x9a>
 8004880:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004884:	f000 816e 	beq.w	8004b64 <_printf_float+0x440>
 8004888:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800488c:	d1b9      	bne.n	8004802 <_printf_float+0xde>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1b7      	bne.n	8004802 <_printf_float+0xde>
 8004892:	2301      	movs	r3, #1
 8004894:	e7b4      	b.n	8004800 <_printf_float+0xdc>
 8004896:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800489a:	d119      	bne.n	80048d0 <_printf_float+0x1ac>
 800489c:	2900      	cmp	r1, #0
 800489e:	6863      	ldr	r3, [r4, #4]
 80048a0:	dd0c      	ble.n	80048bc <_printf_float+0x198>
 80048a2:	6121      	str	r1, [r4, #16]
 80048a4:	b913      	cbnz	r3, 80048ac <_printf_float+0x188>
 80048a6:	6822      	ldr	r2, [r4, #0]
 80048a8:	07d2      	lsls	r2, r2, #31
 80048aa:	d502      	bpl.n	80048b2 <_printf_float+0x18e>
 80048ac:	3301      	adds	r3, #1
 80048ae:	440b      	add	r3, r1
 80048b0:	6123      	str	r3, [r4, #16]
 80048b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048b4:	f04f 0900 	mov.w	r9, #0
 80048b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80048ba:	e7d9      	b.n	8004870 <_printf_float+0x14c>
 80048bc:	b913      	cbnz	r3, 80048c4 <_printf_float+0x1a0>
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	07d0      	lsls	r0, r2, #31
 80048c2:	d501      	bpl.n	80048c8 <_printf_float+0x1a4>
 80048c4:	3302      	adds	r3, #2
 80048c6:	e7f3      	b.n	80048b0 <_printf_float+0x18c>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e7f1      	b.n	80048b0 <_printf_float+0x18c>
 80048cc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80048d0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80048d4:	4293      	cmp	r3, r2
 80048d6:	db05      	blt.n	80048e4 <_printf_float+0x1c0>
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	07d1      	lsls	r1, r2, #31
 80048de:	d5e8      	bpl.n	80048b2 <_printf_float+0x18e>
 80048e0:	3301      	adds	r3, #1
 80048e2:	e7e5      	b.n	80048b0 <_printf_float+0x18c>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfcc      	ite	gt
 80048e8:	2301      	movgt	r3, #1
 80048ea:	f1c3 0302 	rsble	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	e7de      	b.n	80048b0 <_printf_float+0x18c>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	055a      	lsls	r2, r3, #21
 80048f6:	d407      	bmi.n	8004908 <_printf_float+0x1e4>
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	463a      	mov	r2, r7
 80048fc:	4659      	mov	r1, fp
 80048fe:	4628      	mov	r0, r5
 8004900:	47b0      	blx	r6
 8004902:	3001      	adds	r0, #1
 8004904:	d129      	bne.n	800495a <_printf_float+0x236>
 8004906:	e764      	b.n	80047d2 <_printf_float+0xae>
 8004908:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800490c:	f240 80d7 	bls.w	8004abe <_printf_float+0x39a>
 8004910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004914:	2200      	movs	r2, #0
 8004916:	2300      	movs	r3, #0
 8004918:	f7fc f850 	bl	80009bc <__aeabi_dcmpeq>
 800491c:	b388      	cbz	r0, 8004982 <_printf_float+0x25e>
 800491e:	2301      	movs	r3, #1
 8004920:	4a40      	ldr	r2, [pc, #256]	; (8004a24 <_printf_float+0x300>)
 8004922:	4659      	mov	r1, fp
 8004924:	4628      	mov	r0, r5
 8004926:	47b0      	blx	r6
 8004928:	3001      	adds	r0, #1
 800492a:	f43f af52 	beq.w	80047d2 <_printf_float+0xae>
 800492e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004932:	429a      	cmp	r2, r3
 8004934:	db02      	blt.n	800493c <_printf_float+0x218>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	07d8      	lsls	r0, r3, #31
 800493a:	d50e      	bpl.n	800495a <_printf_float+0x236>
 800493c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004940:	4659      	mov	r1, fp
 8004942:	4628      	mov	r0, r5
 8004944:	47b0      	blx	r6
 8004946:	3001      	adds	r0, #1
 8004948:	f43f af43 	beq.w	80047d2 <_printf_float+0xae>
 800494c:	2700      	movs	r7, #0
 800494e:	f104 081a 	add.w	r8, r4, #26
 8004952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004954:	3b01      	subs	r3, #1
 8004956:	42bb      	cmp	r3, r7
 8004958:	dc09      	bgt.n	800496e <_printf_float+0x24a>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	079f      	lsls	r7, r3, #30
 800495e:	f100 80fd 	bmi.w	8004b5c <_printf_float+0x438>
 8004962:	68e0      	ldr	r0, [r4, #12]
 8004964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004966:	4298      	cmp	r0, r3
 8004968:	bfb8      	it	lt
 800496a:	4618      	movlt	r0, r3
 800496c:	e733      	b.n	80047d6 <_printf_float+0xb2>
 800496e:	2301      	movs	r3, #1
 8004970:	4642      	mov	r2, r8
 8004972:	4659      	mov	r1, fp
 8004974:	4628      	mov	r0, r5
 8004976:	47b0      	blx	r6
 8004978:	3001      	adds	r0, #1
 800497a:	f43f af2a 	beq.w	80047d2 <_printf_float+0xae>
 800497e:	3701      	adds	r7, #1
 8004980:	e7e7      	b.n	8004952 <_printf_float+0x22e>
 8004982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004984:	2b00      	cmp	r3, #0
 8004986:	dc2b      	bgt.n	80049e0 <_printf_float+0x2bc>
 8004988:	2301      	movs	r3, #1
 800498a:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <_printf_float+0x300>)
 800498c:	4659      	mov	r1, fp
 800498e:	4628      	mov	r0, r5
 8004990:	47b0      	blx	r6
 8004992:	3001      	adds	r0, #1
 8004994:	f43f af1d 	beq.w	80047d2 <_printf_float+0xae>
 8004998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800499a:	b923      	cbnz	r3, 80049a6 <_printf_float+0x282>
 800499c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800499e:	b913      	cbnz	r3, 80049a6 <_printf_float+0x282>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	07d9      	lsls	r1, r3, #31
 80049a4:	d5d9      	bpl.n	800495a <_printf_float+0x236>
 80049a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049aa:	4659      	mov	r1, fp
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b0      	blx	r6
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f af0e 	beq.w	80047d2 <_printf_float+0xae>
 80049b6:	f04f 0800 	mov.w	r8, #0
 80049ba:	f104 091a 	add.w	r9, r4, #26
 80049be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049c0:	425b      	negs	r3, r3
 80049c2:	4543      	cmp	r3, r8
 80049c4:	dc01      	bgt.n	80049ca <_printf_float+0x2a6>
 80049c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049c8:	e797      	b.n	80048fa <_printf_float+0x1d6>
 80049ca:	2301      	movs	r3, #1
 80049cc:	464a      	mov	r2, r9
 80049ce:	4659      	mov	r1, fp
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b0      	blx	r6
 80049d4:	3001      	adds	r0, #1
 80049d6:	f43f aefc 	beq.w	80047d2 <_printf_float+0xae>
 80049da:	f108 0801 	add.w	r8, r8, #1
 80049de:	e7ee      	b.n	80049be <_printf_float+0x29a>
 80049e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049e4:	429a      	cmp	r2, r3
 80049e6:	bfa8      	it	ge
 80049e8:	461a      	movge	r2, r3
 80049ea:	2a00      	cmp	r2, #0
 80049ec:	4690      	mov	r8, r2
 80049ee:	dd07      	ble.n	8004a00 <_printf_float+0x2dc>
 80049f0:	4613      	mov	r3, r2
 80049f2:	4659      	mov	r1, fp
 80049f4:	463a      	mov	r2, r7
 80049f6:	4628      	mov	r0, r5
 80049f8:	47b0      	blx	r6
 80049fa:	3001      	adds	r0, #1
 80049fc:	f43f aee9 	beq.w	80047d2 <_printf_float+0xae>
 8004a00:	f104 031a 	add.w	r3, r4, #26
 8004a04:	f04f 0a00 	mov.w	sl, #0
 8004a08:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004a0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a0e:	e015      	b.n	8004a3c <_printf_float+0x318>
 8004a10:	7fefffff 	.word	0x7fefffff
 8004a14:	080072a8 	.word	0x080072a8
 8004a18:	080072a4 	.word	0x080072a4
 8004a1c:	080072b0 	.word	0x080072b0
 8004a20:	080072ac 	.word	0x080072ac
 8004a24:	080072b4 	.word	0x080072b4
 8004a28:	2301      	movs	r3, #1
 8004a2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	4628      	mov	r0, r5
 8004a30:	47b0      	blx	r6
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f aecd 	beq.w	80047d2 <_printf_float+0xae>
 8004a38:	f10a 0a01 	add.w	sl, sl, #1
 8004a3c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004a40:	eba9 0308 	sub.w	r3, r9, r8
 8004a44:	4553      	cmp	r3, sl
 8004a46:	dcef      	bgt.n	8004a28 <_printf_float+0x304>
 8004a48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	444f      	add	r7, r9
 8004a50:	db14      	blt.n	8004a7c <_printf_float+0x358>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	07da      	lsls	r2, r3, #31
 8004a56:	d411      	bmi.n	8004a7c <_printf_float+0x358>
 8004a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a5c:	eba3 0209 	sub.w	r2, r3, r9
 8004a60:	eba3 0901 	sub.w	r9, r3, r1
 8004a64:	4591      	cmp	r9, r2
 8004a66:	bfa8      	it	ge
 8004a68:	4691      	movge	r9, r2
 8004a6a:	f1b9 0f00 	cmp.w	r9, #0
 8004a6e:	dc0d      	bgt.n	8004a8c <_printf_float+0x368>
 8004a70:	2700      	movs	r7, #0
 8004a72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a76:	f104 081a 	add.w	r8, r4, #26
 8004a7a:	e018      	b.n	8004aae <_printf_float+0x38a>
 8004a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a80:	4659      	mov	r1, fp
 8004a82:	4628      	mov	r0, r5
 8004a84:	47b0      	blx	r6
 8004a86:	3001      	adds	r0, #1
 8004a88:	d1e6      	bne.n	8004a58 <_printf_float+0x334>
 8004a8a:	e6a2      	b.n	80047d2 <_printf_float+0xae>
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	463a      	mov	r2, r7
 8004a90:	4659      	mov	r1, fp
 8004a92:	4628      	mov	r0, r5
 8004a94:	47b0      	blx	r6
 8004a96:	3001      	adds	r0, #1
 8004a98:	d1ea      	bne.n	8004a70 <_printf_float+0x34c>
 8004a9a:	e69a      	b.n	80047d2 <_printf_float+0xae>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4642      	mov	r2, r8
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	47b0      	blx	r6
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f43f ae93 	beq.w	80047d2 <_printf_float+0xae>
 8004aac:	3701      	adds	r7, #1
 8004aae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ab2:	1a9b      	subs	r3, r3, r2
 8004ab4:	eba3 0309 	sub.w	r3, r3, r9
 8004ab8:	42bb      	cmp	r3, r7
 8004aba:	dcef      	bgt.n	8004a9c <_printf_float+0x378>
 8004abc:	e74d      	b.n	800495a <_printf_float+0x236>
 8004abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ac0:	2a01      	cmp	r2, #1
 8004ac2:	dc01      	bgt.n	8004ac8 <_printf_float+0x3a4>
 8004ac4:	07db      	lsls	r3, r3, #31
 8004ac6:	d538      	bpl.n	8004b3a <_printf_float+0x416>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	463a      	mov	r2, r7
 8004acc:	4659      	mov	r1, fp
 8004ace:	4628      	mov	r0, r5
 8004ad0:	47b0      	blx	r6
 8004ad2:	3001      	adds	r0, #1
 8004ad4:	f43f ae7d 	beq.w	80047d2 <_printf_float+0xae>
 8004ad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004adc:	4659      	mov	r1, fp
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b0      	blx	r6
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	f107 0701 	add.w	r7, r7, #1
 8004ae8:	f43f ae73 	beq.w	80047d2 <_printf_float+0xae>
 8004aec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af2:	2200      	movs	r2, #0
 8004af4:	f103 38ff 	add.w	r8, r3, #4294967295
 8004af8:	2300      	movs	r3, #0
 8004afa:	f7fb ff5f 	bl	80009bc <__aeabi_dcmpeq>
 8004afe:	b9c0      	cbnz	r0, 8004b32 <_printf_float+0x40e>
 8004b00:	4643      	mov	r3, r8
 8004b02:	463a      	mov	r2, r7
 8004b04:	4659      	mov	r1, fp
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b0      	blx	r6
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d10d      	bne.n	8004b2a <_printf_float+0x406>
 8004b0e:	e660      	b.n	80047d2 <_printf_float+0xae>
 8004b10:	2301      	movs	r3, #1
 8004b12:	4642      	mov	r2, r8
 8004b14:	4659      	mov	r1, fp
 8004b16:	4628      	mov	r0, r5
 8004b18:	47b0      	blx	r6
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	f43f ae59 	beq.w	80047d2 <_printf_float+0xae>
 8004b20:	3701      	adds	r7, #1
 8004b22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b24:	3b01      	subs	r3, #1
 8004b26:	42bb      	cmp	r3, r7
 8004b28:	dcf2      	bgt.n	8004b10 <_printf_float+0x3ec>
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b30:	e6e4      	b.n	80048fc <_printf_float+0x1d8>
 8004b32:	2700      	movs	r7, #0
 8004b34:	f104 081a 	add.w	r8, r4, #26
 8004b38:	e7f3      	b.n	8004b22 <_printf_float+0x3fe>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e7e1      	b.n	8004b02 <_printf_float+0x3de>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	4642      	mov	r2, r8
 8004b42:	4659      	mov	r1, fp
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b0      	blx	r6
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f43f ae42 	beq.w	80047d2 <_printf_float+0xae>
 8004b4e:	3701      	adds	r7, #1
 8004b50:	68e3      	ldr	r3, [r4, #12]
 8004b52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	42bb      	cmp	r3, r7
 8004b58:	dcf1      	bgt.n	8004b3e <_printf_float+0x41a>
 8004b5a:	e702      	b.n	8004962 <_printf_float+0x23e>
 8004b5c:	2700      	movs	r7, #0
 8004b5e:	f104 0819 	add.w	r8, r4, #25
 8004b62:	e7f5      	b.n	8004b50 <_printf_float+0x42c>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f43f ae94 	beq.w	8004892 <_printf_float+0x16e>
 8004b6a:	f04f 0c00 	mov.w	ip, #0
 8004b6e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004b72:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004b76:	6022      	str	r2, [r4, #0]
 8004b78:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004b7c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	463a      	mov	r2, r7
 8004b84:	464b      	mov	r3, r9
 8004b86:	4628      	mov	r0, r5
 8004b88:	f7ff fd3a 	bl	8004600 <__cvt>
 8004b8c:	4607      	mov	r7, r0
 8004b8e:	e64f      	b.n	8004830 <_printf_float+0x10c>

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4691      	mov	r9, r2
 8004b96:	461f      	mov	r7, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	bfb8      	it	lt
 8004ba2:	4613      	movlt	r3, r2
 8004ba4:	f8c9 3000 	str.w	r3, [r9]
 8004ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bac:	460c      	mov	r4, r1
 8004bae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bb2:	b112      	cbz	r2, 8004bba <_printf_common+0x2a>
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f8c9 3000 	str.w	r3, [r9]
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	0699      	lsls	r1, r3, #26
 8004bbe:	bf42      	ittt	mi
 8004bc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bc4:	3302      	addmi	r3, #2
 8004bc6:	f8c9 3000 	strmi.w	r3, [r9]
 8004bca:	6825      	ldr	r5, [r4, #0]
 8004bcc:	f015 0506 	ands.w	r5, r5, #6
 8004bd0:	d107      	bne.n	8004be2 <_printf_common+0x52>
 8004bd2:	f104 0a19 	add.w	sl, r4, #25
 8004bd6:	68e3      	ldr	r3, [r4, #12]
 8004bd8:	f8d9 2000 	ldr.w	r2, [r9]
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	42ab      	cmp	r3, r5
 8004be0:	dc29      	bgt.n	8004c36 <_printf_common+0xa6>
 8004be2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004be6:	6822      	ldr	r2, [r4, #0]
 8004be8:	3300      	adds	r3, #0
 8004bea:	bf18      	it	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	0692      	lsls	r2, r2, #26
 8004bf0:	d42e      	bmi.n	8004c50 <_printf_common+0xc0>
 8004bf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	47c0      	blx	r8
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d021      	beq.n	8004c44 <_printf_common+0xb4>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	68e5      	ldr	r5, [r4, #12]
 8004c04:	f003 0306 	and.w	r3, r3, #6
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	bf18      	it	ne
 8004c0c:	2500      	movne	r5, #0
 8004c0e:	f8d9 2000 	ldr.w	r2, [r9]
 8004c12:	f04f 0900 	mov.w	r9, #0
 8004c16:	bf08      	it	eq
 8004c18:	1aad      	subeq	r5, r5, r2
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	6922      	ldr	r2, [r4, #16]
 8004c1e:	bf08      	it	eq
 8004c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bfc4      	itt	gt
 8004c28:	1a9b      	subgt	r3, r3, r2
 8004c2a:	18ed      	addgt	r5, r5, r3
 8004c2c:	341a      	adds	r4, #26
 8004c2e:	454d      	cmp	r5, r9
 8004c30:	d11a      	bne.n	8004c68 <_printf_common+0xd8>
 8004c32:	2000      	movs	r0, #0
 8004c34:	e008      	b.n	8004c48 <_printf_common+0xb8>
 8004c36:	2301      	movs	r3, #1
 8004c38:	4652      	mov	r2, sl
 8004c3a:	4639      	mov	r1, r7
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	47c0      	blx	r8
 8004c40:	3001      	adds	r0, #1
 8004c42:	d103      	bne.n	8004c4c <_printf_common+0xbc>
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4c:	3501      	adds	r5, #1
 8004c4e:	e7c2      	b.n	8004bd6 <_printf_common+0x46>
 8004c50:	2030      	movs	r0, #48	; 0x30
 8004c52:	18e1      	adds	r1, r4, r3
 8004c54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c5e:	4422      	add	r2, r4
 8004c60:	3302      	adds	r3, #2
 8004c62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c66:	e7c4      	b.n	8004bf2 <_printf_common+0x62>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4639      	mov	r1, r7
 8004c6e:	4630      	mov	r0, r6
 8004c70:	47c0      	blx	r8
 8004c72:	3001      	adds	r0, #1
 8004c74:	d0e6      	beq.n	8004c44 <_printf_common+0xb4>
 8004c76:	f109 0901 	add.w	r9, r9, #1
 8004c7a:	e7d8      	b.n	8004c2e <_printf_common+0x9e>

08004c7c <_printf_i>:
 8004c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c84:	460c      	mov	r4, r1
 8004c86:	7e09      	ldrb	r1, [r1, #24]
 8004c88:	b085      	sub	sp, #20
 8004c8a:	296e      	cmp	r1, #110	; 0x6e
 8004c8c:	4617      	mov	r7, r2
 8004c8e:	4606      	mov	r6, r0
 8004c90:	4698      	mov	r8, r3
 8004c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c94:	f000 80b3 	beq.w	8004dfe <_printf_i+0x182>
 8004c98:	d822      	bhi.n	8004ce0 <_printf_i+0x64>
 8004c9a:	2963      	cmp	r1, #99	; 0x63
 8004c9c:	d036      	beq.n	8004d0c <_printf_i+0x90>
 8004c9e:	d80a      	bhi.n	8004cb6 <_printf_i+0x3a>
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	f000 80b9 	beq.w	8004e18 <_printf_i+0x19c>
 8004ca6:	2958      	cmp	r1, #88	; 0x58
 8004ca8:	f000 8083 	beq.w	8004db2 <_printf_i+0x136>
 8004cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004cb4:	e032      	b.n	8004d1c <_printf_i+0xa0>
 8004cb6:	2964      	cmp	r1, #100	; 0x64
 8004cb8:	d001      	beq.n	8004cbe <_printf_i+0x42>
 8004cba:	2969      	cmp	r1, #105	; 0x69
 8004cbc:	d1f6      	bne.n	8004cac <_printf_i+0x30>
 8004cbe:	6820      	ldr	r0, [r4, #0]
 8004cc0:	6813      	ldr	r3, [r2, #0]
 8004cc2:	0605      	lsls	r5, r0, #24
 8004cc4:	f103 0104 	add.w	r1, r3, #4
 8004cc8:	d52a      	bpl.n	8004d20 <_printf_i+0xa4>
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6011      	str	r1, [r2, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da03      	bge.n	8004cda <_printf_i+0x5e>
 8004cd2:	222d      	movs	r2, #45	; 0x2d
 8004cd4:	425b      	negs	r3, r3
 8004cd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004cda:	486f      	ldr	r0, [pc, #444]	; (8004e98 <_printf_i+0x21c>)
 8004cdc:	220a      	movs	r2, #10
 8004cde:	e039      	b.n	8004d54 <_printf_i+0xd8>
 8004ce0:	2973      	cmp	r1, #115	; 0x73
 8004ce2:	f000 809d 	beq.w	8004e20 <_printf_i+0x1a4>
 8004ce6:	d808      	bhi.n	8004cfa <_printf_i+0x7e>
 8004ce8:	296f      	cmp	r1, #111	; 0x6f
 8004cea:	d020      	beq.n	8004d2e <_printf_i+0xb2>
 8004cec:	2970      	cmp	r1, #112	; 0x70
 8004cee:	d1dd      	bne.n	8004cac <_printf_i+0x30>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	f043 0320 	orr.w	r3, r3, #32
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	e003      	b.n	8004d02 <_printf_i+0x86>
 8004cfa:	2975      	cmp	r1, #117	; 0x75
 8004cfc:	d017      	beq.n	8004d2e <_printf_i+0xb2>
 8004cfe:	2978      	cmp	r1, #120	; 0x78
 8004d00:	d1d4      	bne.n	8004cac <_printf_i+0x30>
 8004d02:	2378      	movs	r3, #120	; 0x78
 8004d04:	4865      	ldr	r0, [pc, #404]	; (8004e9c <_printf_i+0x220>)
 8004d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d0a:	e055      	b.n	8004db8 <_printf_i+0x13c>
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d12:	1d19      	adds	r1, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6011      	str	r1, [r2, #0]
 8004d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e08c      	b.n	8004e3a <_printf_i+0x1be>
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d26:	6011      	str	r1, [r2, #0]
 8004d28:	bf18      	it	ne
 8004d2a:	b21b      	sxthne	r3, r3
 8004d2c:	e7cf      	b.n	8004cce <_printf_i+0x52>
 8004d2e:	6813      	ldr	r3, [r2, #0]
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	1d18      	adds	r0, r3, #4
 8004d34:	6010      	str	r0, [r2, #0]
 8004d36:	0628      	lsls	r0, r5, #24
 8004d38:	d501      	bpl.n	8004d3e <_printf_i+0xc2>
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	e002      	b.n	8004d44 <_printf_i+0xc8>
 8004d3e:	0668      	lsls	r0, r5, #25
 8004d40:	d5fb      	bpl.n	8004d3a <_printf_i+0xbe>
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	296f      	cmp	r1, #111	; 0x6f
 8004d46:	bf14      	ite	ne
 8004d48:	220a      	movne	r2, #10
 8004d4a:	2208      	moveq	r2, #8
 8004d4c:	4852      	ldr	r0, [pc, #328]	; (8004e98 <_printf_i+0x21c>)
 8004d4e:	2100      	movs	r1, #0
 8004d50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d54:	6865      	ldr	r5, [r4, #4]
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	60a5      	str	r5, [r4, #8]
 8004d5a:	f2c0 8095 	blt.w	8004e88 <_printf_i+0x20c>
 8004d5e:	6821      	ldr	r1, [r4, #0]
 8004d60:	f021 0104 	bic.w	r1, r1, #4
 8004d64:	6021      	str	r1, [r4, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d13d      	bne.n	8004de6 <_printf_i+0x16a>
 8004d6a:	2d00      	cmp	r5, #0
 8004d6c:	f040 808e 	bne.w	8004e8c <_printf_i+0x210>
 8004d70:	4665      	mov	r5, ip
 8004d72:	2a08      	cmp	r2, #8
 8004d74:	d10b      	bne.n	8004d8e <_printf_i+0x112>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	07db      	lsls	r3, r3, #31
 8004d7a:	d508      	bpl.n	8004d8e <_printf_i+0x112>
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	6862      	ldr	r2, [r4, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	bfde      	ittt	le
 8004d84:	2330      	movle	r3, #48	; 0x30
 8004d86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d8e:	ebac 0305 	sub.w	r3, ip, r5
 8004d92:	6123      	str	r3, [r4, #16]
 8004d94:	f8cd 8000 	str.w	r8, [sp]
 8004d98:	463b      	mov	r3, r7
 8004d9a:	aa03      	add	r2, sp, #12
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f7ff fef6 	bl	8004b90 <_printf_common>
 8004da4:	3001      	adds	r0, #1
 8004da6:	d14d      	bne.n	8004e44 <_printf_i+0x1c8>
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	b005      	add	sp, #20
 8004dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004db2:	4839      	ldr	r0, [pc, #228]	; (8004e98 <_printf_i+0x21c>)
 8004db4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004db8:	6813      	ldr	r3, [r2, #0]
 8004dba:	6821      	ldr	r1, [r4, #0]
 8004dbc:	1d1d      	adds	r5, r3, #4
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6015      	str	r5, [r2, #0]
 8004dc2:	060a      	lsls	r2, r1, #24
 8004dc4:	d50b      	bpl.n	8004dde <_printf_i+0x162>
 8004dc6:	07ca      	lsls	r2, r1, #31
 8004dc8:	bf44      	itt	mi
 8004dca:	f041 0120 	orrmi.w	r1, r1, #32
 8004dce:	6021      	strmi	r1, [r4, #0]
 8004dd0:	b91b      	cbnz	r3, 8004dda <_printf_i+0x15e>
 8004dd2:	6822      	ldr	r2, [r4, #0]
 8004dd4:	f022 0220 	bic.w	r2, r2, #32
 8004dd8:	6022      	str	r2, [r4, #0]
 8004dda:	2210      	movs	r2, #16
 8004ddc:	e7b7      	b.n	8004d4e <_printf_i+0xd2>
 8004dde:	064d      	lsls	r5, r1, #25
 8004de0:	bf48      	it	mi
 8004de2:	b29b      	uxthmi	r3, r3
 8004de4:	e7ef      	b.n	8004dc6 <_printf_i+0x14a>
 8004de6:	4665      	mov	r5, ip
 8004de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dec:	fb02 3311 	mls	r3, r2, r1, r3
 8004df0:	5cc3      	ldrb	r3, [r0, r3]
 8004df2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004df6:	460b      	mov	r3, r1
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	d1f5      	bne.n	8004de8 <_printf_i+0x16c>
 8004dfc:	e7b9      	b.n	8004d72 <_printf_i+0xf6>
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	6825      	ldr	r5, [r4, #0]
 8004e02:	1d18      	adds	r0, r3, #4
 8004e04:	6961      	ldr	r1, [r4, #20]
 8004e06:	6010      	str	r0, [r2, #0]
 8004e08:	0628      	lsls	r0, r5, #24
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	d501      	bpl.n	8004e12 <_printf_i+0x196>
 8004e0e:	6019      	str	r1, [r3, #0]
 8004e10:	e002      	b.n	8004e18 <_printf_i+0x19c>
 8004e12:	066a      	lsls	r2, r5, #25
 8004e14:	d5fb      	bpl.n	8004e0e <_printf_i+0x192>
 8004e16:	8019      	strh	r1, [r3, #0]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	4665      	mov	r5, ip
 8004e1c:	6123      	str	r3, [r4, #16]
 8004e1e:	e7b9      	b.n	8004d94 <_printf_i+0x118>
 8004e20:	6813      	ldr	r3, [r2, #0]
 8004e22:	1d19      	adds	r1, r3, #4
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	681d      	ldr	r5, [r3, #0]
 8004e28:	6862      	ldr	r2, [r4, #4]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f001 fa67 	bl	8006300 <memchr>
 8004e32:	b108      	cbz	r0, 8004e38 <_printf_i+0x1bc>
 8004e34:	1b40      	subs	r0, r0, r5
 8004e36:	6060      	str	r0, [r4, #4]
 8004e38:	6863      	ldr	r3, [r4, #4]
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e42:	e7a7      	b.n	8004d94 <_printf_i+0x118>
 8004e44:	6923      	ldr	r3, [r4, #16]
 8004e46:	462a      	mov	r2, r5
 8004e48:	4639      	mov	r1, r7
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	47c0      	blx	r8
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d0aa      	beq.n	8004da8 <_printf_i+0x12c>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	079b      	lsls	r3, r3, #30
 8004e56:	d413      	bmi.n	8004e80 <_printf_i+0x204>
 8004e58:	68e0      	ldr	r0, [r4, #12]
 8004e5a:	9b03      	ldr	r3, [sp, #12]
 8004e5c:	4298      	cmp	r0, r3
 8004e5e:	bfb8      	it	lt
 8004e60:	4618      	movlt	r0, r3
 8004e62:	e7a3      	b.n	8004dac <_printf_i+0x130>
 8004e64:	2301      	movs	r3, #1
 8004e66:	464a      	mov	r2, r9
 8004e68:	4639      	mov	r1, r7
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	47c0      	blx	r8
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d09a      	beq.n	8004da8 <_printf_i+0x12c>
 8004e72:	3501      	adds	r5, #1
 8004e74:	68e3      	ldr	r3, [r4, #12]
 8004e76:	9a03      	ldr	r2, [sp, #12]
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	42ab      	cmp	r3, r5
 8004e7c:	dcf2      	bgt.n	8004e64 <_printf_i+0x1e8>
 8004e7e:	e7eb      	b.n	8004e58 <_printf_i+0x1dc>
 8004e80:	2500      	movs	r5, #0
 8004e82:	f104 0919 	add.w	r9, r4, #25
 8004e86:	e7f5      	b.n	8004e74 <_printf_i+0x1f8>
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ac      	bne.n	8004de6 <_printf_i+0x16a>
 8004e8c:	7803      	ldrb	r3, [r0, #0]
 8004e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e96:	e76c      	b.n	8004d72 <_printf_i+0xf6>
 8004e98:	080072b6 	.word	0x080072b6
 8004e9c:	080072c7 	.word	0x080072c7

08004ea0 <iprintf>:
 8004ea0:	b40f      	push	{r0, r1, r2, r3}
 8004ea2:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <iprintf+0x2c>)
 8004ea4:	b513      	push	{r0, r1, r4, lr}
 8004ea6:	681c      	ldr	r4, [r3, #0]
 8004ea8:	b124      	cbz	r4, 8004eb4 <iprintf+0x14>
 8004eaa:	69a3      	ldr	r3, [r4, #24]
 8004eac:	b913      	cbnz	r3, 8004eb4 <iprintf+0x14>
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f001 f922 	bl	80060f8 <__sinit>
 8004eb4:	ab05      	add	r3, sp, #20
 8004eb6:	9a04      	ldr	r2, [sp, #16]
 8004eb8:	68a1      	ldr	r1, [r4, #8]
 8004eba:	4620      	mov	r0, r4
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	f001 fd8b 	bl	80069d8 <_vfiprintf_r>
 8004ec2:	b002      	add	sp, #8
 8004ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ec8:	b004      	add	sp, #16
 8004eca:	4770      	bx	lr
 8004ecc:	20000018 	.word	0x20000018

08004ed0 <_puts_r>:
 8004ed0:	b570      	push	{r4, r5, r6, lr}
 8004ed2:	460e      	mov	r6, r1
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	b118      	cbz	r0, 8004ee0 <_puts_r+0x10>
 8004ed8:	6983      	ldr	r3, [r0, #24]
 8004eda:	b90b      	cbnz	r3, 8004ee0 <_puts_r+0x10>
 8004edc:	f001 f90c 	bl	80060f8 <__sinit>
 8004ee0:	69ab      	ldr	r3, [r5, #24]
 8004ee2:	68ac      	ldr	r4, [r5, #8]
 8004ee4:	b913      	cbnz	r3, 8004eec <_puts_r+0x1c>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f001 f906 	bl	80060f8 <__sinit>
 8004eec:	4b23      	ldr	r3, [pc, #140]	; (8004f7c <_puts_r+0xac>)
 8004eee:	429c      	cmp	r4, r3
 8004ef0:	d117      	bne.n	8004f22 <_puts_r+0x52>
 8004ef2:	686c      	ldr	r4, [r5, #4]
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	071b      	lsls	r3, r3, #28
 8004ef8:	d51d      	bpl.n	8004f36 <_puts_r+0x66>
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	b1db      	cbz	r3, 8004f36 <_puts_r+0x66>
 8004efe:	3e01      	subs	r6, #1
 8004f00:	68a3      	ldr	r3, [r4, #8]
 8004f02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f06:	3b01      	subs	r3, #1
 8004f08:	60a3      	str	r3, [r4, #8]
 8004f0a:	b9e9      	cbnz	r1, 8004f48 <_puts_r+0x78>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	da2e      	bge.n	8004f6e <_puts_r+0x9e>
 8004f10:	4622      	mov	r2, r4
 8004f12:	210a      	movs	r1, #10
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 f8fd 	bl	8005114 <__swbuf_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d011      	beq.n	8004f42 <_puts_r+0x72>
 8004f1e:	200a      	movs	r0, #10
 8004f20:	e011      	b.n	8004f46 <_puts_r+0x76>
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <_puts_r+0xb0>)
 8004f24:	429c      	cmp	r4, r3
 8004f26:	d101      	bne.n	8004f2c <_puts_r+0x5c>
 8004f28:	68ac      	ldr	r4, [r5, #8]
 8004f2a:	e7e3      	b.n	8004ef4 <_puts_r+0x24>
 8004f2c:	4b15      	ldr	r3, [pc, #84]	; (8004f84 <_puts_r+0xb4>)
 8004f2e:	429c      	cmp	r4, r3
 8004f30:	bf08      	it	eq
 8004f32:	68ec      	ldreq	r4, [r5, #12]
 8004f34:	e7de      	b.n	8004ef4 <_puts_r+0x24>
 8004f36:	4621      	mov	r1, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 f93d 	bl	80051b8 <__swsetup_r>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d0dd      	beq.n	8004efe <_puts_r+0x2e>
 8004f42:	f04f 30ff 	mov.w	r0, #4294967295
 8004f46:	bd70      	pop	{r4, r5, r6, pc}
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	da04      	bge.n	8004f56 <_puts_r+0x86>
 8004f4c:	69a2      	ldr	r2, [r4, #24]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	dc06      	bgt.n	8004f60 <_puts_r+0x90>
 8004f52:	290a      	cmp	r1, #10
 8004f54:	d004      	beq.n	8004f60 <_puts_r+0x90>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	6022      	str	r2, [r4, #0]
 8004f5c:	7019      	strb	r1, [r3, #0]
 8004f5e:	e7cf      	b.n	8004f00 <_puts_r+0x30>
 8004f60:	4622      	mov	r2, r4
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 f8d6 	bl	8005114 <__swbuf_r>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d1c9      	bne.n	8004f00 <_puts_r+0x30>
 8004f6c:	e7e9      	b.n	8004f42 <_puts_r+0x72>
 8004f6e:	200a      	movs	r0, #10
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	6022      	str	r2, [r4, #0]
 8004f76:	7018      	strb	r0, [r3, #0]
 8004f78:	e7e5      	b.n	8004f46 <_puts_r+0x76>
 8004f7a:	bf00      	nop
 8004f7c:	08007308 	.word	0x08007308
 8004f80:	08007328 	.word	0x08007328
 8004f84:	080072e8 	.word	0x080072e8

08004f88 <puts>:
 8004f88:	4b02      	ldr	r3, [pc, #8]	; (8004f94 <puts+0xc>)
 8004f8a:	4601      	mov	r1, r0
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	f7ff bf9f 	b.w	8004ed0 <_puts_r>
 8004f92:	bf00      	nop
 8004f94:	20000018 	.word	0x20000018

08004f98 <_sbrk_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4c05      	ldr	r4, [pc, #20]	; (8004fb4 <_sbrk_r+0x1c>)
 8004f9e:	4605      	mov	r5, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	f7fd f8ca 	bl	800213c <_sbrk>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_sbrk_r+0x1a>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_sbrk_r+0x1a>
 8004fb0:	602b      	str	r3, [r5, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	20000404 	.word	0x20000404

08004fb8 <setvbuf>:
 8004fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fbc:	461d      	mov	r5, r3
 8004fbe:	4b51      	ldr	r3, [pc, #324]	; (8005104 <setvbuf+0x14c>)
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	681e      	ldr	r6, [r3, #0]
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	4690      	mov	r8, r2
 8004fc8:	b126      	cbz	r6, 8004fd4 <setvbuf+0x1c>
 8004fca:	69b3      	ldr	r3, [r6, #24]
 8004fcc:	b913      	cbnz	r3, 8004fd4 <setvbuf+0x1c>
 8004fce:	4630      	mov	r0, r6
 8004fd0:	f001 f892 	bl	80060f8 <__sinit>
 8004fd4:	4b4c      	ldr	r3, [pc, #304]	; (8005108 <setvbuf+0x150>)
 8004fd6:	429c      	cmp	r4, r3
 8004fd8:	d152      	bne.n	8005080 <setvbuf+0xc8>
 8004fda:	6874      	ldr	r4, [r6, #4]
 8004fdc:	f1b8 0f02 	cmp.w	r8, #2
 8004fe0:	d006      	beq.n	8004ff0 <setvbuf+0x38>
 8004fe2:	f1b8 0f01 	cmp.w	r8, #1
 8004fe6:	f200 8089 	bhi.w	80050fc <setvbuf+0x144>
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	f2c0 8086 	blt.w	80050fc <setvbuf+0x144>
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f001 f816 	bl	8006024 <_fflush_r>
 8004ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ffa:	b141      	cbz	r1, 800500e <setvbuf+0x56>
 8004ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005000:	4299      	cmp	r1, r3
 8005002:	d002      	beq.n	800500a <setvbuf+0x52>
 8005004:	4630      	mov	r0, r6
 8005006:	f001 fc73 	bl	80068f0 <_free_r>
 800500a:	2300      	movs	r3, #0
 800500c:	6363      	str	r3, [r4, #52]	; 0x34
 800500e:	2300      	movs	r3, #0
 8005010:	61a3      	str	r3, [r4, #24]
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	89a3      	ldrh	r3, [r4, #12]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	d503      	bpl.n	8005022 <setvbuf+0x6a>
 800501a:	6921      	ldr	r1, [r4, #16]
 800501c:	4630      	mov	r0, r6
 800501e:	f001 fc67 	bl	80068f0 <_free_r>
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	f1b8 0f02 	cmp.w	r8, #2
 8005028:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	81a3      	strh	r3, [r4, #12]
 8005032:	d05d      	beq.n	80050f0 <setvbuf+0x138>
 8005034:	ab01      	add	r3, sp, #4
 8005036:	466a      	mov	r2, sp
 8005038:	4621      	mov	r1, r4
 800503a:	4630      	mov	r0, r6
 800503c:	f001 f8f4 	bl	8006228 <__swhatbuf_r>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	4318      	orrs	r0, r3
 8005044:	81a0      	strh	r0, [r4, #12]
 8005046:	bb2d      	cbnz	r5, 8005094 <setvbuf+0xdc>
 8005048:	9d00      	ldr	r5, [sp, #0]
 800504a:	4628      	mov	r0, r5
 800504c:	f001 f950 	bl	80062f0 <malloc>
 8005050:	4607      	mov	r7, r0
 8005052:	2800      	cmp	r0, #0
 8005054:	d14e      	bne.n	80050f4 <setvbuf+0x13c>
 8005056:	f8dd 9000 	ldr.w	r9, [sp]
 800505a:	45a9      	cmp	r9, r5
 800505c:	d13c      	bne.n	80050d8 <setvbuf+0x120>
 800505e:	f04f 30ff 	mov.w	r0, #4294967295
 8005062:	89a3      	ldrh	r3, [r4, #12]
 8005064:	f043 0302 	orr.w	r3, r3, #2
 8005068:	81a3      	strh	r3, [r4, #12]
 800506a:	2300      	movs	r3, #0
 800506c:	60a3      	str	r3, [r4, #8]
 800506e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	2301      	movs	r3, #1
 8005078:	6163      	str	r3, [r4, #20]
 800507a:	b003      	add	sp, #12
 800507c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005080:	4b22      	ldr	r3, [pc, #136]	; (800510c <setvbuf+0x154>)
 8005082:	429c      	cmp	r4, r3
 8005084:	d101      	bne.n	800508a <setvbuf+0xd2>
 8005086:	68b4      	ldr	r4, [r6, #8]
 8005088:	e7a8      	b.n	8004fdc <setvbuf+0x24>
 800508a:	4b21      	ldr	r3, [pc, #132]	; (8005110 <setvbuf+0x158>)
 800508c:	429c      	cmp	r4, r3
 800508e:	bf08      	it	eq
 8005090:	68f4      	ldreq	r4, [r6, #12]
 8005092:	e7a3      	b.n	8004fdc <setvbuf+0x24>
 8005094:	2f00      	cmp	r7, #0
 8005096:	d0d8      	beq.n	800504a <setvbuf+0x92>
 8005098:	69b3      	ldr	r3, [r6, #24]
 800509a:	b913      	cbnz	r3, 80050a2 <setvbuf+0xea>
 800509c:	4630      	mov	r0, r6
 800509e:	f001 f82b 	bl	80060f8 <__sinit>
 80050a2:	f1b8 0f01 	cmp.w	r8, #1
 80050a6:	bf08      	it	eq
 80050a8:	89a3      	ldrheq	r3, [r4, #12]
 80050aa:	6027      	str	r7, [r4, #0]
 80050ac:	bf04      	itt	eq
 80050ae:	f043 0301 	orreq.w	r3, r3, #1
 80050b2:	81a3      	strheq	r3, [r4, #12]
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80050ba:	f013 0008 	ands.w	r0, r3, #8
 80050be:	d01b      	beq.n	80050f8 <setvbuf+0x140>
 80050c0:	f013 0001 	ands.w	r0, r3, #1
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	bf1f      	itttt	ne
 80050ca:	426d      	negne	r5, r5
 80050cc:	60a3      	strne	r3, [r4, #8]
 80050ce:	61a5      	strne	r5, [r4, #24]
 80050d0:	4618      	movne	r0, r3
 80050d2:	bf08      	it	eq
 80050d4:	60a5      	streq	r5, [r4, #8]
 80050d6:	e7d0      	b.n	800507a <setvbuf+0xc2>
 80050d8:	4648      	mov	r0, r9
 80050da:	f001 f909 	bl	80062f0 <malloc>
 80050de:	4607      	mov	r7, r0
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d0bc      	beq.n	800505e <setvbuf+0xa6>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	464d      	mov	r5, r9
 80050e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	e7d3      	b.n	8005098 <setvbuf+0xe0>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e7b6      	b.n	8005062 <setvbuf+0xaa>
 80050f4:	46a9      	mov	r9, r5
 80050f6:	e7f5      	b.n	80050e4 <setvbuf+0x12c>
 80050f8:	60a0      	str	r0, [r4, #8]
 80050fa:	e7be      	b.n	800507a <setvbuf+0xc2>
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	e7bb      	b.n	800507a <setvbuf+0xc2>
 8005102:	bf00      	nop
 8005104:	20000018 	.word	0x20000018
 8005108:	08007308 	.word	0x08007308
 800510c:	08007328 	.word	0x08007328
 8005110:	080072e8 	.word	0x080072e8

08005114 <__swbuf_r>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	460e      	mov	r6, r1
 8005118:	4614      	mov	r4, r2
 800511a:	4605      	mov	r5, r0
 800511c:	b118      	cbz	r0, 8005126 <__swbuf_r+0x12>
 800511e:	6983      	ldr	r3, [r0, #24]
 8005120:	b90b      	cbnz	r3, 8005126 <__swbuf_r+0x12>
 8005122:	f000 ffe9 	bl	80060f8 <__sinit>
 8005126:	4b21      	ldr	r3, [pc, #132]	; (80051ac <__swbuf_r+0x98>)
 8005128:	429c      	cmp	r4, r3
 800512a:	d12a      	bne.n	8005182 <__swbuf_r+0x6e>
 800512c:	686c      	ldr	r4, [r5, #4]
 800512e:	69a3      	ldr	r3, [r4, #24]
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	071a      	lsls	r2, r3, #28
 8005136:	d52e      	bpl.n	8005196 <__swbuf_r+0x82>
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	b363      	cbz	r3, 8005196 <__swbuf_r+0x82>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	b2f6      	uxtb	r6, r6
 8005142:	1ac0      	subs	r0, r0, r3
 8005144:	6963      	ldr	r3, [r4, #20]
 8005146:	4637      	mov	r7, r6
 8005148:	4283      	cmp	r3, r0
 800514a:	dc04      	bgt.n	8005156 <__swbuf_r+0x42>
 800514c:	4621      	mov	r1, r4
 800514e:	4628      	mov	r0, r5
 8005150:	f000 ff68 	bl	8006024 <_fflush_r>
 8005154:	bb28      	cbnz	r0, 80051a2 <__swbuf_r+0x8e>
 8005156:	68a3      	ldr	r3, [r4, #8]
 8005158:	3001      	adds	r0, #1
 800515a:	3b01      	subs	r3, #1
 800515c:	60a3      	str	r3, [r4, #8]
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	6022      	str	r2, [r4, #0]
 8005164:	701e      	strb	r6, [r3, #0]
 8005166:	6963      	ldr	r3, [r4, #20]
 8005168:	4283      	cmp	r3, r0
 800516a:	d004      	beq.n	8005176 <__swbuf_r+0x62>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	07db      	lsls	r3, r3, #31
 8005170:	d519      	bpl.n	80051a6 <__swbuf_r+0x92>
 8005172:	2e0a      	cmp	r6, #10
 8005174:	d117      	bne.n	80051a6 <__swbuf_r+0x92>
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 ff53 	bl	8006024 <_fflush_r>
 800517e:	b190      	cbz	r0, 80051a6 <__swbuf_r+0x92>
 8005180:	e00f      	b.n	80051a2 <__swbuf_r+0x8e>
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <__swbuf_r+0x9c>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d101      	bne.n	800518c <__swbuf_r+0x78>
 8005188:	68ac      	ldr	r4, [r5, #8]
 800518a:	e7d0      	b.n	800512e <__swbuf_r+0x1a>
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <__swbuf_r+0xa0>)
 800518e:	429c      	cmp	r4, r3
 8005190:	bf08      	it	eq
 8005192:	68ec      	ldreq	r4, [r5, #12]
 8005194:	e7cb      	b.n	800512e <__swbuf_r+0x1a>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f80d 	bl	80051b8 <__swsetup_r>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d0cc      	beq.n	800513c <__swbuf_r+0x28>
 80051a2:	f04f 37ff 	mov.w	r7, #4294967295
 80051a6:	4638      	mov	r0, r7
 80051a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051aa:	bf00      	nop
 80051ac:	08007308 	.word	0x08007308
 80051b0:	08007328 	.word	0x08007328
 80051b4:	080072e8 	.word	0x080072e8

080051b8 <__swsetup_r>:
 80051b8:	4b32      	ldr	r3, [pc, #200]	; (8005284 <__swsetup_r+0xcc>)
 80051ba:	b570      	push	{r4, r5, r6, lr}
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	4606      	mov	r6, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	b125      	cbz	r5, 80051ce <__swsetup_r+0x16>
 80051c4:	69ab      	ldr	r3, [r5, #24]
 80051c6:	b913      	cbnz	r3, 80051ce <__swsetup_r+0x16>
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 ff95 	bl	80060f8 <__sinit>
 80051ce:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <__swsetup_r+0xd0>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d10f      	bne.n	80051f4 <__swsetup_r+0x3c>
 80051d4:	686c      	ldr	r4, [r5, #4]
 80051d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	0715      	lsls	r5, r2, #28
 80051de:	d42c      	bmi.n	800523a <__swsetup_r+0x82>
 80051e0:	06d0      	lsls	r0, r2, #27
 80051e2:	d411      	bmi.n	8005208 <__swsetup_r+0x50>
 80051e4:	2209      	movs	r2, #9
 80051e6:	6032      	str	r2, [r6, #0]
 80051e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	f04f 30ff 	mov.w	r0, #4294967295
 80051f2:	e03e      	b.n	8005272 <__swsetup_r+0xba>
 80051f4:	4b25      	ldr	r3, [pc, #148]	; (800528c <__swsetup_r+0xd4>)
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d101      	bne.n	80051fe <__swsetup_r+0x46>
 80051fa:	68ac      	ldr	r4, [r5, #8]
 80051fc:	e7eb      	b.n	80051d6 <__swsetup_r+0x1e>
 80051fe:	4b24      	ldr	r3, [pc, #144]	; (8005290 <__swsetup_r+0xd8>)
 8005200:	429c      	cmp	r4, r3
 8005202:	bf08      	it	eq
 8005204:	68ec      	ldreq	r4, [r5, #12]
 8005206:	e7e6      	b.n	80051d6 <__swsetup_r+0x1e>
 8005208:	0751      	lsls	r1, r2, #29
 800520a:	d512      	bpl.n	8005232 <__swsetup_r+0x7a>
 800520c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800520e:	b141      	cbz	r1, 8005222 <__swsetup_r+0x6a>
 8005210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005214:	4299      	cmp	r1, r3
 8005216:	d002      	beq.n	800521e <__swsetup_r+0x66>
 8005218:	4630      	mov	r0, r6
 800521a:	f001 fb69 	bl	80068f0 <_free_r>
 800521e:	2300      	movs	r3, #0
 8005220:	6363      	str	r3, [r4, #52]	; 0x34
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005228:	81a3      	strh	r3, [r4, #12]
 800522a:	2300      	movs	r3, #0
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f043 0308 	orr.w	r3, r3, #8
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	b94b      	cbnz	r3, 8005252 <__swsetup_r+0x9a>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005248:	d003      	beq.n	8005252 <__swsetup_r+0x9a>
 800524a:	4621      	mov	r1, r4
 800524c:	4630      	mov	r0, r6
 800524e:	f001 f80f 	bl	8006270 <__smakebuf_r>
 8005252:	89a2      	ldrh	r2, [r4, #12]
 8005254:	f012 0301 	ands.w	r3, r2, #1
 8005258:	d00c      	beq.n	8005274 <__swsetup_r+0xbc>
 800525a:	2300      	movs	r3, #0
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	6963      	ldr	r3, [r4, #20]
 8005260:	425b      	negs	r3, r3
 8005262:	61a3      	str	r3, [r4, #24]
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	b953      	cbnz	r3, 800527e <__swsetup_r+0xc6>
 8005268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005270:	d1ba      	bne.n	80051e8 <__swsetup_r+0x30>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	0792      	lsls	r2, r2, #30
 8005276:	bf58      	it	pl
 8005278:	6963      	ldrpl	r3, [r4, #20]
 800527a:	60a3      	str	r3, [r4, #8]
 800527c:	e7f2      	b.n	8005264 <__swsetup_r+0xac>
 800527e:	2000      	movs	r0, #0
 8005280:	e7f7      	b.n	8005272 <__swsetup_r+0xba>
 8005282:	bf00      	nop
 8005284:	20000018 	.word	0x20000018
 8005288:	08007308 	.word	0x08007308
 800528c:	08007328 	.word	0x08007328
 8005290:	080072e8 	.word	0x080072e8

08005294 <quorem>:
 8005294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005298:	6903      	ldr	r3, [r0, #16]
 800529a:	690c      	ldr	r4, [r1, #16]
 800529c:	4680      	mov	r8, r0
 800529e:	42a3      	cmp	r3, r4
 80052a0:	f2c0 8084 	blt.w	80053ac <quorem+0x118>
 80052a4:	3c01      	subs	r4, #1
 80052a6:	f101 0714 	add.w	r7, r1, #20
 80052aa:	f100 0614 	add.w	r6, r0, #20
 80052ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052b6:	3501      	adds	r5, #1
 80052b8:	fbb0 f5f5 	udiv	r5, r0, r5
 80052bc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052c0:	eb06 030c 	add.w	r3, r6, ip
 80052c4:	eb07 090c 	add.w	r9, r7, ip
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	b39d      	cbz	r5, 8005334 <quorem+0xa0>
 80052cc:	f04f 0a00 	mov.w	sl, #0
 80052d0:	4638      	mov	r0, r7
 80052d2:	46b6      	mov	lr, r6
 80052d4:	46d3      	mov	fp, sl
 80052d6:	f850 2b04 	ldr.w	r2, [r0], #4
 80052da:	b293      	uxth	r3, r2
 80052dc:	fb05 a303 	mla	r3, r5, r3, sl
 80052e0:	0c12      	lsrs	r2, r2, #16
 80052e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052e6:	fb05 a202 	mla	r2, r5, r2, sl
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	ebab 0303 	sub.w	r3, fp, r3
 80052f0:	f8de b000 	ldr.w	fp, [lr]
 80052f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80052f8:	fa1f fb8b 	uxth.w	fp, fp
 80052fc:	445b      	add	r3, fp
 80052fe:	fa1f fb82 	uxth.w	fp, r2
 8005302:	f8de 2000 	ldr.w	r2, [lr]
 8005306:	4581      	cmp	r9, r0
 8005308:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800530c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005310:	b29b      	uxth	r3, r3
 8005312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005316:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800531a:	f84e 3b04 	str.w	r3, [lr], #4
 800531e:	d2da      	bcs.n	80052d6 <quorem+0x42>
 8005320:	f856 300c 	ldr.w	r3, [r6, ip]
 8005324:	b933      	cbnz	r3, 8005334 <quorem+0xa0>
 8005326:	9b01      	ldr	r3, [sp, #4]
 8005328:	3b04      	subs	r3, #4
 800532a:	429e      	cmp	r6, r3
 800532c:	461a      	mov	r2, r3
 800532e:	d331      	bcc.n	8005394 <quorem+0x100>
 8005330:	f8c8 4010 	str.w	r4, [r8, #16]
 8005334:	4640      	mov	r0, r8
 8005336:	f001 fa13 	bl	8006760 <__mcmp>
 800533a:	2800      	cmp	r0, #0
 800533c:	db26      	blt.n	800538c <quorem+0xf8>
 800533e:	4630      	mov	r0, r6
 8005340:	f04f 0c00 	mov.w	ip, #0
 8005344:	3501      	adds	r5, #1
 8005346:	f857 1b04 	ldr.w	r1, [r7], #4
 800534a:	f8d0 e000 	ldr.w	lr, [r0]
 800534e:	b28b      	uxth	r3, r1
 8005350:	ebac 0303 	sub.w	r3, ip, r3
 8005354:	fa1f f28e 	uxth.w	r2, lr
 8005358:	4413      	add	r3, r2
 800535a:	0c0a      	lsrs	r2, r1, #16
 800535c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005364:	b29b      	uxth	r3, r3
 8005366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800536a:	45b9      	cmp	r9, r7
 800536c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005370:	f840 3b04 	str.w	r3, [r0], #4
 8005374:	d2e7      	bcs.n	8005346 <quorem+0xb2>
 8005376:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800537a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800537e:	b92a      	cbnz	r2, 800538c <quorem+0xf8>
 8005380:	3b04      	subs	r3, #4
 8005382:	429e      	cmp	r6, r3
 8005384:	461a      	mov	r2, r3
 8005386:	d30b      	bcc.n	80053a0 <quorem+0x10c>
 8005388:	f8c8 4010 	str.w	r4, [r8, #16]
 800538c:	4628      	mov	r0, r5
 800538e:	b003      	add	sp, #12
 8005390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	3b04      	subs	r3, #4
 8005398:	2a00      	cmp	r2, #0
 800539a:	d1c9      	bne.n	8005330 <quorem+0x9c>
 800539c:	3c01      	subs	r4, #1
 800539e:	e7c4      	b.n	800532a <quorem+0x96>
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	3b04      	subs	r3, #4
 80053a4:	2a00      	cmp	r2, #0
 80053a6:	d1ef      	bne.n	8005388 <quorem+0xf4>
 80053a8:	3c01      	subs	r4, #1
 80053aa:	e7ea      	b.n	8005382 <quorem+0xee>
 80053ac:	2000      	movs	r0, #0
 80053ae:	e7ee      	b.n	800538e <quorem+0xfa>

080053b0 <_dtoa_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	4616      	mov	r6, r2
 80053b6:	461f      	mov	r7, r3
 80053b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053ba:	b095      	sub	sp, #84	; 0x54
 80053bc:	4604      	mov	r4, r0
 80053be:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80053c2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053c6:	b93d      	cbnz	r5, 80053d8 <_dtoa_r+0x28>
 80053c8:	2010      	movs	r0, #16
 80053ca:	f000 ff91 	bl	80062f0 <malloc>
 80053ce:	6260      	str	r0, [r4, #36]	; 0x24
 80053d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053d4:	6005      	str	r5, [r0, #0]
 80053d6:	60c5      	str	r5, [r0, #12]
 80053d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	b151      	cbz	r1, 80053f4 <_dtoa_r+0x44>
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	2301      	movs	r3, #1
 80053e2:	4093      	lsls	r3, r2
 80053e4:	604a      	str	r2, [r1, #4]
 80053e6:	608b      	str	r3, [r1, #8]
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 ffd8 	bl	800639e <_Bfree>
 80053ee:	2200      	movs	r2, #0
 80053f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	1e3b      	subs	r3, r7, #0
 80053f6:	bfaf      	iteee	ge
 80053f8:	2300      	movge	r3, #0
 80053fa:	2201      	movlt	r2, #1
 80053fc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005400:	9303      	strlt	r3, [sp, #12]
 8005402:	bfac      	ite	ge
 8005404:	f8c8 3000 	strge.w	r3, [r8]
 8005408:	f8c8 2000 	strlt.w	r2, [r8]
 800540c:	4bae      	ldr	r3, [pc, #696]	; (80056c8 <_dtoa_r+0x318>)
 800540e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005412:	ea33 0308 	bics.w	r3, r3, r8
 8005416:	d11b      	bne.n	8005450 <_dtoa_r+0xa0>
 8005418:	f242 730f 	movw	r3, #9999	; 0x270f
 800541c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	9b02      	ldr	r3, [sp, #8]
 8005422:	b923      	cbnz	r3, 800542e <_dtoa_r+0x7e>
 8005424:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005428:	2800      	cmp	r0, #0
 800542a:	f000 8545 	beq.w	8005eb8 <_dtoa_r+0xb08>
 800542e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005430:	b953      	cbnz	r3, 8005448 <_dtoa_r+0x98>
 8005432:	4ba6      	ldr	r3, [pc, #664]	; (80056cc <_dtoa_r+0x31c>)
 8005434:	e021      	b.n	800547a <_dtoa_r+0xca>
 8005436:	4ba6      	ldr	r3, [pc, #664]	; (80056d0 <_dtoa_r+0x320>)
 8005438:	9306      	str	r3, [sp, #24]
 800543a:	3308      	adds	r3, #8
 800543c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	9806      	ldr	r0, [sp, #24]
 8005442:	b015      	add	sp, #84	; 0x54
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005448:	4ba0      	ldr	r3, [pc, #640]	; (80056cc <_dtoa_r+0x31c>)
 800544a:	9306      	str	r3, [sp, #24]
 800544c:	3303      	adds	r3, #3
 800544e:	e7f5      	b.n	800543c <_dtoa_r+0x8c>
 8005450:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	2300      	movs	r3, #0
 8005458:	4630      	mov	r0, r6
 800545a:	4639      	mov	r1, r7
 800545c:	f7fb faae 	bl	80009bc <__aeabi_dcmpeq>
 8005460:	4682      	mov	sl, r0
 8005462:	b160      	cbz	r0, 800547e <_dtoa_r+0xce>
 8005464:	2301      	movs	r3, #1
 8005466:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8520 	beq.w	8005eb2 <_dtoa_r+0xb02>
 8005472:	4b98      	ldr	r3, [pc, #608]	; (80056d4 <_dtoa_r+0x324>)
 8005474:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	3b01      	subs	r3, #1
 800547a:	9306      	str	r3, [sp, #24]
 800547c:	e7e0      	b.n	8005440 <_dtoa_r+0x90>
 800547e:	ab12      	add	r3, sp, #72	; 0x48
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	ab13      	add	r3, sp, #76	; 0x4c
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	4632      	mov	r2, r6
 8005488:	463b      	mov	r3, r7
 800548a:	4620      	mov	r0, r4
 800548c:	f001 f9e0 	bl	8006850 <__d2b>
 8005490:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005494:	4683      	mov	fp, r0
 8005496:	2d00      	cmp	r5, #0
 8005498:	d07d      	beq.n	8005596 <_dtoa_r+0x1e6>
 800549a:	46b0      	mov	r8, r6
 800549c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054a0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80054a4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80054a8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054ac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80054b0:	2200      	movs	r2, #0
 80054b2:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <_dtoa_r+0x328>)
 80054b4:	4640      	mov	r0, r8
 80054b6:	4649      	mov	r1, r9
 80054b8:	f7fa fe60 	bl	800017c <__aeabi_dsub>
 80054bc:	a37c      	add	r3, pc, #496	; (adr r3, 80056b0 <_dtoa_r+0x300>)
 80054be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c2:	f7fb f813 	bl	80004ec <__aeabi_dmul>
 80054c6:	a37c      	add	r3, pc, #496	; (adr r3, 80056b8 <_dtoa_r+0x308>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	f7fa fe58 	bl	8000180 <__adddf3>
 80054d0:	4606      	mov	r6, r0
 80054d2:	4628      	mov	r0, r5
 80054d4:	460f      	mov	r7, r1
 80054d6:	f7fa ff9f 	bl	8000418 <__aeabi_i2d>
 80054da:	a379      	add	r3, pc, #484	; (adr r3, 80056c0 <_dtoa_r+0x310>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fb f804 	bl	80004ec <__aeabi_dmul>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4630      	mov	r0, r6
 80054ea:	4639      	mov	r1, r7
 80054ec:	f7fa fe48 	bl	8000180 <__adddf3>
 80054f0:	4606      	mov	r6, r0
 80054f2:	460f      	mov	r7, r1
 80054f4:	f7fb faaa 	bl	8000a4c <__aeabi_d2iz>
 80054f8:	2200      	movs	r2, #0
 80054fa:	4682      	mov	sl, r0
 80054fc:	2300      	movs	r3, #0
 80054fe:	4630      	mov	r0, r6
 8005500:	4639      	mov	r1, r7
 8005502:	f7fb fa65 	bl	80009d0 <__aeabi_dcmplt>
 8005506:	b148      	cbz	r0, 800551c <_dtoa_r+0x16c>
 8005508:	4650      	mov	r0, sl
 800550a:	f7fa ff85 	bl	8000418 <__aeabi_i2d>
 800550e:	4632      	mov	r2, r6
 8005510:	463b      	mov	r3, r7
 8005512:	f7fb fa53 	bl	80009bc <__aeabi_dcmpeq>
 8005516:	b908      	cbnz	r0, 800551c <_dtoa_r+0x16c>
 8005518:	f10a 3aff 	add.w	sl, sl, #4294967295
 800551c:	f1ba 0f16 	cmp.w	sl, #22
 8005520:	d85a      	bhi.n	80055d8 <_dtoa_r+0x228>
 8005522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005526:	496d      	ldr	r1, [pc, #436]	; (80056dc <_dtoa_r+0x32c>)
 8005528:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800552c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005530:	f7fb fa6c 	bl	8000a0c <__aeabi_dcmpgt>
 8005534:	2800      	cmp	r0, #0
 8005536:	d051      	beq.n	80055dc <_dtoa_r+0x22c>
 8005538:	2300      	movs	r3, #0
 800553a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800553e:	930d      	str	r3, [sp, #52]	; 0x34
 8005540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005542:	1b5d      	subs	r5, r3, r5
 8005544:	1e6b      	subs	r3, r5, #1
 8005546:	9307      	str	r3, [sp, #28]
 8005548:	bf43      	ittte	mi
 800554a:	2300      	movmi	r3, #0
 800554c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005550:	9307      	strmi	r3, [sp, #28]
 8005552:	f04f 0900 	movpl.w	r9, #0
 8005556:	f1ba 0f00 	cmp.w	sl, #0
 800555a:	db41      	blt.n	80055e0 <_dtoa_r+0x230>
 800555c:	9b07      	ldr	r3, [sp, #28]
 800555e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005562:	4453      	add	r3, sl
 8005564:	9307      	str	r3, [sp, #28]
 8005566:	2300      	movs	r3, #0
 8005568:	9308      	str	r3, [sp, #32]
 800556a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800556c:	2b09      	cmp	r3, #9
 800556e:	f200 808f 	bhi.w	8005690 <_dtoa_r+0x2e0>
 8005572:	2b05      	cmp	r3, #5
 8005574:	bfc4      	itt	gt
 8005576:	3b04      	subgt	r3, #4
 8005578:	931e      	strgt	r3, [sp, #120]	; 0x78
 800557a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800557c:	bfc8      	it	gt
 800557e:	2500      	movgt	r5, #0
 8005580:	f1a3 0302 	sub.w	r3, r3, #2
 8005584:	bfd8      	it	le
 8005586:	2501      	movle	r5, #1
 8005588:	2b03      	cmp	r3, #3
 800558a:	f200 808d 	bhi.w	80056a8 <_dtoa_r+0x2f8>
 800558e:	e8df f003 	tbb	[pc, r3]
 8005592:	7d7b      	.short	0x7d7b
 8005594:	6f2f      	.short	0x6f2f
 8005596:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800559a:	441d      	add	r5, r3
 800559c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055a0:	2820      	cmp	r0, #32
 80055a2:	dd13      	ble.n	80055cc <_dtoa_r+0x21c>
 80055a4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055a8:	9b02      	ldr	r3, [sp, #8]
 80055aa:	fa08 f800 	lsl.w	r8, r8, r0
 80055ae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80055b2:	fa23 f000 	lsr.w	r0, r3, r0
 80055b6:	ea48 0000 	orr.w	r0, r8, r0
 80055ba:	f7fa ff1d 	bl	80003f8 <__aeabi_ui2d>
 80055be:	2301      	movs	r3, #1
 80055c0:	4680      	mov	r8, r0
 80055c2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80055c6:	3d01      	subs	r5, #1
 80055c8:	9310      	str	r3, [sp, #64]	; 0x40
 80055ca:	e771      	b.n	80054b0 <_dtoa_r+0x100>
 80055cc:	9b02      	ldr	r3, [sp, #8]
 80055ce:	f1c0 0020 	rsb	r0, r0, #32
 80055d2:	fa03 f000 	lsl.w	r0, r3, r0
 80055d6:	e7f0      	b.n	80055ba <_dtoa_r+0x20a>
 80055d8:	2301      	movs	r3, #1
 80055da:	e7b0      	b.n	800553e <_dtoa_r+0x18e>
 80055dc:	900d      	str	r0, [sp, #52]	; 0x34
 80055de:	e7af      	b.n	8005540 <_dtoa_r+0x190>
 80055e0:	f1ca 0300 	rsb	r3, sl, #0
 80055e4:	9308      	str	r3, [sp, #32]
 80055e6:	2300      	movs	r3, #0
 80055e8:	eba9 090a 	sub.w	r9, r9, sl
 80055ec:	930c      	str	r3, [sp, #48]	; 0x30
 80055ee:	e7bc      	b.n	800556a <_dtoa_r+0x1ba>
 80055f0:	2301      	movs	r3, #1
 80055f2:	9309      	str	r3, [sp, #36]	; 0x24
 80055f4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	dd74      	ble.n	80056e4 <_dtoa_r+0x334>
 80055fa:	4698      	mov	r8, r3
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	2200      	movs	r2, #0
 8005600:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005602:	6072      	str	r2, [r6, #4]
 8005604:	2204      	movs	r2, #4
 8005606:	f102 0014 	add.w	r0, r2, #20
 800560a:	4298      	cmp	r0, r3
 800560c:	6871      	ldr	r1, [r6, #4]
 800560e:	d96e      	bls.n	80056ee <_dtoa_r+0x33e>
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fe90 	bl	8006336 <_Balloc>
 8005616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005618:	6030      	str	r0, [r6, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f1b8 0f0e 	cmp.w	r8, #14
 8005620:	9306      	str	r3, [sp, #24]
 8005622:	f200 80ed 	bhi.w	8005800 <_dtoa_r+0x450>
 8005626:	2d00      	cmp	r5, #0
 8005628:	f000 80ea 	beq.w	8005800 <_dtoa_r+0x450>
 800562c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005630:	f1ba 0f00 	cmp.w	sl, #0
 8005634:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005638:	dd77      	ble.n	800572a <_dtoa_r+0x37a>
 800563a:	4a28      	ldr	r2, [pc, #160]	; (80056dc <_dtoa_r+0x32c>)
 800563c:	f00a 030f 	and.w	r3, sl, #15
 8005640:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005644:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005648:	06f0      	lsls	r0, r6, #27
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005652:	d568      	bpl.n	8005726 <_dtoa_r+0x376>
 8005654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005658:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <_dtoa_r+0x330>)
 800565a:	2503      	movs	r5, #3
 800565c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005660:	f7fb f86e 	bl	8000740 <__aeabi_ddiv>
 8005664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005668:	f006 060f 	and.w	r6, r6, #15
 800566c:	4f1c      	ldr	r7, [pc, #112]	; (80056e0 <_dtoa_r+0x330>)
 800566e:	e04f      	b.n	8005710 <_dtoa_r+0x360>
 8005670:	2301      	movs	r3, #1
 8005672:	9309      	str	r3, [sp, #36]	; 0x24
 8005674:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005676:	4453      	add	r3, sl
 8005678:	f103 0801 	add.w	r8, r3, #1
 800567c:	9304      	str	r3, [sp, #16]
 800567e:	4643      	mov	r3, r8
 8005680:	2b01      	cmp	r3, #1
 8005682:	bfb8      	it	lt
 8005684:	2301      	movlt	r3, #1
 8005686:	e7ba      	b.n	80055fe <_dtoa_r+0x24e>
 8005688:	2300      	movs	r3, #0
 800568a:	e7b2      	b.n	80055f2 <_dtoa_r+0x242>
 800568c:	2300      	movs	r3, #0
 800568e:	e7f0      	b.n	8005672 <_dtoa_r+0x2c2>
 8005690:	2501      	movs	r5, #1
 8005692:	2300      	movs	r3, #0
 8005694:	9509      	str	r5, [sp, #36]	; 0x24
 8005696:	931e      	str	r3, [sp, #120]	; 0x78
 8005698:	f04f 33ff 	mov.w	r3, #4294967295
 800569c:	2200      	movs	r2, #0
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	4698      	mov	r8, r3
 80056a2:	2312      	movs	r3, #18
 80056a4:	921f      	str	r2, [sp, #124]	; 0x7c
 80056a6:	e7aa      	b.n	80055fe <_dtoa_r+0x24e>
 80056a8:	2301      	movs	r3, #1
 80056aa:	9309      	str	r3, [sp, #36]	; 0x24
 80056ac:	e7f4      	b.n	8005698 <_dtoa_r+0x2e8>
 80056ae:	bf00      	nop
 80056b0:	636f4361 	.word	0x636f4361
 80056b4:	3fd287a7 	.word	0x3fd287a7
 80056b8:	8b60c8b3 	.word	0x8b60c8b3
 80056bc:	3fc68a28 	.word	0x3fc68a28
 80056c0:	509f79fb 	.word	0x509f79fb
 80056c4:	3fd34413 	.word	0x3fd34413
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	080072e1 	.word	0x080072e1
 80056d0:	080072d8 	.word	0x080072d8
 80056d4:	080072b5 	.word	0x080072b5
 80056d8:	3ff80000 	.word	0x3ff80000
 80056dc:	08007370 	.word	0x08007370
 80056e0:	08007348 	.word	0x08007348
 80056e4:	2301      	movs	r3, #1
 80056e6:	9304      	str	r3, [sp, #16]
 80056e8:	4698      	mov	r8, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	e7da      	b.n	80056a4 <_dtoa_r+0x2f4>
 80056ee:	3101      	adds	r1, #1
 80056f0:	6071      	str	r1, [r6, #4]
 80056f2:	0052      	lsls	r2, r2, #1
 80056f4:	e787      	b.n	8005606 <_dtoa_r+0x256>
 80056f6:	07f1      	lsls	r1, r6, #31
 80056f8:	d508      	bpl.n	800570c <_dtoa_r+0x35c>
 80056fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005702:	f7fa fef3 	bl	80004ec <__aeabi_dmul>
 8005706:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800570a:	3501      	adds	r5, #1
 800570c:	1076      	asrs	r6, r6, #1
 800570e:	3708      	adds	r7, #8
 8005710:	2e00      	cmp	r6, #0
 8005712:	d1f0      	bne.n	80056f6 <_dtoa_r+0x346>
 8005714:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800571c:	f7fb f810 	bl	8000740 <__aeabi_ddiv>
 8005720:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005724:	e01b      	b.n	800575e <_dtoa_r+0x3ae>
 8005726:	2502      	movs	r5, #2
 8005728:	e7a0      	b.n	800566c <_dtoa_r+0x2bc>
 800572a:	f000 80a4 	beq.w	8005876 <_dtoa_r+0x4c6>
 800572e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005732:	f1ca 0600 	rsb	r6, sl, #0
 8005736:	4ba0      	ldr	r3, [pc, #640]	; (80059b8 <_dtoa_r+0x608>)
 8005738:	f006 020f 	and.w	r2, r6, #15
 800573c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005744:	f7fa fed2 	bl	80004ec <__aeabi_dmul>
 8005748:	2502      	movs	r5, #2
 800574a:	2300      	movs	r3, #0
 800574c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005750:	4f9a      	ldr	r7, [pc, #616]	; (80059bc <_dtoa_r+0x60c>)
 8005752:	1136      	asrs	r6, r6, #4
 8005754:	2e00      	cmp	r6, #0
 8005756:	f040 8083 	bne.w	8005860 <_dtoa_r+0x4b0>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e0      	bne.n	8005720 <_dtoa_r+0x370>
 800575e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 808a 	beq.w	800587a <_dtoa_r+0x4ca>
 8005766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800576a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800576e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005772:	2200      	movs	r2, #0
 8005774:	4b92      	ldr	r3, [pc, #584]	; (80059c0 <_dtoa_r+0x610>)
 8005776:	f7fb f92b 	bl	80009d0 <__aeabi_dcmplt>
 800577a:	2800      	cmp	r0, #0
 800577c:	d07d      	beq.n	800587a <_dtoa_r+0x4ca>
 800577e:	f1b8 0f00 	cmp.w	r8, #0
 8005782:	d07a      	beq.n	800587a <_dtoa_r+0x4ca>
 8005784:	9b04      	ldr	r3, [sp, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	dd36      	ble.n	80057f8 <_dtoa_r+0x448>
 800578a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800578e:	2200      	movs	r2, #0
 8005790:	4b8c      	ldr	r3, [pc, #560]	; (80059c4 <_dtoa_r+0x614>)
 8005792:	f7fa feab 	bl	80004ec <__aeabi_dmul>
 8005796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800579a:	9e04      	ldr	r6, [sp, #16]
 800579c:	f10a 37ff 	add.w	r7, sl, #4294967295
 80057a0:	3501      	adds	r5, #1
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7fa fe38 	bl	8000418 <__aeabi_i2d>
 80057a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057ac:	f7fa fe9e 	bl	80004ec <__aeabi_dmul>
 80057b0:	2200      	movs	r2, #0
 80057b2:	4b85      	ldr	r3, [pc, #532]	; (80059c8 <_dtoa_r+0x618>)
 80057b4:	f7fa fce4 	bl	8000180 <__adddf3>
 80057b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80057bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d15c      	bne.n	8005880 <_dtoa_r+0x4d0>
 80057c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ca:	2200      	movs	r2, #0
 80057cc:	4b7f      	ldr	r3, [pc, #508]	; (80059cc <_dtoa_r+0x61c>)
 80057ce:	f7fa fcd5 	bl	800017c <__aeabi_dsub>
 80057d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d4:	462b      	mov	r3, r5
 80057d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057da:	f7fb f917 	bl	8000a0c <__aeabi_dcmpgt>
 80057de:	2800      	cmp	r0, #0
 80057e0:	f040 8281 	bne.w	8005ce6 <_dtoa_r+0x936>
 80057e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80057ee:	f7fb f8ef 	bl	80009d0 <__aeabi_dcmplt>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	f040 8275 	bne.w	8005ce2 <_dtoa_r+0x932>
 80057f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80057fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005800:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005802:	2b00      	cmp	r3, #0
 8005804:	f2c0 814b 	blt.w	8005a9e <_dtoa_r+0x6ee>
 8005808:	f1ba 0f0e 	cmp.w	sl, #14
 800580c:	f300 8147 	bgt.w	8005a9e <_dtoa_r+0x6ee>
 8005810:	4b69      	ldr	r3, [pc, #420]	; (80059b8 <_dtoa_r+0x608>)
 8005812:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800581e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f280 80d7 	bge.w	80059d4 <_dtoa_r+0x624>
 8005826:	f1b8 0f00 	cmp.w	r8, #0
 800582a:	f300 80d3 	bgt.w	80059d4 <_dtoa_r+0x624>
 800582e:	f040 8257 	bne.w	8005ce0 <_dtoa_r+0x930>
 8005832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005836:	2200      	movs	r2, #0
 8005838:	4b64      	ldr	r3, [pc, #400]	; (80059cc <_dtoa_r+0x61c>)
 800583a:	f7fa fe57 	bl	80004ec <__aeabi_dmul>
 800583e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005842:	f7fb f8d9 	bl	80009f8 <__aeabi_dcmpge>
 8005846:	4646      	mov	r6, r8
 8005848:	4647      	mov	r7, r8
 800584a:	2800      	cmp	r0, #0
 800584c:	f040 822d 	bne.w	8005caa <_dtoa_r+0x8fa>
 8005850:	9b06      	ldr	r3, [sp, #24]
 8005852:	9a06      	ldr	r2, [sp, #24]
 8005854:	1c5d      	adds	r5, r3, #1
 8005856:	2331      	movs	r3, #49	; 0x31
 8005858:	f10a 0a01 	add.w	sl, sl, #1
 800585c:	7013      	strb	r3, [r2, #0]
 800585e:	e228      	b.n	8005cb2 <_dtoa_r+0x902>
 8005860:	07f2      	lsls	r2, r6, #31
 8005862:	d505      	bpl.n	8005870 <_dtoa_r+0x4c0>
 8005864:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005868:	f7fa fe40 	bl	80004ec <__aeabi_dmul>
 800586c:	2301      	movs	r3, #1
 800586e:	3501      	adds	r5, #1
 8005870:	1076      	asrs	r6, r6, #1
 8005872:	3708      	adds	r7, #8
 8005874:	e76e      	b.n	8005754 <_dtoa_r+0x3a4>
 8005876:	2502      	movs	r5, #2
 8005878:	e771      	b.n	800575e <_dtoa_r+0x3ae>
 800587a:	4657      	mov	r7, sl
 800587c:	4646      	mov	r6, r8
 800587e:	e790      	b.n	80057a2 <_dtoa_r+0x3f2>
 8005880:	4b4d      	ldr	r3, [pc, #308]	; (80059b8 <_dtoa_r+0x608>)
 8005882:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005886:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d048      	beq.n	8005922 <_dtoa_r+0x572>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	2000      	movs	r0, #0
 8005896:	494e      	ldr	r1, [pc, #312]	; (80059d0 <_dtoa_r+0x620>)
 8005898:	f7fa ff52 	bl	8000740 <__aeabi_ddiv>
 800589c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058a0:	f7fa fc6c 	bl	800017c <__aeabi_dsub>
 80058a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80058a8:	9d06      	ldr	r5, [sp, #24]
 80058aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ae:	f7fb f8cd 	bl	8000a4c <__aeabi_d2iz>
 80058b2:	9011      	str	r0, [sp, #68]	; 0x44
 80058b4:	f7fa fdb0 	bl	8000418 <__aeabi_i2d>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058c0:	f7fa fc5c 	bl	800017c <__aeabi_dsub>
 80058c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ca:	3330      	adds	r3, #48	; 0x30
 80058cc:	f805 3b01 	strb.w	r3, [r5], #1
 80058d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058d4:	f7fb f87c 	bl	80009d0 <__aeabi_dcmplt>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d163      	bne.n	80059a4 <_dtoa_r+0x5f4>
 80058dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058e0:	2000      	movs	r0, #0
 80058e2:	4937      	ldr	r1, [pc, #220]	; (80059c0 <_dtoa_r+0x610>)
 80058e4:	f7fa fc4a 	bl	800017c <__aeabi_dsub>
 80058e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058ec:	f7fb f870 	bl	80009d0 <__aeabi_dcmplt>
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f040 80b5 	bne.w	8005a60 <_dtoa_r+0x6b0>
 80058f6:	9b06      	ldr	r3, [sp, #24]
 80058f8:	1aeb      	subs	r3, r5, r3
 80058fa:	429e      	cmp	r6, r3
 80058fc:	f77f af7c 	ble.w	80057f8 <_dtoa_r+0x448>
 8005900:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005904:	2200      	movs	r2, #0
 8005906:	4b2f      	ldr	r3, [pc, #188]	; (80059c4 <_dtoa_r+0x614>)
 8005908:	f7fa fdf0 	bl	80004ec <__aeabi_dmul>
 800590c:	2200      	movs	r2, #0
 800590e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005916:	4b2b      	ldr	r3, [pc, #172]	; (80059c4 <_dtoa_r+0x614>)
 8005918:	f7fa fde8 	bl	80004ec <__aeabi_dmul>
 800591c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005920:	e7c3      	b.n	80058aa <_dtoa_r+0x4fa>
 8005922:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005926:	f7fa fde1 	bl	80004ec <__aeabi_dmul>
 800592a:	9b06      	ldr	r3, [sp, #24]
 800592c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005930:	199d      	adds	r5, r3, r6
 8005932:	461e      	mov	r6, r3
 8005934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005938:	f7fb f888 	bl	8000a4c <__aeabi_d2iz>
 800593c:	9011      	str	r0, [sp, #68]	; 0x44
 800593e:	f7fa fd6b 	bl	8000418 <__aeabi_i2d>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800594a:	f7fa fc17 	bl	800017c <__aeabi_dsub>
 800594e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005954:	3330      	adds	r3, #48	; 0x30
 8005956:	f806 3b01 	strb.w	r3, [r6], #1
 800595a:	42ae      	cmp	r6, r5
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	d124      	bne.n	80059ac <_dtoa_r+0x5fc>
 8005962:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005966:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <_dtoa_r+0x620>)
 8005968:	f7fa fc0a 	bl	8000180 <__adddf3>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005974:	f7fb f84a 	bl	8000a0c <__aeabi_dcmpgt>
 8005978:	2800      	cmp	r0, #0
 800597a:	d171      	bne.n	8005a60 <_dtoa_r+0x6b0>
 800597c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005980:	2000      	movs	r0, #0
 8005982:	4913      	ldr	r1, [pc, #76]	; (80059d0 <_dtoa_r+0x620>)
 8005984:	f7fa fbfa 	bl	800017c <__aeabi_dsub>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005990:	f7fb f81e 	bl	80009d0 <__aeabi_dcmplt>
 8005994:	2800      	cmp	r0, #0
 8005996:	f43f af2f 	beq.w	80057f8 <_dtoa_r+0x448>
 800599a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800599e:	1e6a      	subs	r2, r5, #1
 80059a0:	2b30      	cmp	r3, #48	; 0x30
 80059a2:	d001      	beq.n	80059a8 <_dtoa_r+0x5f8>
 80059a4:	46ba      	mov	sl, r7
 80059a6:	e04a      	b.n	8005a3e <_dtoa_r+0x68e>
 80059a8:	4615      	mov	r5, r2
 80059aa:	e7f6      	b.n	800599a <_dtoa_r+0x5ea>
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <_dtoa_r+0x614>)
 80059ae:	f7fa fd9d 	bl	80004ec <__aeabi_dmul>
 80059b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b6:	e7bd      	b.n	8005934 <_dtoa_r+0x584>
 80059b8:	08007370 	.word	0x08007370
 80059bc:	08007348 	.word	0x08007348
 80059c0:	3ff00000 	.word	0x3ff00000
 80059c4:	40240000 	.word	0x40240000
 80059c8:	401c0000 	.word	0x401c0000
 80059cc:	40140000 	.word	0x40140000
 80059d0:	3fe00000 	.word	0x3fe00000
 80059d4:	9d06      	ldr	r5, [sp, #24]
 80059d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059de:	4630      	mov	r0, r6
 80059e0:	4639      	mov	r1, r7
 80059e2:	f7fa fead 	bl	8000740 <__aeabi_ddiv>
 80059e6:	f7fb f831 	bl	8000a4c <__aeabi_d2iz>
 80059ea:	4681      	mov	r9, r0
 80059ec:	f7fa fd14 	bl	8000418 <__aeabi_i2d>
 80059f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059f4:	f7fa fd7a 	bl	80004ec <__aeabi_dmul>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4630      	mov	r0, r6
 80059fe:	4639      	mov	r1, r7
 8005a00:	f7fa fbbc 	bl	800017c <__aeabi_dsub>
 8005a04:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005a08:	f805 6b01 	strb.w	r6, [r5], #1
 8005a0c:	9e06      	ldr	r6, [sp, #24]
 8005a0e:	4602      	mov	r2, r0
 8005a10:	1bae      	subs	r6, r5, r6
 8005a12:	45b0      	cmp	r8, r6
 8005a14:	460b      	mov	r3, r1
 8005a16:	d135      	bne.n	8005a84 <_dtoa_r+0x6d4>
 8005a18:	f7fa fbb2 	bl	8000180 <__adddf3>
 8005a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a20:	4606      	mov	r6, r0
 8005a22:	460f      	mov	r7, r1
 8005a24:	f7fa fff2 	bl	8000a0c <__aeabi_dcmpgt>
 8005a28:	b9c8      	cbnz	r0, 8005a5e <_dtoa_r+0x6ae>
 8005a2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a2e:	4630      	mov	r0, r6
 8005a30:	4639      	mov	r1, r7
 8005a32:	f7fa ffc3 	bl	80009bc <__aeabi_dcmpeq>
 8005a36:	b110      	cbz	r0, 8005a3e <_dtoa_r+0x68e>
 8005a38:	f019 0f01 	tst.w	r9, #1
 8005a3c:	d10f      	bne.n	8005a5e <_dtoa_r+0x6ae>
 8005a3e:	4659      	mov	r1, fp
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 fcac 	bl	800639e <_Bfree>
 8005a46:	2300      	movs	r3, #0
 8005a48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a4a:	702b      	strb	r3, [r5, #0]
 8005a4c:	f10a 0301 	add.w	r3, sl, #1
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f43f acf3 	beq.w	8005440 <_dtoa_r+0x90>
 8005a5a:	601d      	str	r5, [r3, #0]
 8005a5c:	e4f0      	b.n	8005440 <_dtoa_r+0x90>
 8005a5e:	4657      	mov	r7, sl
 8005a60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a64:	1e6b      	subs	r3, r5, #1
 8005a66:	2a39      	cmp	r2, #57	; 0x39
 8005a68:	d106      	bne.n	8005a78 <_dtoa_r+0x6c8>
 8005a6a:	9a06      	ldr	r2, [sp, #24]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d107      	bne.n	8005a80 <_dtoa_r+0x6d0>
 8005a70:	2330      	movs	r3, #48	; 0x30
 8005a72:	7013      	strb	r3, [r2, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	3701      	adds	r7, #1
 8005a78:	781a      	ldrb	r2, [r3, #0]
 8005a7a:	3201      	adds	r2, #1
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e791      	b.n	80059a4 <_dtoa_r+0x5f4>
 8005a80:	461d      	mov	r5, r3
 8005a82:	e7ed      	b.n	8005a60 <_dtoa_r+0x6b0>
 8005a84:	2200      	movs	r2, #0
 8005a86:	4b99      	ldr	r3, [pc, #612]	; (8005cec <_dtoa_r+0x93c>)
 8005a88:	f7fa fd30 	bl	80004ec <__aeabi_dmul>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	4606      	mov	r6, r0
 8005a92:	460f      	mov	r7, r1
 8005a94:	f7fa ff92 	bl	80009bc <__aeabi_dcmpeq>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d09e      	beq.n	80059da <_dtoa_r+0x62a>
 8005a9c:	e7cf      	b.n	8005a3e <_dtoa_r+0x68e>
 8005a9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aa0:	2a00      	cmp	r2, #0
 8005aa2:	f000 8088 	beq.w	8005bb6 <_dtoa_r+0x806>
 8005aa6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005aa8:	2a01      	cmp	r2, #1
 8005aaa:	dc6d      	bgt.n	8005b88 <_dtoa_r+0x7d8>
 8005aac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	d066      	beq.n	8005b80 <_dtoa_r+0x7d0>
 8005ab2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ab6:	464d      	mov	r5, r9
 8005ab8:	9e08      	ldr	r6, [sp, #32]
 8005aba:	9a07      	ldr	r2, [sp, #28]
 8005abc:	2101      	movs	r1, #1
 8005abe:	441a      	add	r2, r3
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	4499      	add	r9, r3
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	f000 fd0a 	bl	80064de <__i2b>
 8005aca:	4607      	mov	r7, r0
 8005acc:	2d00      	cmp	r5, #0
 8005ace:	dd0b      	ble.n	8005ae8 <_dtoa_r+0x738>
 8005ad0:	9b07      	ldr	r3, [sp, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	dd08      	ble.n	8005ae8 <_dtoa_r+0x738>
 8005ad6:	42ab      	cmp	r3, r5
 8005ad8:	bfa8      	it	ge
 8005ada:	462b      	movge	r3, r5
 8005adc:	9a07      	ldr	r2, [sp, #28]
 8005ade:	eba9 0903 	sub.w	r9, r9, r3
 8005ae2:	1aed      	subs	r5, r5, r3
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	9b08      	ldr	r3, [sp, #32]
 8005aea:	b1eb      	cbz	r3, 8005b28 <_dtoa_r+0x778>
 8005aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d065      	beq.n	8005bbe <_dtoa_r+0x80e>
 8005af2:	b18e      	cbz	r6, 8005b18 <_dtoa_r+0x768>
 8005af4:	4639      	mov	r1, r7
 8005af6:	4632      	mov	r2, r6
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 fd8f 	bl	800661c <__pow5mult>
 8005afe:	465a      	mov	r2, fp
 8005b00:	4601      	mov	r1, r0
 8005b02:	4607      	mov	r7, r0
 8005b04:	4620      	mov	r0, r4
 8005b06:	f000 fcf3 	bl	80064f0 <__multiply>
 8005b0a:	4659      	mov	r1, fp
 8005b0c:	900a      	str	r0, [sp, #40]	; 0x28
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 fc45 	bl	800639e <_Bfree>
 8005b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b16:	469b      	mov	fp, r3
 8005b18:	9b08      	ldr	r3, [sp, #32]
 8005b1a:	1b9a      	subs	r2, r3, r6
 8005b1c:	d004      	beq.n	8005b28 <_dtoa_r+0x778>
 8005b1e:	4659      	mov	r1, fp
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fd7b 	bl	800661c <__pow5mult>
 8005b26:	4683      	mov	fp, r0
 8005b28:	2101      	movs	r1, #1
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fcd7 	bl	80064de <__i2b>
 8005b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b32:	4606      	mov	r6, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f000 81c6 	beq.w	8005ec6 <_dtoa_r+0xb16>
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f000 fd6c 	bl	800661c <__pow5mult>
 8005b44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b46:	4606      	mov	r6, r0
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	dc3e      	bgt.n	8005bca <_dtoa_r+0x81a>
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d137      	bne.n	8005bc2 <_dtoa_r+0x812>
 8005b52:	9b03      	ldr	r3, [sp, #12]
 8005b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d134      	bne.n	8005bc6 <_dtoa_r+0x816>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	0d1b      	lsrs	r3, r3, #20
 8005b64:	051b      	lsls	r3, r3, #20
 8005b66:	b12b      	cbz	r3, 8005b74 <_dtoa_r+0x7c4>
 8005b68:	9b07      	ldr	r3, [sp, #28]
 8005b6a:	f109 0901 	add.w	r9, r9, #1
 8005b6e:	3301      	adds	r3, #1
 8005b70:	9307      	str	r3, [sp, #28]
 8005b72:	2301      	movs	r3, #1
 8005b74:	9308      	str	r3, [sp, #32]
 8005b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d128      	bne.n	8005bce <_dtoa_r+0x81e>
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	e02e      	b.n	8005bde <_dtoa_r+0x82e>
 8005b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b82:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b86:	e796      	b.n	8005ab6 <_dtoa_r+0x706>
 8005b88:	9b08      	ldr	r3, [sp, #32]
 8005b8a:	f108 36ff 	add.w	r6, r8, #4294967295
 8005b8e:	42b3      	cmp	r3, r6
 8005b90:	bfb7      	itett	lt
 8005b92:	9b08      	ldrlt	r3, [sp, #32]
 8005b94:	1b9e      	subge	r6, r3, r6
 8005b96:	1af2      	sublt	r2, r6, r3
 8005b98:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005b9a:	bfbf      	itttt	lt
 8005b9c:	9608      	strlt	r6, [sp, #32]
 8005b9e:	189b      	addlt	r3, r3, r2
 8005ba0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005ba2:	2600      	movlt	r6, #0
 8005ba4:	f1b8 0f00 	cmp.w	r8, #0
 8005ba8:	bfb9      	ittee	lt
 8005baa:	eba9 0508 	sublt.w	r5, r9, r8
 8005bae:	2300      	movlt	r3, #0
 8005bb0:	464d      	movge	r5, r9
 8005bb2:	4643      	movge	r3, r8
 8005bb4:	e781      	b.n	8005aba <_dtoa_r+0x70a>
 8005bb6:	9e08      	ldr	r6, [sp, #32]
 8005bb8:	464d      	mov	r5, r9
 8005bba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005bbc:	e786      	b.n	8005acc <_dtoa_r+0x71c>
 8005bbe:	9a08      	ldr	r2, [sp, #32]
 8005bc0:	e7ad      	b.n	8005b1e <_dtoa_r+0x76e>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e7d6      	b.n	8005b74 <_dtoa_r+0x7c4>
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	e7d4      	b.n	8005b74 <_dtoa_r+0x7c4>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	9308      	str	r3, [sp, #32]
 8005bce:	6933      	ldr	r3, [r6, #16]
 8005bd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005bd4:	6918      	ldr	r0, [r3, #16]
 8005bd6:	f000 fc34 	bl	8006442 <__hi0bits>
 8005bda:	f1c0 0020 	rsb	r0, r0, #32
 8005bde:	9b07      	ldr	r3, [sp, #28]
 8005be0:	4418      	add	r0, r3
 8005be2:	f010 001f 	ands.w	r0, r0, #31
 8005be6:	d047      	beq.n	8005c78 <_dtoa_r+0x8c8>
 8005be8:	f1c0 0320 	rsb	r3, r0, #32
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	dd3b      	ble.n	8005c68 <_dtoa_r+0x8b8>
 8005bf0:	9b07      	ldr	r3, [sp, #28]
 8005bf2:	f1c0 001c 	rsb	r0, r0, #28
 8005bf6:	4481      	add	r9, r0
 8005bf8:	4405      	add	r5, r0
 8005bfa:	4403      	add	r3, r0
 8005bfc:	9307      	str	r3, [sp, #28]
 8005bfe:	f1b9 0f00 	cmp.w	r9, #0
 8005c02:	dd05      	ble.n	8005c10 <_dtoa_r+0x860>
 8005c04:	4659      	mov	r1, fp
 8005c06:	464a      	mov	r2, r9
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 fd55 	bl	80066b8 <__lshift>
 8005c0e:	4683      	mov	fp, r0
 8005c10:	9b07      	ldr	r3, [sp, #28]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dd05      	ble.n	8005c22 <_dtoa_r+0x872>
 8005c16:	4631      	mov	r1, r6
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 fd4c 	bl	80066b8 <__lshift>
 8005c20:	4606      	mov	r6, r0
 8005c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c24:	b353      	cbz	r3, 8005c7c <_dtoa_r+0x8cc>
 8005c26:	4631      	mov	r1, r6
 8005c28:	4658      	mov	r0, fp
 8005c2a:	f000 fd99 	bl	8006760 <__mcmp>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	da24      	bge.n	8005c7c <_dtoa_r+0x8cc>
 8005c32:	2300      	movs	r3, #0
 8005c34:	4659      	mov	r1, fp
 8005c36:	220a      	movs	r2, #10
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f000 fbc7 	bl	80063cc <__multadd>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c44:	4683      	mov	fp, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8144 	beq.w	8005ed4 <_dtoa_r+0xb24>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	4639      	mov	r1, r7
 8005c50:	220a      	movs	r2, #10
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fbba 	bl	80063cc <__multadd>
 8005c58:	9b04      	ldr	r3, [sp, #16]
 8005c5a:	4607      	mov	r7, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dc4d      	bgt.n	8005cfc <_dtoa_r+0x94c>
 8005c60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	dd4a      	ble.n	8005cfc <_dtoa_r+0x94c>
 8005c66:	e011      	b.n	8005c8c <_dtoa_r+0x8dc>
 8005c68:	d0c9      	beq.n	8005bfe <_dtoa_r+0x84e>
 8005c6a:	9a07      	ldr	r2, [sp, #28]
 8005c6c:	331c      	adds	r3, #28
 8005c6e:	441a      	add	r2, r3
 8005c70:	4499      	add	r9, r3
 8005c72:	441d      	add	r5, r3
 8005c74:	4613      	mov	r3, r2
 8005c76:	e7c1      	b.n	8005bfc <_dtoa_r+0x84c>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	e7f6      	b.n	8005c6a <_dtoa_r+0x8ba>
 8005c7c:	f1b8 0f00 	cmp.w	r8, #0
 8005c80:	dc36      	bgt.n	8005cf0 <_dtoa_r+0x940>
 8005c82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	dd33      	ble.n	8005cf0 <_dtoa_r+0x940>
 8005c88:	f8cd 8010 	str.w	r8, [sp, #16]
 8005c8c:	9b04      	ldr	r3, [sp, #16]
 8005c8e:	b963      	cbnz	r3, 8005caa <_dtoa_r+0x8fa>
 8005c90:	4631      	mov	r1, r6
 8005c92:	2205      	movs	r2, #5
 8005c94:	4620      	mov	r0, r4
 8005c96:	f000 fb99 	bl	80063cc <__multadd>
 8005c9a:	4601      	mov	r1, r0
 8005c9c:	4606      	mov	r6, r0
 8005c9e:	4658      	mov	r0, fp
 8005ca0:	f000 fd5e 	bl	8006760 <__mcmp>
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	f73f add3 	bgt.w	8005850 <_dtoa_r+0x4a0>
 8005caa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cac:	9d06      	ldr	r5, [sp, #24]
 8005cae:	ea6f 0a03 	mvn.w	sl, r3
 8005cb2:	f04f 0900 	mov.w	r9, #0
 8005cb6:	4631      	mov	r1, r6
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fb70 	bl	800639e <_Bfree>
 8005cbe:	2f00      	cmp	r7, #0
 8005cc0:	f43f aebd 	beq.w	8005a3e <_dtoa_r+0x68e>
 8005cc4:	f1b9 0f00 	cmp.w	r9, #0
 8005cc8:	d005      	beq.n	8005cd6 <_dtoa_r+0x926>
 8005cca:	45b9      	cmp	r9, r7
 8005ccc:	d003      	beq.n	8005cd6 <_dtoa_r+0x926>
 8005cce:	4649      	mov	r1, r9
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fb64 	bl	800639e <_Bfree>
 8005cd6:	4639      	mov	r1, r7
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 fb60 	bl	800639e <_Bfree>
 8005cde:	e6ae      	b.n	8005a3e <_dtoa_r+0x68e>
 8005ce0:	2600      	movs	r6, #0
 8005ce2:	4637      	mov	r7, r6
 8005ce4:	e7e1      	b.n	8005caa <_dtoa_r+0x8fa>
 8005ce6:	46ba      	mov	sl, r7
 8005ce8:	4637      	mov	r7, r6
 8005cea:	e5b1      	b.n	8005850 <_dtoa_r+0x4a0>
 8005cec:	40240000 	.word	0x40240000
 8005cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf2:	f8cd 8010 	str.w	r8, [sp, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 80f3 	beq.w	8005ee2 <_dtoa_r+0xb32>
 8005cfc:	2d00      	cmp	r5, #0
 8005cfe:	dd05      	ble.n	8005d0c <_dtoa_r+0x95c>
 8005d00:	4639      	mov	r1, r7
 8005d02:	462a      	mov	r2, r5
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fcd7 	bl	80066b8 <__lshift>
 8005d0a:	4607      	mov	r7, r0
 8005d0c:	9b08      	ldr	r3, [sp, #32]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d04c      	beq.n	8005dac <_dtoa_r+0x9fc>
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fb0e 	bl	8006336 <_Balloc>
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	f107 010c 	add.w	r1, r7, #12
 8005d22:	3202      	adds	r2, #2
 8005d24:	0092      	lsls	r2, r2, #2
 8005d26:	300c      	adds	r0, #12
 8005d28:	f000 faf8 	bl	800631c <memcpy>
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fcc1 	bl	80066b8 <__lshift>
 8005d36:	46b9      	mov	r9, r7
 8005d38:	4607      	mov	r7, r0
 8005d3a:	9b06      	ldr	r3, [sp, #24]
 8005d3c:	9307      	str	r3, [sp, #28]
 8005d3e:	9b02      	ldr	r3, [sp, #8]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	9308      	str	r3, [sp, #32]
 8005d46:	4631      	mov	r1, r6
 8005d48:	4658      	mov	r0, fp
 8005d4a:	f7ff faa3 	bl	8005294 <quorem>
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4605      	mov	r5, r0
 8005d52:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d56:	4658      	mov	r0, fp
 8005d58:	f000 fd02 	bl	8006760 <__mcmp>
 8005d5c:	463a      	mov	r2, r7
 8005d5e:	9002      	str	r0, [sp, #8]
 8005d60:	4631      	mov	r1, r6
 8005d62:	4620      	mov	r0, r4
 8005d64:	f000 fd16 	bl	8006794 <__mdiff>
 8005d68:	68c3      	ldr	r3, [r0, #12]
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	bb03      	cbnz	r3, 8005db0 <_dtoa_r+0xa00>
 8005d6e:	4601      	mov	r1, r0
 8005d70:	9009      	str	r0, [sp, #36]	; 0x24
 8005d72:	4658      	mov	r0, fp
 8005d74:	f000 fcf4 	bl	8006760 <__mcmp>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4620      	mov	r0, r4
 8005d80:	9309      	str	r3, [sp, #36]	; 0x24
 8005d82:	f000 fb0c 	bl	800639e <_Bfree>
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	b9a3      	cbnz	r3, 8005db4 <_dtoa_r+0xa04>
 8005d8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005d8c:	b992      	cbnz	r2, 8005db4 <_dtoa_r+0xa04>
 8005d8e:	9a08      	ldr	r2, [sp, #32]
 8005d90:	b982      	cbnz	r2, 8005db4 <_dtoa_r+0xa04>
 8005d92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d96:	d029      	beq.n	8005dec <_dtoa_r+0xa3c>
 8005d98:	9b02      	ldr	r3, [sp, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	dd01      	ble.n	8005da2 <_dtoa_r+0x9f2>
 8005d9e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005da2:	9b07      	ldr	r3, [sp, #28]
 8005da4:	1c5d      	adds	r5, r3, #1
 8005da6:	f883 8000 	strb.w	r8, [r3]
 8005daa:	e784      	b.n	8005cb6 <_dtoa_r+0x906>
 8005dac:	4638      	mov	r0, r7
 8005dae:	e7c2      	b.n	8005d36 <_dtoa_r+0x986>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e7e3      	b.n	8005d7c <_dtoa_r+0x9cc>
 8005db4:	9a02      	ldr	r2, [sp, #8]
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	db04      	blt.n	8005dc4 <_dtoa_r+0xa14>
 8005dba:	d123      	bne.n	8005e04 <_dtoa_r+0xa54>
 8005dbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005dbe:	bb0a      	cbnz	r2, 8005e04 <_dtoa_r+0xa54>
 8005dc0:	9a08      	ldr	r2, [sp, #32]
 8005dc2:	b9fa      	cbnz	r2, 8005e04 <_dtoa_r+0xa54>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	ddec      	ble.n	8005da2 <_dtoa_r+0x9f2>
 8005dc8:	4659      	mov	r1, fp
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4620      	mov	r0, r4
 8005dce:	f000 fc73 	bl	80066b8 <__lshift>
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4683      	mov	fp, r0
 8005dd6:	f000 fcc3 	bl	8006760 <__mcmp>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	dc03      	bgt.n	8005de6 <_dtoa_r+0xa36>
 8005dde:	d1e0      	bne.n	8005da2 <_dtoa_r+0x9f2>
 8005de0:	f018 0f01 	tst.w	r8, #1
 8005de4:	d0dd      	beq.n	8005da2 <_dtoa_r+0x9f2>
 8005de6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dea:	d1d8      	bne.n	8005d9e <_dtoa_r+0x9ee>
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	9a07      	ldr	r2, [sp, #28]
 8005df0:	1c5d      	adds	r5, r3, #1
 8005df2:	2339      	movs	r3, #57	; 0x39
 8005df4:	7013      	strb	r3, [r2, #0]
 8005df6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dfa:	1e6a      	subs	r2, r5, #1
 8005dfc:	2b39      	cmp	r3, #57	; 0x39
 8005dfe:	d04d      	beq.n	8005e9c <_dtoa_r+0xaec>
 8005e00:	3301      	adds	r3, #1
 8005e02:	e052      	b.n	8005eaa <_dtoa_r+0xafa>
 8005e04:	9a07      	ldr	r2, [sp, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f102 0501 	add.w	r5, r2, #1
 8005e0c:	dd06      	ble.n	8005e1c <_dtoa_r+0xa6c>
 8005e0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e12:	d0eb      	beq.n	8005dec <_dtoa_r+0xa3c>
 8005e14:	f108 0801 	add.w	r8, r8, #1
 8005e18:	9b07      	ldr	r3, [sp, #28]
 8005e1a:	e7c4      	b.n	8005da6 <_dtoa_r+0x9f6>
 8005e1c:	9b06      	ldr	r3, [sp, #24]
 8005e1e:	9a04      	ldr	r2, [sp, #16]
 8005e20:	1aeb      	subs	r3, r5, r3
 8005e22:	4293      	cmp	r3, r2
 8005e24:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e28:	d021      	beq.n	8005e6e <_dtoa_r+0xabe>
 8005e2a:	4659      	mov	r1, fp
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	220a      	movs	r2, #10
 8005e30:	4620      	mov	r0, r4
 8005e32:	f000 facb 	bl	80063cc <__multadd>
 8005e36:	45b9      	cmp	r9, r7
 8005e38:	4683      	mov	fp, r0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	f04f 020a 	mov.w	r2, #10
 8005e42:	4649      	mov	r1, r9
 8005e44:	4620      	mov	r0, r4
 8005e46:	d105      	bne.n	8005e54 <_dtoa_r+0xaa4>
 8005e48:	f000 fac0 	bl	80063cc <__multadd>
 8005e4c:	4681      	mov	r9, r0
 8005e4e:	4607      	mov	r7, r0
 8005e50:	9507      	str	r5, [sp, #28]
 8005e52:	e778      	b.n	8005d46 <_dtoa_r+0x996>
 8005e54:	f000 faba 	bl	80063cc <__multadd>
 8005e58:	4639      	mov	r1, r7
 8005e5a:	4681      	mov	r9, r0
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	220a      	movs	r2, #10
 8005e60:	4620      	mov	r0, r4
 8005e62:	f000 fab3 	bl	80063cc <__multadd>
 8005e66:	4607      	mov	r7, r0
 8005e68:	e7f2      	b.n	8005e50 <_dtoa_r+0xaa0>
 8005e6a:	f04f 0900 	mov.w	r9, #0
 8005e6e:	4659      	mov	r1, fp
 8005e70:	2201      	movs	r2, #1
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 fc20 	bl	80066b8 <__lshift>
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4683      	mov	fp, r0
 8005e7c:	f000 fc70 	bl	8006760 <__mcmp>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	dcb8      	bgt.n	8005df6 <_dtoa_r+0xa46>
 8005e84:	d102      	bne.n	8005e8c <_dtoa_r+0xadc>
 8005e86:	f018 0f01 	tst.w	r8, #1
 8005e8a:	d1b4      	bne.n	8005df6 <_dtoa_r+0xa46>
 8005e8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e90:	1e6a      	subs	r2, r5, #1
 8005e92:	2b30      	cmp	r3, #48	; 0x30
 8005e94:	f47f af0f 	bne.w	8005cb6 <_dtoa_r+0x906>
 8005e98:	4615      	mov	r5, r2
 8005e9a:	e7f7      	b.n	8005e8c <_dtoa_r+0xadc>
 8005e9c:	9b06      	ldr	r3, [sp, #24]
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d105      	bne.n	8005eae <_dtoa_r+0xafe>
 8005ea2:	2331      	movs	r3, #49	; 0x31
 8005ea4:	9a06      	ldr	r2, [sp, #24]
 8005ea6:	f10a 0a01 	add.w	sl, sl, #1
 8005eaa:	7013      	strb	r3, [r2, #0]
 8005eac:	e703      	b.n	8005cb6 <_dtoa_r+0x906>
 8005eae:	4615      	mov	r5, r2
 8005eb0:	e7a1      	b.n	8005df6 <_dtoa_r+0xa46>
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <_dtoa_r+0xb60>)
 8005eb4:	f7ff bae1 	b.w	800547a <_dtoa_r+0xca>
 8005eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f47f aabb 	bne.w	8005436 <_dtoa_r+0x86>
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <_dtoa_r+0xb64>)
 8005ec2:	f7ff bada 	b.w	800547a <_dtoa_r+0xca>
 8005ec6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	f77f ae3f 	ble.w	8005b4c <_dtoa_r+0x79c>
 8005ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ed0:	9308      	str	r3, [sp, #32]
 8005ed2:	e653      	b.n	8005b7c <_dtoa_r+0x7cc>
 8005ed4:	9b04      	ldr	r3, [sp, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	dc03      	bgt.n	8005ee2 <_dtoa_r+0xb32>
 8005eda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	f73f aed5 	bgt.w	8005c8c <_dtoa_r+0x8dc>
 8005ee2:	9d06      	ldr	r5, [sp, #24]
 8005ee4:	4631      	mov	r1, r6
 8005ee6:	4658      	mov	r0, fp
 8005ee8:	f7ff f9d4 	bl	8005294 <quorem>
 8005eec:	9b06      	ldr	r3, [sp, #24]
 8005eee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ef2:	f805 8b01 	strb.w	r8, [r5], #1
 8005ef6:	9a04      	ldr	r2, [sp, #16]
 8005ef8:	1aeb      	subs	r3, r5, r3
 8005efa:	429a      	cmp	r2, r3
 8005efc:	ddb5      	ble.n	8005e6a <_dtoa_r+0xaba>
 8005efe:	4659      	mov	r1, fp
 8005f00:	2300      	movs	r3, #0
 8005f02:	220a      	movs	r2, #10
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 fa61 	bl	80063cc <__multadd>
 8005f0a:	4683      	mov	fp, r0
 8005f0c:	e7ea      	b.n	8005ee4 <_dtoa_r+0xb34>
 8005f0e:	bf00      	nop
 8005f10:	080072b4 	.word	0x080072b4
 8005f14:	080072d8 	.word	0x080072d8

08005f18 <__sflush_r>:
 8005f18:	898a      	ldrh	r2, [r1, #12]
 8005f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	4605      	mov	r5, r0
 8005f20:	0710      	lsls	r0, r2, #28
 8005f22:	460c      	mov	r4, r1
 8005f24:	d458      	bmi.n	8005fd8 <__sflush_r+0xc0>
 8005f26:	684b      	ldr	r3, [r1, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	dc05      	bgt.n	8005f38 <__sflush_r+0x20>
 8005f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dc02      	bgt.n	8005f38 <__sflush_r+0x20>
 8005f32:	2000      	movs	r0, #0
 8005f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	d0f9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f44:	682f      	ldr	r7, [r5, #0]
 8005f46:	6a21      	ldr	r1, [r4, #32]
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	d032      	beq.n	8005fb2 <__sflush_r+0x9a>
 8005f4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	075a      	lsls	r2, r3, #29
 8005f52:	d505      	bpl.n	8005f60 <__sflush_r+0x48>
 8005f54:	6863      	ldr	r3, [r4, #4]
 8005f56:	1ac0      	subs	r0, r0, r3
 8005f58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f5a:	b10b      	cbz	r3, 8005f60 <__sflush_r+0x48>
 8005f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f5e:	1ac0      	subs	r0, r0, r3
 8005f60:	2300      	movs	r3, #0
 8005f62:	4602      	mov	r2, r0
 8005f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f66:	6a21      	ldr	r1, [r4, #32]
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b0      	blx	r6
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	d106      	bne.n	8005f80 <__sflush_r+0x68>
 8005f72:	6829      	ldr	r1, [r5, #0]
 8005f74:	291d      	cmp	r1, #29
 8005f76:	d848      	bhi.n	800600a <__sflush_r+0xf2>
 8005f78:	4a29      	ldr	r2, [pc, #164]	; (8006020 <__sflush_r+0x108>)
 8005f7a:	40ca      	lsrs	r2, r1
 8005f7c:	07d6      	lsls	r6, r2, #31
 8005f7e:	d544      	bpl.n	800600a <__sflush_r+0xf2>
 8005f80:	2200      	movs	r2, #0
 8005f82:	6062      	str	r2, [r4, #4]
 8005f84:	6922      	ldr	r2, [r4, #16]
 8005f86:	04d9      	lsls	r1, r3, #19
 8005f88:	6022      	str	r2, [r4, #0]
 8005f8a:	d504      	bpl.n	8005f96 <__sflush_r+0x7e>
 8005f8c:	1c42      	adds	r2, r0, #1
 8005f8e:	d101      	bne.n	8005f94 <__sflush_r+0x7c>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	b903      	cbnz	r3, 8005f96 <__sflush_r+0x7e>
 8005f94:	6560      	str	r0, [r4, #84]	; 0x54
 8005f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f98:	602f      	str	r7, [r5, #0]
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	d0c9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005f9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	d002      	beq.n	8005fac <__sflush_r+0x94>
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	f000 fca2 	bl	80068f0 <_free_r>
 8005fac:	2000      	movs	r0, #0
 8005fae:	6360      	str	r0, [r4, #52]	; 0x34
 8005fb0:	e7c0      	b.n	8005f34 <__sflush_r+0x1c>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b0      	blx	r6
 8005fb8:	1c41      	adds	r1, r0, #1
 8005fba:	d1c8      	bne.n	8005f4e <__sflush_r+0x36>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d0c5      	beq.n	8005f4e <__sflush_r+0x36>
 8005fc2:	2b1d      	cmp	r3, #29
 8005fc4:	d001      	beq.n	8005fca <__sflush_r+0xb2>
 8005fc6:	2b16      	cmp	r3, #22
 8005fc8:	d101      	bne.n	8005fce <__sflush_r+0xb6>
 8005fca:	602f      	str	r7, [r5, #0]
 8005fcc:	e7b1      	b.n	8005f32 <__sflush_r+0x1a>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	e7ad      	b.n	8005f34 <__sflush_r+0x1c>
 8005fd8:	690f      	ldr	r7, [r1, #16]
 8005fda:	2f00      	cmp	r7, #0
 8005fdc:	d0a9      	beq.n	8005f32 <__sflush_r+0x1a>
 8005fde:	0793      	lsls	r3, r2, #30
 8005fe0:	bf18      	it	ne
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	680e      	ldr	r6, [r1, #0]
 8005fe6:	bf08      	it	eq
 8005fe8:	694b      	ldreq	r3, [r1, #20]
 8005fea:	eba6 0807 	sub.w	r8, r6, r7
 8005fee:	600f      	str	r7, [r1, #0]
 8005ff0:	608b      	str	r3, [r1, #8]
 8005ff2:	f1b8 0f00 	cmp.w	r8, #0
 8005ff6:	dd9c      	ble.n	8005f32 <__sflush_r+0x1a>
 8005ff8:	4643      	mov	r3, r8
 8005ffa:	463a      	mov	r2, r7
 8005ffc:	6a21      	ldr	r1, [r4, #32]
 8005ffe:	4628      	mov	r0, r5
 8006000:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006002:	47b0      	blx	r6
 8006004:	2800      	cmp	r0, #0
 8006006:	dc06      	bgt.n	8006016 <__sflush_r+0xfe>
 8006008:	89a3      	ldrh	r3, [r4, #12]
 800600a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	f04f 30ff 	mov.w	r0, #4294967295
 8006014:	e78e      	b.n	8005f34 <__sflush_r+0x1c>
 8006016:	4407      	add	r7, r0
 8006018:	eba8 0800 	sub.w	r8, r8, r0
 800601c:	e7e9      	b.n	8005ff2 <__sflush_r+0xda>
 800601e:	bf00      	nop
 8006020:	20400001 	.word	0x20400001

08006024 <_fflush_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	690b      	ldr	r3, [r1, #16]
 8006028:	4605      	mov	r5, r0
 800602a:	460c      	mov	r4, r1
 800602c:	b1db      	cbz	r3, 8006066 <_fflush_r+0x42>
 800602e:	b118      	cbz	r0, 8006038 <_fflush_r+0x14>
 8006030:	6983      	ldr	r3, [r0, #24]
 8006032:	b90b      	cbnz	r3, 8006038 <_fflush_r+0x14>
 8006034:	f000 f860 	bl	80060f8 <__sinit>
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <_fflush_r+0x48>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d109      	bne.n	8006052 <_fflush_r+0x2e>
 800603e:	686c      	ldr	r4, [r5, #4]
 8006040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006044:	b17b      	cbz	r3, 8006066 <_fflush_r+0x42>
 8006046:	4621      	mov	r1, r4
 8006048:	4628      	mov	r0, r5
 800604a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800604e:	f7ff bf63 	b.w	8005f18 <__sflush_r>
 8006052:	4b07      	ldr	r3, [pc, #28]	; (8006070 <_fflush_r+0x4c>)
 8006054:	429c      	cmp	r4, r3
 8006056:	d101      	bne.n	800605c <_fflush_r+0x38>
 8006058:	68ac      	ldr	r4, [r5, #8]
 800605a:	e7f1      	b.n	8006040 <_fflush_r+0x1c>
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <_fflush_r+0x50>)
 800605e:	429c      	cmp	r4, r3
 8006060:	bf08      	it	eq
 8006062:	68ec      	ldreq	r4, [r5, #12]
 8006064:	e7ec      	b.n	8006040 <_fflush_r+0x1c>
 8006066:	2000      	movs	r0, #0
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	bf00      	nop
 800606c:	08007308 	.word	0x08007308
 8006070:	08007328 	.word	0x08007328
 8006074:	080072e8 	.word	0x080072e8

08006078 <std>:
 8006078:	2300      	movs	r3, #0
 800607a:	b510      	push	{r4, lr}
 800607c:	4604      	mov	r4, r0
 800607e:	e9c0 3300 	strd	r3, r3, [r0]
 8006082:	6083      	str	r3, [r0, #8]
 8006084:	8181      	strh	r1, [r0, #12]
 8006086:	6643      	str	r3, [r0, #100]	; 0x64
 8006088:	81c2      	strh	r2, [r0, #14]
 800608a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800608e:	6183      	str	r3, [r0, #24]
 8006090:	4619      	mov	r1, r3
 8006092:	2208      	movs	r2, #8
 8006094:	305c      	adds	r0, #92	; 0x5c
 8006096:	f7fe fa43 	bl	8004520 <memset>
 800609a:	4b05      	ldr	r3, [pc, #20]	; (80060b0 <std+0x38>)
 800609c:	6224      	str	r4, [r4, #32]
 800609e:	6263      	str	r3, [r4, #36]	; 0x24
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <std+0x3c>)
 80060a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80060a4:	4b04      	ldr	r3, [pc, #16]	; (80060b8 <std+0x40>)
 80060a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <std+0x44>)
 80060aa:	6323      	str	r3, [r4, #48]	; 0x30
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	bf00      	nop
 80060b0:	08006c05 	.word	0x08006c05
 80060b4:	08006c27 	.word	0x08006c27
 80060b8:	08006c5f 	.word	0x08006c5f
 80060bc:	08006c83 	.word	0x08006c83

080060c0 <_cleanup_r>:
 80060c0:	4901      	ldr	r1, [pc, #4]	; (80060c8 <_cleanup_r+0x8>)
 80060c2:	f000 b885 	b.w	80061d0 <_fwalk_reent>
 80060c6:	bf00      	nop
 80060c8:	08006025 	.word	0x08006025

080060cc <__sfmoreglue>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	2568      	movs	r5, #104	; 0x68
 80060d0:	1e4a      	subs	r2, r1, #1
 80060d2:	4355      	muls	r5, r2
 80060d4:	460e      	mov	r6, r1
 80060d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060da:	f7fe fa37 	bl	800454c <_malloc_r>
 80060de:	4604      	mov	r4, r0
 80060e0:	b140      	cbz	r0, 80060f4 <__sfmoreglue+0x28>
 80060e2:	2100      	movs	r1, #0
 80060e4:	e9c0 1600 	strd	r1, r6, [r0]
 80060e8:	300c      	adds	r0, #12
 80060ea:	60a0      	str	r0, [r4, #8]
 80060ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060f0:	f7fe fa16 	bl	8004520 <memset>
 80060f4:	4620      	mov	r0, r4
 80060f6:	bd70      	pop	{r4, r5, r6, pc}

080060f8 <__sinit>:
 80060f8:	6983      	ldr	r3, [r0, #24]
 80060fa:	b510      	push	{r4, lr}
 80060fc:	4604      	mov	r4, r0
 80060fe:	bb33      	cbnz	r3, 800614e <__sinit+0x56>
 8006100:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006104:	6503      	str	r3, [r0, #80]	; 0x50
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <__sinit+0x58>)
 8006108:	4a12      	ldr	r2, [pc, #72]	; (8006154 <__sinit+0x5c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6282      	str	r2, [r0, #40]	; 0x28
 800610e:	4298      	cmp	r0, r3
 8006110:	bf04      	itt	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	6183      	streq	r3, [r0, #24]
 8006116:	f000 f81f 	bl	8006158 <__sfp>
 800611a:	6060      	str	r0, [r4, #4]
 800611c:	4620      	mov	r0, r4
 800611e:	f000 f81b 	bl	8006158 <__sfp>
 8006122:	60a0      	str	r0, [r4, #8]
 8006124:	4620      	mov	r0, r4
 8006126:	f000 f817 	bl	8006158 <__sfp>
 800612a:	2200      	movs	r2, #0
 800612c:	60e0      	str	r0, [r4, #12]
 800612e:	2104      	movs	r1, #4
 8006130:	6860      	ldr	r0, [r4, #4]
 8006132:	f7ff ffa1 	bl	8006078 <std>
 8006136:	2201      	movs	r2, #1
 8006138:	2109      	movs	r1, #9
 800613a:	68a0      	ldr	r0, [r4, #8]
 800613c:	f7ff ff9c 	bl	8006078 <std>
 8006140:	2202      	movs	r2, #2
 8006142:	2112      	movs	r1, #18
 8006144:	68e0      	ldr	r0, [r4, #12]
 8006146:	f7ff ff97 	bl	8006078 <std>
 800614a:	2301      	movs	r3, #1
 800614c:	61a3      	str	r3, [r4, #24]
 800614e:	bd10      	pop	{r4, pc}
 8006150:	080072a0 	.word	0x080072a0
 8006154:	080060c1 	.word	0x080060c1

08006158 <__sfp>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <__sfp+0x70>)
 800615c:	4607      	mov	r7, r0
 800615e:	681e      	ldr	r6, [r3, #0]
 8006160:	69b3      	ldr	r3, [r6, #24]
 8006162:	b913      	cbnz	r3, 800616a <__sfp+0x12>
 8006164:	4630      	mov	r0, r6
 8006166:	f7ff ffc7 	bl	80060f8 <__sinit>
 800616a:	3648      	adds	r6, #72	; 0x48
 800616c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006170:	3b01      	subs	r3, #1
 8006172:	d503      	bpl.n	800617c <__sfp+0x24>
 8006174:	6833      	ldr	r3, [r6, #0]
 8006176:	b133      	cbz	r3, 8006186 <__sfp+0x2e>
 8006178:	6836      	ldr	r6, [r6, #0]
 800617a:	e7f7      	b.n	800616c <__sfp+0x14>
 800617c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006180:	b16d      	cbz	r5, 800619e <__sfp+0x46>
 8006182:	3468      	adds	r4, #104	; 0x68
 8006184:	e7f4      	b.n	8006170 <__sfp+0x18>
 8006186:	2104      	movs	r1, #4
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff ff9f 	bl	80060cc <__sfmoreglue>
 800618e:	6030      	str	r0, [r6, #0]
 8006190:	2800      	cmp	r0, #0
 8006192:	d1f1      	bne.n	8006178 <__sfp+0x20>
 8006194:	230c      	movs	r3, #12
 8006196:	4604      	mov	r4, r0
 8006198:	603b      	str	r3, [r7, #0]
 800619a:	4620      	mov	r0, r4
 800619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800619e:	4b0b      	ldr	r3, [pc, #44]	; (80061cc <__sfp+0x74>)
 80061a0:	6665      	str	r5, [r4, #100]	; 0x64
 80061a2:	e9c4 5500 	strd	r5, r5, [r4]
 80061a6:	60a5      	str	r5, [r4, #8]
 80061a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80061ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80061b0:	2208      	movs	r2, #8
 80061b2:	4629      	mov	r1, r5
 80061b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061b8:	f7fe f9b2 	bl	8004520 <memset>
 80061bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061c4:	e7e9      	b.n	800619a <__sfp+0x42>
 80061c6:	bf00      	nop
 80061c8:	080072a0 	.word	0x080072a0
 80061cc:	ffff0001 	.word	0xffff0001

080061d0 <_fwalk_reent>:
 80061d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d4:	4680      	mov	r8, r0
 80061d6:	4689      	mov	r9, r1
 80061d8:	2600      	movs	r6, #0
 80061da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061de:	b914      	cbnz	r4, 80061e6 <_fwalk_reent+0x16>
 80061e0:	4630      	mov	r0, r6
 80061e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80061ea:	3f01      	subs	r7, #1
 80061ec:	d501      	bpl.n	80061f2 <_fwalk_reent+0x22>
 80061ee:	6824      	ldr	r4, [r4, #0]
 80061f0:	e7f5      	b.n	80061de <_fwalk_reent+0xe>
 80061f2:	89ab      	ldrh	r3, [r5, #12]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d907      	bls.n	8006208 <_fwalk_reent+0x38>
 80061f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061fc:	3301      	adds	r3, #1
 80061fe:	d003      	beq.n	8006208 <_fwalk_reent+0x38>
 8006200:	4629      	mov	r1, r5
 8006202:	4640      	mov	r0, r8
 8006204:	47c8      	blx	r9
 8006206:	4306      	orrs	r6, r0
 8006208:	3568      	adds	r5, #104	; 0x68
 800620a:	e7ee      	b.n	80061ea <_fwalk_reent+0x1a>

0800620c <_localeconv_r>:
 800620c:	4b04      	ldr	r3, [pc, #16]	; (8006220 <_localeconv_r+0x14>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6a18      	ldr	r0, [r3, #32]
 8006212:	4b04      	ldr	r3, [pc, #16]	; (8006224 <_localeconv_r+0x18>)
 8006214:	2800      	cmp	r0, #0
 8006216:	bf08      	it	eq
 8006218:	4618      	moveq	r0, r3
 800621a:	30f0      	adds	r0, #240	; 0xf0
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000018 	.word	0x20000018
 8006224:	2000007c 	.word	0x2000007c

08006228 <__swhatbuf_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	460e      	mov	r6, r1
 800622c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006230:	b096      	sub	sp, #88	; 0x58
 8006232:	2900      	cmp	r1, #0
 8006234:	4614      	mov	r4, r2
 8006236:	461d      	mov	r5, r3
 8006238:	da07      	bge.n	800624a <__swhatbuf_r+0x22>
 800623a:	2300      	movs	r3, #0
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	89b3      	ldrh	r3, [r6, #12]
 8006240:	061a      	lsls	r2, r3, #24
 8006242:	d410      	bmi.n	8006266 <__swhatbuf_r+0x3e>
 8006244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006248:	e00e      	b.n	8006268 <__swhatbuf_r+0x40>
 800624a:	466a      	mov	r2, sp
 800624c:	f000 fd40 	bl	8006cd0 <_fstat_r>
 8006250:	2800      	cmp	r0, #0
 8006252:	dbf2      	blt.n	800623a <__swhatbuf_r+0x12>
 8006254:	9a01      	ldr	r2, [sp, #4]
 8006256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800625a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800625e:	425a      	negs	r2, r3
 8006260:	415a      	adcs	r2, r3
 8006262:	602a      	str	r2, [r5, #0]
 8006264:	e7ee      	b.n	8006244 <__swhatbuf_r+0x1c>
 8006266:	2340      	movs	r3, #64	; 0x40
 8006268:	2000      	movs	r0, #0
 800626a:	6023      	str	r3, [r4, #0]
 800626c:	b016      	add	sp, #88	; 0x58
 800626e:	bd70      	pop	{r4, r5, r6, pc}

08006270 <__smakebuf_r>:
 8006270:	898b      	ldrh	r3, [r1, #12]
 8006272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006274:	079d      	lsls	r5, r3, #30
 8006276:	4606      	mov	r6, r0
 8006278:	460c      	mov	r4, r1
 800627a:	d507      	bpl.n	800628c <__smakebuf_r+0x1c>
 800627c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	2301      	movs	r3, #1
 8006286:	6163      	str	r3, [r4, #20]
 8006288:	b002      	add	sp, #8
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	ab01      	add	r3, sp, #4
 800628e:	466a      	mov	r2, sp
 8006290:	f7ff ffca 	bl	8006228 <__swhatbuf_r>
 8006294:	9900      	ldr	r1, [sp, #0]
 8006296:	4605      	mov	r5, r0
 8006298:	4630      	mov	r0, r6
 800629a:	f7fe f957 	bl	800454c <_malloc_r>
 800629e:	b948      	cbnz	r0, 80062b4 <__smakebuf_r+0x44>
 80062a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062a4:	059a      	lsls	r2, r3, #22
 80062a6:	d4ef      	bmi.n	8006288 <__smakebuf_r+0x18>
 80062a8:	f023 0303 	bic.w	r3, r3, #3
 80062ac:	f043 0302 	orr.w	r3, r3, #2
 80062b0:	81a3      	strh	r3, [r4, #12]
 80062b2:	e7e3      	b.n	800627c <__smakebuf_r+0xc>
 80062b4:	4b0d      	ldr	r3, [pc, #52]	; (80062ec <__smakebuf_r+0x7c>)
 80062b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	6020      	str	r0, [r4, #0]
 80062bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c0:	81a3      	strh	r3, [r4, #12]
 80062c2:	9b00      	ldr	r3, [sp, #0]
 80062c4:	6120      	str	r0, [r4, #16]
 80062c6:	6163      	str	r3, [r4, #20]
 80062c8:	9b01      	ldr	r3, [sp, #4]
 80062ca:	b15b      	cbz	r3, 80062e4 <__smakebuf_r+0x74>
 80062cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062d0:	4630      	mov	r0, r6
 80062d2:	f000 fd0f 	bl	8006cf4 <_isatty_r>
 80062d6:	b128      	cbz	r0, 80062e4 <__smakebuf_r+0x74>
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f023 0303 	bic.w	r3, r3, #3
 80062de:	f043 0301 	orr.w	r3, r3, #1
 80062e2:	81a3      	strh	r3, [r4, #12]
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	431d      	orrs	r5, r3
 80062e8:	81a5      	strh	r5, [r4, #12]
 80062ea:	e7cd      	b.n	8006288 <__smakebuf_r+0x18>
 80062ec:	080060c1 	.word	0x080060c1

080062f0 <malloc>:
 80062f0:	4b02      	ldr	r3, [pc, #8]	; (80062fc <malloc+0xc>)
 80062f2:	4601      	mov	r1, r0
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f7fe b929 	b.w	800454c <_malloc_r>
 80062fa:	bf00      	nop
 80062fc:	20000018 	.word	0x20000018

08006300 <memchr>:
 8006300:	b510      	push	{r4, lr}
 8006302:	b2c9      	uxtb	r1, r1
 8006304:	4402      	add	r2, r0
 8006306:	4290      	cmp	r0, r2
 8006308:	4603      	mov	r3, r0
 800630a:	d101      	bne.n	8006310 <memchr+0x10>
 800630c:	2300      	movs	r3, #0
 800630e:	e003      	b.n	8006318 <memchr+0x18>
 8006310:	781c      	ldrb	r4, [r3, #0]
 8006312:	3001      	adds	r0, #1
 8006314:	428c      	cmp	r4, r1
 8006316:	d1f6      	bne.n	8006306 <memchr+0x6>
 8006318:	4618      	mov	r0, r3
 800631a:	bd10      	pop	{r4, pc}

0800631c <memcpy>:
 800631c:	b510      	push	{r4, lr}
 800631e:	1e43      	subs	r3, r0, #1
 8006320:	440a      	add	r2, r1
 8006322:	4291      	cmp	r1, r2
 8006324:	d100      	bne.n	8006328 <memcpy+0xc>
 8006326:	bd10      	pop	{r4, pc}
 8006328:	f811 4b01 	ldrb.w	r4, [r1], #1
 800632c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006330:	e7f7      	b.n	8006322 <memcpy+0x6>

08006332 <__malloc_lock>:
 8006332:	4770      	bx	lr

08006334 <__malloc_unlock>:
 8006334:	4770      	bx	lr

08006336 <_Balloc>:
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800633a:	4604      	mov	r4, r0
 800633c:	460e      	mov	r6, r1
 800633e:	b93d      	cbnz	r5, 8006350 <_Balloc+0x1a>
 8006340:	2010      	movs	r0, #16
 8006342:	f7ff ffd5 	bl	80062f0 <malloc>
 8006346:	6260      	str	r0, [r4, #36]	; 0x24
 8006348:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800634c:	6005      	str	r5, [r0, #0]
 800634e:	60c5      	str	r5, [r0, #12]
 8006350:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006352:	68eb      	ldr	r3, [r5, #12]
 8006354:	b183      	cbz	r3, 8006378 <_Balloc+0x42>
 8006356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800635e:	b9b8      	cbnz	r0, 8006390 <_Balloc+0x5a>
 8006360:	2101      	movs	r1, #1
 8006362:	fa01 f506 	lsl.w	r5, r1, r6
 8006366:	1d6a      	adds	r2, r5, #5
 8006368:	0092      	lsls	r2, r2, #2
 800636a:	4620      	mov	r0, r4
 800636c:	f7fe f8e0 	bl	8004530 <_calloc_r>
 8006370:	b160      	cbz	r0, 800638c <_Balloc+0x56>
 8006372:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006376:	e00e      	b.n	8006396 <_Balloc+0x60>
 8006378:	2221      	movs	r2, #33	; 0x21
 800637a:	2104      	movs	r1, #4
 800637c:	4620      	mov	r0, r4
 800637e:	f7fe f8d7 	bl	8004530 <_calloc_r>
 8006382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006384:	60e8      	str	r0, [r5, #12]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e4      	bne.n	8006356 <_Balloc+0x20>
 800638c:	2000      	movs	r0, #0
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	6802      	ldr	r2, [r0, #0]
 8006392:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006396:	2300      	movs	r3, #0
 8006398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800639c:	e7f7      	b.n	800638e <_Balloc+0x58>

0800639e <_Bfree>:
 800639e:	b570      	push	{r4, r5, r6, lr}
 80063a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80063a2:	4606      	mov	r6, r0
 80063a4:	460d      	mov	r5, r1
 80063a6:	b93c      	cbnz	r4, 80063b8 <_Bfree+0x1a>
 80063a8:	2010      	movs	r0, #16
 80063aa:	f7ff ffa1 	bl	80062f0 <malloc>
 80063ae:	6270      	str	r0, [r6, #36]	; 0x24
 80063b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063b4:	6004      	str	r4, [r0, #0]
 80063b6:	60c4      	str	r4, [r0, #12]
 80063b8:	b13d      	cbz	r5, 80063ca <_Bfree+0x2c>
 80063ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80063bc:	686a      	ldr	r2, [r5, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063c4:	6029      	str	r1, [r5, #0]
 80063c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80063ca:	bd70      	pop	{r4, r5, r6, pc}

080063cc <__multadd>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	461f      	mov	r7, r3
 80063d2:	4606      	mov	r6, r0
 80063d4:	460c      	mov	r4, r1
 80063d6:	2300      	movs	r3, #0
 80063d8:	690d      	ldr	r5, [r1, #16]
 80063da:	f101 0c14 	add.w	ip, r1, #20
 80063de:	f8dc 0000 	ldr.w	r0, [ip]
 80063e2:	3301      	adds	r3, #1
 80063e4:	b281      	uxth	r1, r0
 80063e6:	fb02 7101 	mla	r1, r2, r1, r7
 80063ea:	0c00      	lsrs	r0, r0, #16
 80063ec:	0c0f      	lsrs	r7, r1, #16
 80063ee:	fb02 7000 	mla	r0, r2, r0, r7
 80063f2:	b289      	uxth	r1, r1
 80063f4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063f8:	429d      	cmp	r5, r3
 80063fa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063fe:	f84c 1b04 	str.w	r1, [ip], #4
 8006402:	dcec      	bgt.n	80063de <__multadd+0x12>
 8006404:	b1d7      	cbz	r7, 800643c <__multadd+0x70>
 8006406:	68a3      	ldr	r3, [r4, #8]
 8006408:	42ab      	cmp	r3, r5
 800640a:	dc12      	bgt.n	8006432 <__multadd+0x66>
 800640c:	6861      	ldr	r1, [r4, #4]
 800640e:	4630      	mov	r0, r6
 8006410:	3101      	adds	r1, #1
 8006412:	f7ff ff90 	bl	8006336 <_Balloc>
 8006416:	4680      	mov	r8, r0
 8006418:	6922      	ldr	r2, [r4, #16]
 800641a:	f104 010c 	add.w	r1, r4, #12
 800641e:	3202      	adds	r2, #2
 8006420:	0092      	lsls	r2, r2, #2
 8006422:	300c      	adds	r0, #12
 8006424:	f7ff ff7a 	bl	800631c <memcpy>
 8006428:	4621      	mov	r1, r4
 800642a:	4630      	mov	r0, r6
 800642c:	f7ff ffb7 	bl	800639e <_Bfree>
 8006430:	4644      	mov	r4, r8
 8006432:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006436:	3501      	adds	r5, #1
 8006438:	615f      	str	r7, [r3, #20]
 800643a:	6125      	str	r5, [r4, #16]
 800643c:	4620      	mov	r0, r4
 800643e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006442 <__hi0bits>:
 8006442:	0c02      	lsrs	r2, r0, #16
 8006444:	0412      	lsls	r2, r2, #16
 8006446:	4603      	mov	r3, r0
 8006448:	b9b2      	cbnz	r2, 8006478 <__hi0bits+0x36>
 800644a:	0403      	lsls	r3, r0, #16
 800644c:	2010      	movs	r0, #16
 800644e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006452:	bf04      	itt	eq
 8006454:	021b      	lsleq	r3, r3, #8
 8006456:	3008      	addeq	r0, #8
 8006458:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800645c:	bf04      	itt	eq
 800645e:	011b      	lsleq	r3, r3, #4
 8006460:	3004      	addeq	r0, #4
 8006462:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006466:	bf04      	itt	eq
 8006468:	009b      	lsleq	r3, r3, #2
 800646a:	3002      	addeq	r0, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	db06      	blt.n	800647e <__hi0bits+0x3c>
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	d503      	bpl.n	800647c <__hi0bits+0x3a>
 8006474:	3001      	adds	r0, #1
 8006476:	4770      	bx	lr
 8006478:	2000      	movs	r0, #0
 800647a:	e7e8      	b.n	800644e <__hi0bits+0xc>
 800647c:	2020      	movs	r0, #32
 800647e:	4770      	bx	lr

08006480 <__lo0bits>:
 8006480:	6803      	ldr	r3, [r0, #0]
 8006482:	4601      	mov	r1, r0
 8006484:	f013 0207 	ands.w	r2, r3, #7
 8006488:	d00b      	beq.n	80064a2 <__lo0bits+0x22>
 800648a:	07da      	lsls	r2, r3, #31
 800648c:	d423      	bmi.n	80064d6 <__lo0bits+0x56>
 800648e:	0798      	lsls	r0, r3, #30
 8006490:	bf49      	itett	mi
 8006492:	085b      	lsrmi	r3, r3, #1
 8006494:	089b      	lsrpl	r3, r3, #2
 8006496:	2001      	movmi	r0, #1
 8006498:	600b      	strmi	r3, [r1, #0]
 800649a:	bf5c      	itt	pl
 800649c:	600b      	strpl	r3, [r1, #0]
 800649e:	2002      	movpl	r0, #2
 80064a0:	4770      	bx	lr
 80064a2:	b298      	uxth	r0, r3
 80064a4:	b9a8      	cbnz	r0, 80064d2 <__lo0bits+0x52>
 80064a6:	2010      	movs	r0, #16
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80064ae:	bf04      	itt	eq
 80064b0:	0a1b      	lsreq	r3, r3, #8
 80064b2:	3008      	addeq	r0, #8
 80064b4:	071a      	lsls	r2, r3, #28
 80064b6:	bf04      	itt	eq
 80064b8:	091b      	lsreq	r3, r3, #4
 80064ba:	3004      	addeq	r0, #4
 80064bc:	079a      	lsls	r2, r3, #30
 80064be:	bf04      	itt	eq
 80064c0:	089b      	lsreq	r3, r3, #2
 80064c2:	3002      	addeq	r0, #2
 80064c4:	07da      	lsls	r2, r3, #31
 80064c6:	d402      	bmi.n	80064ce <__lo0bits+0x4e>
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	d006      	beq.n	80064da <__lo0bits+0x5a>
 80064cc:	3001      	adds	r0, #1
 80064ce:	600b      	str	r3, [r1, #0]
 80064d0:	4770      	bx	lr
 80064d2:	4610      	mov	r0, r2
 80064d4:	e7e9      	b.n	80064aa <__lo0bits+0x2a>
 80064d6:	2000      	movs	r0, #0
 80064d8:	4770      	bx	lr
 80064da:	2020      	movs	r0, #32
 80064dc:	4770      	bx	lr

080064de <__i2b>:
 80064de:	b510      	push	{r4, lr}
 80064e0:	460c      	mov	r4, r1
 80064e2:	2101      	movs	r1, #1
 80064e4:	f7ff ff27 	bl	8006336 <_Balloc>
 80064e8:	2201      	movs	r2, #1
 80064ea:	6144      	str	r4, [r0, #20]
 80064ec:	6102      	str	r2, [r0, #16]
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <__multiply>:
 80064f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	4614      	mov	r4, r2
 80064f6:	690a      	ldr	r2, [r1, #16]
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	4688      	mov	r8, r1
 80064fc:	429a      	cmp	r2, r3
 80064fe:	bfbe      	ittt	lt
 8006500:	460b      	movlt	r3, r1
 8006502:	46a0      	movlt	r8, r4
 8006504:	461c      	movlt	r4, r3
 8006506:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800650a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800650e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006512:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006516:	eb07 0609 	add.w	r6, r7, r9
 800651a:	42b3      	cmp	r3, r6
 800651c:	bfb8      	it	lt
 800651e:	3101      	addlt	r1, #1
 8006520:	f7ff ff09 	bl	8006336 <_Balloc>
 8006524:	f100 0514 	add.w	r5, r0, #20
 8006528:	462b      	mov	r3, r5
 800652a:	2200      	movs	r2, #0
 800652c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006530:	4573      	cmp	r3, lr
 8006532:	d316      	bcc.n	8006562 <__multiply+0x72>
 8006534:	f104 0214 	add.w	r2, r4, #20
 8006538:	f108 0114 	add.w	r1, r8, #20
 800653c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006540:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	9201      	str	r2, [sp, #4]
 800654a:	4293      	cmp	r3, r2
 800654c:	d80c      	bhi.n	8006568 <__multiply+0x78>
 800654e:	2e00      	cmp	r6, #0
 8006550:	dd03      	ble.n	800655a <__multiply+0x6a>
 8006552:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006556:	2b00      	cmp	r3, #0
 8006558:	d05d      	beq.n	8006616 <__multiply+0x126>
 800655a:	6106      	str	r6, [r0, #16]
 800655c:	b003      	add	sp, #12
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006562:	f843 2b04 	str.w	r2, [r3], #4
 8006566:	e7e3      	b.n	8006530 <__multiply+0x40>
 8006568:	f8b2 b000 	ldrh.w	fp, [r2]
 800656c:	f1bb 0f00 	cmp.w	fp, #0
 8006570:	d023      	beq.n	80065ba <__multiply+0xca>
 8006572:	4689      	mov	r9, r1
 8006574:	46ac      	mov	ip, r5
 8006576:	f04f 0800 	mov.w	r8, #0
 800657a:	f859 4b04 	ldr.w	r4, [r9], #4
 800657e:	f8dc a000 	ldr.w	sl, [ip]
 8006582:	b2a3      	uxth	r3, r4
 8006584:	fa1f fa8a 	uxth.w	sl, sl
 8006588:	fb0b a303 	mla	r3, fp, r3, sl
 800658c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006590:	f8dc 4000 	ldr.w	r4, [ip]
 8006594:	4443      	add	r3, r8
 8006596:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800659a:	fb0b 840a 	mla	r4, fp, sl, r8
 800659e:	46e2      	mov	sl, ip
 80065a0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065aa:	454f      	cmp	r7, r9
 80065ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80065b0:	f84a 3b04 	str.w	r3, [sl], #4
 80065b4:	d82b      	bhi.n	800660e <__multiply+0x11e>
 80065b6:	f8cc 8004 	str.w	r8, [ip, #4]
 80065ba:	9b01      	ldr	r3, [sp, #4]
 80065bc:	3204      	adds	r2, #4
 80065be:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80065c2:	f1ba 0f00 	cmp.w	sl, #0
 80065c6:	d020      	beq.n	800660a <__multiply+0x11a>
 80065c8:	4689      	mov	r9, r1
 80065ca:	46a8      	mov	r8, r5
 80065cc:	f04f 0b00 	mov.w	fp, #0
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	f8b9 c000 	ldrh.w	ip, [r9]
 80065d6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	fb0a 440c 	mla	r4, sl, ip, r4
 80065e0:	46c4      	mov	ip, r8
 80065e2:	445c      	add	r4, fp
 80065e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065e8:	f84c 3b04 	str.w	r3, [ip], #4
 80065ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80065f0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065f4:	0c1b      	lsrs	r3, r3, #16
 80065f6:	fb0a b303 	mla	r3, sl, r3, fp
 80065fa:	454f      	cmp	r7, r9
 80065fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006600:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006604:	d805      	bhi.n	8006612 <__multiply+0x122>
 8006606:	f8c8 3004 	str.w	r3, [r8, #4]
 800660a:	3504      	adds	r5, #4
 800660c:	e79b      	b.n	8006546 <__multiply+0x56>
 800660e:	46d4      	mov	ip, sl
 8006610:	e7b3      	b.n	800657a <__multiply+0x8a>
 8006612:	46e0      	mov	r8, ip
 8006614:	e7dd      	b.n	80065d2 <__multiply+0xe2>
 8006616:	3e01      	subs	r6, #1
 8006618:	e799      	b.n	800654e <__multiply+0x5e>
	...

0800661c <__pow5mult>:
 800661c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006620:	4615      	mov	r5, r2
 8006622:	f012 0203 	ands.w	r2, r2, #3
 8006626:	4606      	mov	r6, r0
 8006628:	460f      	mov	r7, r1
 800662a:	d007      	beq.n	800663c <__pow5mult+0x20>
 800662c:	4c21      	ldr	r4, [pc, #132]	; (80066b4 <__pow5mult+0x98>)
 800662e:	3a01      	subs	r2, #1
 8006630:	2300      	movs	r3, #0
 8006632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006636:	f7ff fec9 	bl	80063cc <__multadd>
 800663a:	4607      	mov	r7, r0
 800663c:	10ad      	asrs	r5, r5, #2
 800663e:	d035      	beq.n	80066ac <__pow5mult+0x90>
 8006640:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006642:	b93c      	cbnz	r4, 8006654 <__pow5mult+0x38>
 8006644:	2010      	movs	r0, #16
 8006646:	f7ff fe53 	bl	80062f0 <malloc>
 800664a:	6270      	str	r0, [r6, #36]	; 0x24
 800664c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006650:	6004      	str	r4, [r0, #0]
 8006652:	60c4      	str	r4, [r0, #12]
 8006654:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800665c:	b94c      	cbnz	r4, 8006672 <__pow5mult+0x56>
 800665e:	f240 2171 	movw	r1, #625	; 0x271
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff ff3b 	bl	80064de <__i2b>
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006670:	6003      	str	r3, [r0, #0]
 8006672:	f04f 0800 	mov.w	r8, #0
 8006676:	07eb      	lsls	r3, r5, #31
 8006678:	d50a      	bpl.n	8006690 <__pow5mult+0x74>
 800667a:	4639      	mov	r1, r7
 800667c:	4622      	mov	r2, r4
 800667e:	4630      	mov	r0, r6
 8006680:	f7ff ff36 	bl	80064f0 <__multiply>
 8006684:	4681      	mov	r9, r0
 8006686:	4639      	mov	r1, r7
 8006688:	4630      	mov	r0, r6
 800668a:	f7ff fe88 	bl	800639e <_Bfree>
 800668e:	464f      	mov	r7, r9
 8006690:	106d      	asrs	r5, r5, #1
 8006692:	d00b      	beq.n	80066ac <__pow5mult+0x90>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	b938      	cbnz	r0, 80066a8 <__pow5mult+0x8c>
 8006698:	4622      	mov	r2, r4
 800669a:	4621      	mov	r1, r4
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff ff27 	bl	80064f0 <__multiply>
 80066a2:	6020      	str	r0, [r4, #0]
 80066a4:	f8c0 8000 	str.w	r8, [r0]
 80066a8:	4604      	mov	r4, r0
 80066aa:	e7e4      	b.n	8006676 <__pow5mult+0x5a>
 80066ac:	4638      	mov	r0, r7
 80066ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b2:	bf00      	nop
 80066b4:	08007438 	.word	0x08007438

080066b8 <__lshift>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	460c      	mov	r4, r1
 80066be:	4607      	mov	r7, r0
 80066c0:	4616      	mov	r6, r2
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066c8:	eb0a 0903 	add.w	r9, sl, r3
 80066cc:	6849      	ldr	r1, [r1, #4]
 80066ce:	68a3      	ldr	r3, [r4, #8]
 80066d0:	f109 0501 	add.w	r5, r9, #1
 80066d4:	42ab      	cmp	r3, r5
 80066d6:	db32      	blt.n	800673e <__lshift+0x86>
 80066d8:	4638      	mov	r0, r7
 80066da:	f7ff fe2c 	bl	8006336 <_Balloc>
 80066de:	2300      	movs	r3, #0
 80066e0:	4680      	mov	r8, r0
 80066e2:	461a      	mov	r2, r3
 80066e4:	f100 0114 	add.w	r1, r0, #20
 80066e8:	4553      	cmp	r3, sl
 80066ea:	db2b      	blt.n	8006744 <__lshift+0x8c>
 80066ec:	6920      	ldr	r0, [r4, #16]
 80066ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066f2:	f104 0314 	add.w	r3, r4, #20
 80066f6:	f016 021f 	ands.w	r2, r6, #31
 80066fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006702:	d025      	beq.n	8006750 <__lshift+0x98>
 8006704:	2000      	movs	r0, #0
 8006706:	f1c2 0e20 	rsb	lr, r2, #32
 800670a:	468a      	mov	sl, r1
 800670c:	681e      	ldr	r6, [r3, #0]
 800670e:	4096      	lsls	r6, r2
 8006710:	4330      	orrs	r0, r6
 8006712:	f84a 0b04 	str.w	r0, [sl], #4
 8006716:	f853 0b04 	ldr.w	r0, [r3], #4
 800671a:	459c      	cmp	ip, r3
 800671c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006720:	d814      	bhi.n	800674c <__lshift+0x94>
 8006722:	6048      	str	r0, [r1, #4]
 8006724:	b108      	cbz	r0, 800672a <__lshift+0x72>
 8006726:	f109 0502 	add.w	r5, r9, #2
 800672a:	3d01      	subs	r5, #1
 800672c:	4638      	mov	r0, r7
 800672e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006732:	4621      	mov	r1, r4
 8006734:	f7ff fe33 	bl	800639e <_Bfree>
 8006738:	4640      	mov	r0, r8
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	3101      	adds	r1, #1
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	e7c7      	b.n	80066d4 <__lshift+0x1c>
 8006744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006748:	3301      	adds	r3, #1
 800674a:	e7cd      	b.n	80066e8 <__lshift+0x30>
 800674c:	4651      	mov	r1, sl
 800674e:	e7dc      	b.n	800670a <__lshift+0x52>
 8006750:	3904      	subs	r1, #4
 8006752:	f853 2b04 	ldr.w	r2, [r3], #4
 8006756:	459c      	cmp	ip, r3
 8006758:	f841 2f04 	str.w	r2, [r1, #4]!
 800675c:	d8f9      	bhi.n	8006752 <__lshift+0x9a>
 800675e:	e7e4      	b.n	800672a <__lshift+0x72>

08006760 <__mcmp>:
 8006760:	6903      	ldr	r3, [r0, #16]
 8006762:	690a      	ldr	r2, [r1, #16]
 8006764:	b530      	push	{r4, r5, lr}
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	d10c      	bne.n	8006784 <__mcmp+0x24>
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	3014      	adds	r0, #20
 800676e:	3114      	adds	r1, #20
 8006770:	1884      	adds	r4, r0, r2
 8006772:	4411      	add	r1, r2
 8006774:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006778:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800677c:	4295      	cmp	r5, r2
 800677e:	d003      	beq.n	8006788 <__mcmp+0x28>
 8006780:	d305      	bcc.n	800678e <__mcmp+0x2e>
 8006782:	2301      	movs	r3, #1
 8006784:	4618      	mov	r0, r3
 8006786:	bd30      	pop	{r4, r5, pc}
 8006788:	42a0      	cmp	r0, r4
 800678a:	d3f3      	bcc.n	8006774 <__mcmp+0x14>
 800678c:	e7fa      	b.n	8006784 <__mcmp+0x24>
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	e7f7      	b.n	8006784 <__mcmp+0x24>

08006794 <__mdiff>:
 8006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	460d      	mov	r5, r1
 800679a:	4607      	mov	r7, r0
 800679c:	4611      	mov	r1, r2
 800679e:	4628      	mov	r0, r5
 80067a0:	4614      	mov	r4, r2
 80067a2:	f7ff ffdd 	bl	8006760 <__mcmp>
 80067a6:	1e06      	subs	r6, r0, #0
 80067a8:	d108      	bne.n	80067bc <__mdiff+0x28>
 80067aa:	4631      	mov	r1, r6
 80067ac:	4638      	mov	r0, r7
 80067ae:	f7ff fdc2 	bl	8006336 <_Balloc>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	bfa4      	itt	ge
 80067be:	4623      	movge	r3, r4
 80067c0:	462c      	movge	r4, r5
 80067c2:	4638      	mov	r0, r7
 80067c4:	6861      	ldr	r1, [r4, #4]
 80067c6:	bfa6      	itte	ge
 80067c8:	461d      	movge	r5, r3
 80067ca:	2600      	movge	r6, #0
 80067cc:	2601      	movlt	r6, #1
 80067ce:	f7ff fdb2 	bl	8006336 <_Balloc>
 80067d2:	f04f 0e00 	mov.w	lr, #0
 80067d6:	60c6      	str	r6, [r0, #12]
 80067d8:	692b      	ldr	r3, [r5, #16]
 80067da:	6926      	ldr	r6, [r4, #16]
 80067dc:	f104 0214 	add.w	r2, r4, #20
 80067e0:	f105 0914 	add.w	r9, r5, #20
 80067e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067ec:	f100 0114 	add.w	r1, r0, #20
 80067f0:	f852 ab04 	ldr.w	sl, [r2], #4
 80067f4:	f859 5b04 	ldr.w	r5, [r9], #4
 80067f8:	fa1f f38a 	uxth.w	r3, sl
 80067fc:	4473      	add	r3, lr
 80067fe:	b2ac      	uxth	r4, r5
 8006800:	1b1b      	subs	r3, r3, r4
 8006802:	0c2c      	lsrs	r4, r5, #16
 8006804:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006808:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800680c:	b29b      	uxth	r3, r3
 800680e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006812:	45c8      	cmp	r8, r9
 8006814:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006818:	4694      	mov	ip, r2
 800681a:	f841 4b04 	str.w	r4, [r1], #4
 800681e:	d8e7      	bhi.n	80067f0 <__mdiff+0x5c>
 8006820:	45bc      	cmp	ip, r7
 8006822:	d304      	bcc.n	800682e <__mdiff+0x9a>
 8006824:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006828:	b183      	cbz	r3, 800684c <__mdiff+0xb8>
 800682a:	6106      	str	r6, [r0, #16]
 800682c:	e7c4      	b.n	80067b8 <__mdiff+0x24>
 800682e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006832:	b2a2      	uxth	r2, r4
 8006834:	4472      	add	r2, lr
 8006836:	1413      	asrs	r3, r2, #16
 8006838:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800683c:	b292      	uxth	r2, r2
 800683e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006842:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006846:	f841 2b04 	str.w	r2, [r1], #4
 800684a:	e7e9      	b.n	8006820 <__mdiff+0x8c>
 800684c:	3e01      	subs	r6, #1
 800684e:	e7e9      	b.n	8006824 <__mdiff+0x90>

08006850 <__d2b>:
 8006850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006854:	461c      	mov	r4, r3
 8006856:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800685a:	2101      	movs	r1, #1
 800685c:	4690      	mov	r8, r2
 800685e:	f7ff fd6a 	bl	8006336 <_Balloc>
 8006862:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006866:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800686a:	4607      	mov	r7, r0
 800686c:	bb34      	cbnz	r4, 80068bc <__d2b+0x6c>
 800686e:	9201      	str	r2, [sp, #4]
 8006870:	f1b8 0200 	subs.w	r2, r8, #0
 8006874:	d027      	beq.n	80068c6 <__d2b+0x76>
 8006876:	a802      	add	r0, sp, #8
 8006878:	f840 2d08 	str.w	r2, [r0, #-8]!
 800687c:	f7ff fe00 	bl	8006480 <__lo0bits>
 8006880:	9900      	ldr	r1, [sp, #0]
 8006882:	b1f0      	cbz	r0, 80068c2 <__d2b+0x72>
 8006884:	9a01      	ldr	r2, [sp, #4]
 8006886:	f1c0 0320 	rsb	r3, r0, #32
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	430b      	orrs	r3, r1
 8006890:	40c2      	lsrs	r2, r0
 8006892:	617b      	str	r3, [r7, #20]
 8006894:	9201      	str	r2, [sp, #4]
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	bf14      	ite	ne
 800689c:	2102      	movne	r1, #2
 800689e:	2101      	moveq	r1, #1
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	6139      	str	r1, [r7, #16]
 80068a4:	b1c4      	cbz	r4, 80068d8 <__d2b+0x88>
 80068a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80068aa:	4404      	add	r4, r0
 80068ac:	6034      	str	r4, [r6, #0]
 80068ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068b2:	6028      	str	r0, [r5, #0]
 80068b4:	4638      	mov	r0, r7
 80068b6:	b002      	add	sp, #8
 80068b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068c0:	e7d5      	b.n	800686e <__d2b+0x1e>
 80068c2:	6179      	str	r1, [r7, #20]
 80068c4:	e7e7      	b.n	8006896 <__d2b+0x46>
 80068c6:	a801      	add	r0, sp, #4
 80068c8:	f7ff fdda 	bl	8006480 <__lo0bits>
 80068cc:	2101      	movs	r1, #1
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	6139      	str	r1, [r7, #16]
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	3020      	adds	r0, #32
 80068d6:	e7e5      	b.n	80068a4 <__d2b+0x54>
 80068d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80068e0:	6030      	str	r0, [r6, #0]
 80068e2:	6918      	ldr	r0, [r3, #16]
 80068e4:	f7ff fdad 	bl	8006442 <__hi0bits>
 80068e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068ec:	e7e1      	b.n	80068b2 <__d2b+0x62>
	...

080068f0 <_free_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4605      	mov	r5, r0
 80068f4:	2900      	cmp	r1, #0
 80068f6:	d043      	beq.n	8006980 <_free_r+0x90>
 80068f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068fc:	1f0c      	subs	r4, r1, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	bfb8      	it	lt
 8006902:	18e4      	addlt	r4, r4, r3
 8006904:	f7ff fd15 	bl	8006332 <__malloc_lock>
 8006908:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <_free_r+0x94>)
 800690a:	6813      	ldr	r3, [r2, #0]
 800690c:	4610      	mov	r0, r2
 800690e:	b933      	cbnz	r3, 800691e <_free_r+0x2e>
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	6014      	str	r4, [r2, #0]
 8006914:	4628      	mov	r0, r5
 8006916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800691a:	f7ff bd0b 	b.w	8006334 <__malloc_unlock>
 800691e:	42a3      	cmp	r3, r4
 8006920:	d90b      	bls.n	800693a <_free_r+0x4a>
 8006922:	6821      	ldr	r1, [r4, #0]
 8006924:	1862      	adds	r2, r4, r1
 8006926:	4293      	cmp	r3, r2
 8006928:	bf01      	itttt	eq
 800692a:	681a      	ldreq	r2, [r3, #0]
 800692c:	685b      	ldreq	r3, [r3, #4]
 800692e:	1852      	addeq	r2, r2, r1
 8006930:	6022      	streq	r2, [r4, #0]
 8006932:	6063      	str	r3, [r4, #4]
 8006934:	6004      	str	r4, [r0, #0]
 8006936:	e7ed      	b.n	8006914 <_free_r+0x24>
 8006938:	4613      	mov	r3, r2
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	b10a      	cbz	r2, 8006942 <_free_r+0x52>
 800693e:	42a2      	cmp	r2, r4
 8006940:	d9fa      	bls.n	8006938 <_free_r+0x48>
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	1858      	adds	r0, r3, r1
 8006946:	42a0      	cmp	r0, r4
 8006948:	d10b      	bne.n	8006962 <_free_r+0x72>
 800694a:	6820      	ldr	r0, [r4, #0]
 800694c:	4401      	add	r1, r0
 800694e:	1858      	adds	r0, r3, r1
 8006950:	4282      	cmp	r2, r0
 8006952:	6019      	str	r1, [r3, #0]
 8006954:	d1de      	bne.n	8006914 <_free_r+0x24>
 8006956:	6810      	ldr	r0, [r2, #0]
 8006958:	6852      	ldr	r2, [r2, #4]
 800695a:	4401      	add	r1, r0
 800695c:	6019      	str	r1, [r3, #0]
 800695e:	605a      	str	r2, [r3, #4]
 8006960:	e7d8      	b.n	8006914 <_free_r+0x24>
 8006962:	d902      	bls.n	800696a <_free_r+0x7a>
 8006964:	230c      	movs	r3, #12
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	e7d4      	b.n	8006914 <_free_r+0x24>
 800696a:	6820      	ldr	r0, [r4, #0]
 800696c:	1821      	adds	r1, r4, r0
 800696e:	428a      	cmp	r2, r1
 8006970:	bf01      	itttt	eq
 8006972:	6811      	ldreq	r1, [r2, #0]
 8006974:	6852      	ldreq	r2, [r2, #4]
 8006976:	1809      	addeq	r1, r1, r0
 8006978:	6021      	streq	r1, [r4, #0]
 800697a:	6062      	str	r2, [r4, #4]
 800697c:	605c      	str	r4, [r3, #4]
 800697e:	e7c9      	b.n	8006914 <_free_r+0x24>
 8006980:	bd38      	pop	{r3, r4, r5, pc}
 8006982:	bf00      	nop
 8006984:	200002a0 	.word	0x200002a0

08006988 <__sfputc_r>:
 8006988:	6893      	ldr	r3, [r2, #8]
 800698a:	b410      	push	{r4}
 800698c:	3b01      	subs	r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	6093      	str	r3, [r2, #8]
 8006992:	da07      	bge.n	80069a4 <__sfputc_r+0x1c>
 8006994:	6994      	ldr	r4, [r2, #24]
 8006996:	42a3      	cmp	r3, r4
 8006998:	db01      	blt.n	800699e <__sfputc_r+0x16>
 800699a:	290a      	cmp	r1, #10
 800699c:	d102      	bne.n	80069a4 <__sfputc_r+0x1c>
 800699e:	bc10      	pop	{r4}
 80069a0:	f7fe bbb8 	b.w	8005114 <__swbuf_r>
 80069a4:	6813      	ldr	r3, [r2, #0]
 80069a6:	1c58      	adds	r0, r3, #1
 80069a8:	6010      	str	r0, [r2, #0]
 80069aa:	7019      	strb	r1, [r3, #0]
 80069ac:	4608      	mov	r0, r1
 80069ae:	bc10      	pop	{r4}
 80069b0:	4770      	bx	lr

080069b2 <__sfputs_r>:
 80069b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b4:	4606      	mov	r6, r0
 80069b6:	460f      	mov	r7, r1
 80069b8:	4614      	mov	r4, r2
 80069ba:	18d5      	adds	r5, r2, r3
 80069bc:	42ac      	cmp	r4, r5
 80069be:	d101      	bne.n	80069c4 <__sfputs_r+0x12>
 80069c0:	2000      	movs	r0, #0
 80069c2:	e007      	b.n	80069d4 <__sfputs_r+0x22>
 80069c4:	463a      	mov	r2, r7
 80069c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ca:	4630      	mov	r0, r6
 80069cc:	f7ff ffdc 	bl	8006988 <__sfputc_r>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d1f3      	bne.n	80069bc <__sfputs_r+0xa>
 80069d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069d8 <_vfiprintf_r>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	460c      	mov	r4, r1
 80069de:	b09d      	sub	sp, #116	; 0x74
 80069e0:	4617      	mov	r7, r2
 80069e2:	461d      	mov	r5, r3
 80069e4:	4606      	mov	r6, r0
 80069e6:	b118      	cbz	r0, 80069f0 <_vfiprintf_r+0x18>
 80069e8:	6983      	ldr	r3, [r0, #24]
 80069ea:	b90b      	cbnz	r3, 80069f0 <_vfiprintf_r+0x18>
 80069ec:	f7ff fb84 	bl	80060f8 <__sinit>
 80069f0:	4b7c      	ldr	r3, [pc, #496]	; (8006be4 <_vfiprintf_r+0x20c>)
 80069f2:	429c      	cmp	r4, r3
 80069f4:	d158      	bne.n	8006aa8 <_vfiprintf_r+0xd0>
 80069f6:	6874      	ldr	r4, [r6, #4]
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	0718      	lsls	r0, r3, #28
 80069fc:	d55e      	bpl.n	8006abc <_vfiprintf_r+0xe4>
 80069fe:	6923      	ldr	r3, [r4, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d05b      	beq.n	8006abc <_vfiprintf_r+0xe4>
 8006a04:	2300      	movs	r3, #0
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	2320      	movs	r3, #32
 8006a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a0e:	2330      	movs	r3, #48	; 0x30
 8006a10:	f04f 0b01 	mov.w	fp, #1
 8006a14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a18:	9503      	str	r5, [sp, #12]
 8006a1a:	46b8      	mov	r8, r7
 8006a1c:	4645      	mov	r5, r8
 8006a1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a22:	b10b      	cbz	r3, 8006a28 <_vfiprintf_r+0x50>
 8006a24:	2b25      	cmp	r3, #37	; 0x25
 8006a26:	d154      	bne.n	8006ad2 <_vfiprintf_r+0xfa>
 8006a28:	ebb8 0a07 	subs.w	sl, r8, r7
 8006a2c:	d00b      	beq.n	8006a46 <_vfiprintf_r+0x6e>
 8006a2e:	4653      	mov	r3, sl
 8006a30:	463a      	mov	r2, r7
 8006a32:	4621      	mov	r1, r4
 8006a34:	4630      	mov	r0, r6
 8006a36:	f7ff ffbc 	bl	80069b2 <__sfputs_r>
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f000 80c2 	beq.w	8006bc4 <_vfiprintf_r+0x1ec>
 8006a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a42:	4453      	add	r3, sl
 8006a44:	9309      	str	r3, [sp, #36]	; 0x24
 8006a46:	f898 3000 	ldrb.w	r3, [r8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80ba 	beq.w	8006bc4 <_vfiprintf_r+0x1ec>
 8006a50:	2300      	movs	r3, #0
 8006a52:	f04f 32ff 	mov.w	r2, #4294967295
 8006a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	9307      	str	r3, [sp, #28]
 8006a5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a62:	931a      	str	r3, [sp, #104]	; 0x68
 8006a64:	46a8      	mov	r8, r5
 8006a66:	2205      	movs	r2, #5
 8006a68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006a6c:	485e      	ldr	r0, [pc, #376]	; (8006be8 <_vfiprintf_r+0x210>)
 8006a6e:	f7ff fc47 	bl	8006300 <memchr>
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	bb78      	cbnz	r0, 8006ad6 <_vfiprintf_r+0xfe>
 8006a76:	06d9      	lsls	r1, r3, #27
 8006a78:	bf44      	itt	mi
 8006a7a:	2220      	movmi	r2, #32
 8006a7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a80:	071a      	lsls	r2, r3, #28
 8006a82:	bf44      	itt	mi
 8006a84:	222b      	movmi	r2, #43	; 0x2b
 8006a86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a8a:	782a      	ldrb	r2, [r5, #0]
 8006a8c:	2a2a      	cmp	r2, #42	; 0x2a
 8006a8e:	d02a      	beq.n	8006ae6 <_vfiprintf_r+0x10e>
 8006a90:	46a8      	mov	r8, r5
 8006a92:	2000      	movs	r0, #0
 8006a94:	250a      	movs	r5, #10
 8006a96:	9a07      	ldr	r2, [sp, #28]
 8006a98:	4641      	mov	r1, r8
 8006a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a9e:	3b30      	subs	r3, #48	; 0x30
 8006aa0:	2b09      	cmp	r3, #9
 8006aa2:	d969      	bls.n	8006b78 <_vfiprintf_r+0x1a0>
 8006aa4:	b360      	cbz	r0, 8006b00 <_vfiprintf_r+0x128>
 8006aa6:	e024      	b.n	8006af2 <_vfiprintf_r+0x11a>
 8006aa8:	4b50      	ldr	r3, [pc, #320]	; (8006bec <_vfiprintf_r+0x214>)
 8006aaa:	429c      	cmp	r4, r3
 8006aac:	d101      	bne.n	8006ab2 <_vfiprintf_r+0xda>
 8006aae:	68b4      	ldr	r4, [r6, #8]
 8006ab0:	e7a2      	b.n	80069f8 <_vfiprintf_r+0x20>
 8006ab2:	4b4f      	ldr	r3, [pc, #316]	; (8006bf0 <_vfiprintf_r+0x218>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	bf08      	it	eq
 8006ab8:	68f4      	ldreq	r4, [r6, #12]
 8006aba:	e79d      	b.n	80069f8 <_vfiprintf_r+0x20>
 8006abc:	4621      	mov	r1, r4
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7fe fb7a 	bl	80051b8 <__swsetup_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d09d      	beq.n	8006a04 <_vfiprintf_r+0x2c>
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	b01d      	add	sp, #116	; 0x74
 8006ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad2:	46a8      	mov	r8, r5
 8006ad4:	e7a2      	b.n	8006a1c <_vfiprintf_r+0x44>
 8006ad6:	4a44      	ldr	r2, [pc, #272]	; (8006be8 <_vfiprintf_r+0x210>)
 8006ad8:	4645      	mov	r5, r8
 8006ada:	1a80      	subs	r0, r0, r2
 8006adc:	fa0b f000 	lsl.w	r0, fp, r0
 8006ae0:	4318      	orrs	r0, r3
 8006ae2:	9004      	str	r0, [sp, #16]
 8006ae4:	e7be      	b.n	8006a64 <_vfiprintf_r+0x8c>
 8006ae6:	9a03      	ldr	r2, [sp, #12]
 8006ae8:	1d11      	adds	r1, r2, #4
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	9103      	str	r1, [sp, #12]
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	db01      	blt.n	8006af6 <_vfiprintf_r+0x11e>
 8006af2:	9207      	str	r2, [sp, #28]
 8006af4:	e004      	b.n	8006b00 <_vfiprintf_r+0x128>
 8006af6:	4252      	negs	r2, r2
 8006af8:	f043 0302 	orr.w	r3, r3, #2
 8006afc:	9207      	str	r2, [sp, #28]
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	f898 3000 	ldrb.w	r3, [r8]
 8006b04:	2b2e      	cmp	r3, #46	; 0x2e
 8006b06:	d10e      	bne.n	8006b26 <_vfiprintf_r+0x14e>
 8006b08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b0e:	d138      	bne.n	8006b82 <_vfiprintf_r+0x1aa>
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	f108 0802 	add.w	r8, r8, #2
 8006b16:	1d1a      	adds	r2, r3, #4
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	9203      	str	r2, [sp, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bfb8      	it	lt
 8006b20:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	4d33      	ldr	r5, [pc, #204]	; (8006bf4 <_vfiprintf_r+0x21c>)
 8006b28:	2203      	movs	r2, #3
 8006b2a:	f898 1000 	ldrb.w	r1, [r8]
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f7ff fbe6 	bl	8006300 <memchr>
 8006b34:	b140      	cbz	r0, 8006b48 <_vfiprintf_r+0x170>
 8006b36:	2340      	movs	r3, #64	; 0x40
 8006b38:	1b40      	subs	r0, r0, r5
 8006b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006b3e:	9b04      	ldr	r3, [sp, #16]
 8006b40:	f108 0801 	add.w	r8, r8, #1
 8006b44:	4303      	orrs	r3, r0
 8006b46:	9304      	str	r3, [sp, #16]
 8006b48:	f898 1000 	ldrb.w	r1, [r8]
 8006b4c:	2206      	movs	r2, #6
 8006b4e:	482a      	ldr	r0, [pc, #168]	; (8006bf8 <_vfiprintf_r+0x220>)
 8006b50:	f108 0701 	add.w	r7, r8, #1
 8006b54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b58:	f7ff fbd2 	bl	8006300 <memchr>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d037      	beq.n	8006bd0 <_vfiprintf_r+0x1f8>
 8006b60:	4b26      	ldr	r3, [pc, #152]	; (8006bfc <_vfiprintf_r+0x224>)
 8006b62:	bb1b      	cbnz	r3, 8006bac <_vfiprintf_r+0x1d4>
 8006b64:	9b03      	ldr	r3, [sp, #12]
 8006b66:	3307      	adds	r3, #7
 8006b68:	f023 0307 	bic.w	r3, r3, #7
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	9303      	str	r3, [sp, #12]
 8006b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b72:	444b      	add	r3, r9
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	e750      	b.n	8006a1a <_vfiprintf_r+0x42>
 8006b78:	fb05 3202 	mla	r2, r5, r2, r3
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	4688      	mov	r8, r1
 8006b80:	e78a      	b.n	8006a98 <_vfiprintf_r+0xc0>
 8006b82:	2300      	movs	r3, #0
 8006b84:	250a      	movs	r5, #10
 8006b86:	4619      	mov	r1, r3
 8006b88:	f108 0801 	add.w	r8, r8, #1
 8006b8c:	9305      	str	r3, [sp, #20]
 8006b8e:	4640      	mov	r0, r8
 8006b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b94:	3a30      	subs	r2, #48	; 0x30
 8006b96:	2a09      	cmp	r2, #9
 8006b98:	d903      	bls.n	8006ba2 <_vfiprintf_r+0x1ca>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0c3      	beq.n	8006b26 <_vfiprintf_r+0x14e>
 8006b9e:	9105      	str	r1, [sp, #20]
 8006ba0:	e7c1      	b.n	8006b26 <_vfiprintf_r+0x14e>
 8006ba2:	fb05 2101 	mla	r1, r5, r1, r2
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4680      	mov	r8, r0
 8006baa:	e7f0      	b.n	8006b8e <_vfiprintf_r+0x1b6>
 8006bac:	ab03      	add	r3, sp, #12
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <_vfiprintf_r+0x228>)
 8006bb4:	a904      	add	r1, sp, #16
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f7fd fdb4 	bl	8004724 <_printf_float>
 8006bbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bc0:	4681      	mov	r9, r0
 8006bc2:	d1d5      	bne.n	8006b70 <_vfiprintf_r+0x198>
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	065b      	lsls	r3, r3, #25
 8006bc8:	f53f af7e 	bmi.w	8006ac8 <_vfiprintf_r+0xf0>
 8006bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bce:	e77d      	b.n	8006acc <_vfiprintf_r+0xf4>
 8006bd0:	ab03      	add	r3, sp, #12
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4622      	mov	r2, r4
 8006bd6:	4b0a      	ldr	r3, [pc, #40]	; (8006c00 <_vfiprintf_r+0x228>)
 8006bd8:	a904      	add	r1, sp, #16
 8006bda:	4630      	mov	r0, r6
 8006bdc:	f7fe f84e 	bl	8004c7c <_printf_i>
 8006be0:	e7ec      	b.n	8006bbc <_vfiprintf_r+0x1e4>
 8006be2:	bf00      	nop
 8006be4:	08007308 	.word	0x08007308
 8006be8:	08007444 	.word	0x08007444
 8006bec:	08007328 	.word	0x08007328
 8006bf0:	080072e8 	.word	0x080072e8
 8006bf4:	0800744a 	.word	0x0800744a
 8006bf8:	0800744e 	.word	0x0800744e
 8006bfc:	08004725 	.word	0x08004725
 8006c00:	080069b3 	.word	0x080069b3

08006c04 <__sread>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0c:	f000 f8a6 	bl	8006d5c <_read_r>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bfab      	itete	ge
 8006c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c16:	89a3      	ldrhlt	r3, [r4, #12]
 8006c18:	181b      	addge	r3, r3, r0
 8006c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c1e:	bfac      	ite	ge
 8006c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c22:	81a3      	strhlt	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__swrite>:
 8006c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2a:	461f      	mov	r7, r3
 8006c2c:	898b      	ldrh	r3, [r1, #12]
 8006c2e:	4605      	mov	r5, r0
 8006c30:	05db      	lsls	r3, r3, #23
 8006c32:	460c      	mov	r4, r1
 8006c34:	4616      	mov	r6, r2
 8006c36:	d505      	bpl.n	8006c44 <__swrite+0x1e>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c40:	f000 f868 	bl	8006d14 <_lseek_r>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	4632      	mov	r2, r6
 8006c48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c4c:	81a3      	strh	r3, [r4, #12]
 8006c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c52:	463b      	mov	r3, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5a:	f000 b817 	b.w	8006c8c <_write_r>

08006c5e <__sseek>:
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	460c      	mov	r4, r1
 8006c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c66:	f000 f855 	bl	8006d14 <_lseek_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	89a3      	ldrh	r3, [r4, #12]
 8006c6e:	bf15      	itete	ne
 8006c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c7a:	81a3      	strheq	r3, [r4, #12]
 8006c7c:	bf18      	it	ne
 8006c7e:	81a3      	strhne	r3, [r4, #12]
 8006c80:	bd10      	pop	{r4, pc}

08006c82 <__sclose>:
 8006c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c86:	f000 b813 	b.w	8006cb0 <_close_r>
	...

08006c8c <_write_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4605      	mov	r5, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	2200      	movs	r2, #0
 8006c96:	4c05      	ldr	r4, [pc, #20]	; (8006cac <_write_r+0x20>)
 8006c98:	6022      	str	r2, [r4, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f7fb f812 	bl	8001cc4 <_write>
 8006ca0:	1c43      	adds	r3, r0, #1
 8006ca2:	d102      	bne.n	8006caa <_write_r+0x1e>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	b103      	cbz	r3, 8006caa <_write_r+0x1e>
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	bd38      	pop	{r3, r4, r5, pc}
 8006cac:	20000404 	.word	0x20000404

08006cb0 <_close_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4c05      	ldr	r4, [pc, #20]	; (8006ccc <_close_r+0x1c>)
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	4608      	mov	r0, r1
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	f7fb f82e 	bl	8001d1c <_close>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_close_r+0x1a>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_close_r+0x1a>
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	20000404 	.word	0x20000404

08006cd0 <_fstat_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4c06      	ldr	r4, [pc, #24]	; (8006cf0 <_fstat_r+0x20>)
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	4611      	mov	r1, r2
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	f7fb f86d 	bl	8001dbc <_fstat>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	d102      	bne.n	8006cec <_fstat_r+0x1c>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	b103      	cbz	r3, 8006cec <_fstat_r+0x1c>
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	bd38      	pop	{r3, r4, r5, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000404 	.word	0x20000404

08006cf4 <_isatty_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	4c05      	ldr	r4, [pc, #20]	; (8006d10 <_isatty_r+0x1c>)
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	f7fa ffca 	bl	8001c98 <_isatty>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_isatty_r+0x1a>
 8006d08:	6823      	ldr	r3, [r4, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_isatty_r+0x1a>
 8006d0c:	602b      	str	r3, [r5, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	20000404 	.word	0x20000404

08006d14 <_lseek_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4605      	mov	r5, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	4c05      	ldr	r4, [pc, #20]	; (8006d34 <_lseek_r+0x20>)
 8006d20:	6022      	str	r2, [r4, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f7fb f811 	bl	8001d4a <_lseek>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_lseek_r+0x1e>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_lseek_r+0x1e>
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	20000404 	.word	0x20000404

08006d38 <__ascii_mbtowc>:
 8006d38:	b082      	sub	sp, #8
 8006d3a:	b901      	cbnz	r1, 8006d3e <__ascii_mbtowc+0x6>
 8006d3c:	a901      	add	r1, sp, #4
 8006d3e:	b142      	cbz	r2, 8006d52 <__ascii_mbtowc+0x1a>
 8006d40:	b14b      	cbz	r3, 8006d56 <__ascii_mbtowc+0x1e>
 8006d42:	7813      	ldrb	r3, [r2, #0]
 8006d44:	600b      	str	r3, [r1, #0]
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	1c10      	adds	r0, r2, #0
 8006d4a:	bf18      	it	ne
 8006d4c:	2001      	movne	r0, #1
 8006d4e:	b002      	add	sp, #8
 8006d50:	4770      	bx	lr
 8006d52:	4610      	mov	r0, r2
 8006d54:	e7fb      	b.n	8006d4e <__ascii_mbtowc+0x16>
 8006d56:	f06f 0001 	mvn.w	r0, #1
 8006d5a:	e7f8      	b.n	8006d4e <__ascii_mbtowc+0x16>

08006d5c <_read_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	4605      	mov	r5, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	4611      	mov	r1, r2
 8006d64:	2200      	movs	r2, #0
 8006d66:	4c05      	ldr	r4, [pc, #20]	; (8006d7c <_read_r+0x20>)
 8006d68:	6022      	str	r2, [r4, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f7fa fffe 	bl	8001d6c <_read>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_read_r+0x1e>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_read_r+0x1e>
 8006d78:	602b      	str	r3, [r5, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000404 	.word	0x20000404

08006d80 <__ascii_wctomb>:
 8006d80:	b149      	cbz	r1, 8006d96 <__ascii_wctomb+0x16>
 8006d82:	2aff      	cmp	r2, #255	; 0xff
 8006d84:	bf8b      	itete	hi
 8006d86:	238a      	movhi	r3, #138	; 0x8a
 8006d88:	700a      	strbls	r2, [r1, #0]
 8006d8a:	6003      	strhi	r3, [r0, #0]
 8006d8c:	2001      	movls	r0, #1
 8006d8e:	bf88      	it	hi
 8006d90:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d94:	4770      	bx	lr
 8006d96:	4608      	mov	r0, r1
 8006d98:	4770      	bx	lr
	...

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
