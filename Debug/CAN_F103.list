
CAN_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006534  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08006648  08006648  00016648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc0  08006bc0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006bc0  08006bc0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bc0  08006bc0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bc4  08006bc4  00016bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001dc  08006da4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08006da4  000203e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012867  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b3  00000000  00000000  00032a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  00035120  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  000361c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017057  00000000  00000000  00037148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f408  00000000  00000000  0004e19f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000792f3  00000000  00000000  0005d5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d689a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005440  00000000  00000000  000d6918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800662c 	.word	0x0800662c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800662c 	.word	0x0800662c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002b2:	f1a4 0401 	sub.w	r4, r4, #1
 80002b6:	d1e9      	bne.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 ff04 	bl	80018ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f8bc 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 f9cc 	bl	8000e44 <MX_GPIO_Init>
  //  MX_USART2_UART_Init();
  MX_CAN_Init();
 8000aac:	f000 f906 	bl	8000cbc <MX_CAN_Init>
  MX_I2C1_Init();
 8000ab0:	f000 f93c 	bl	8000d2c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000ab4:	f000 f96e 	bl	8000d94 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  vUART_Init(&huart2, USART2, &uart_receive_handle);
 8000ab8:	4a48      	ldr	r2, [pc, #288]	; (8000bdc <main+0x140>)
 8000aba:	4949      	ldr	r1, [pc, #292]	; (8000be0 <main+0x144>)
 8000abc:	4849      	ldr	r0, [pc, #292]	; (8000be4 <main+0x148>)
 8000abe:	f000 fa45 	bl	8000f4c <vUART_Init>
  //  vIWDG_Init(&hiwdg, IWDG_TIME);
  __RETARGET_INIT(DEBUG_USART);
 8000ac2:	4848      	ldr	r0, [pc, #288]	; (8000be4 <main+0x148>)
 8000ac4:	f000 fbba 	bl	800123c <RetargetInit>
  __PRINT_RESET_CAUSE();
 8000ac8:	f000 fabc 	bl	8001044 <resetCauseGet>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fafe 	bl	80010d0 <resetCauseGetName>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fe28 	bl	800472c <iprintf>
 8000adc:	4842      	ldr	r0, [pc, #264]	; (8000be8 <main+0x14c>)
 8000ade:	f003 fe99 	bl	8004814 <puts>
  __MY_OFF_ALL_LED();
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	4841      	ldr	r0, [pc, #260]	; (8000bec <main+0x150>)
 8000ae8:	f001 fabe 	bl	8002068 <HAL_GPIO_WritePin>
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af2:	483f      	ldr	r0, [pc, #252]	; (8000bf0 <main+0x154>)
 8000af4:	f001 fab8 	bl	8002068 <HAL_GPIO_WritePin>
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afe:	483c      	ldr	r0, [pc, #240]	; (8000bf0 <main+0x154>)
 8000b00:	f001 fab2 	bl	8002068 <HAL_GPIO_WritePin>
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	4838      	ldr	r0, [pc, #224]	; (8000bec <main+0x150>)
 8000b0c:	f001 faac 	bl	8002068 <HAL_GPIO_WritePin>
  printf("IWDG set %lums\r\n", IWDG_TIME);
 8000b10:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b14:	4837      	ldr	r0, [pc, #220]	; (8000bf4 <main+0x158>)
 8000b16:	f003 fe09 	bl	800472c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    superloop_first_tick = HAL_GetTick();
 8000b1a:	f000 feef 	bl	80018fc <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	4b35      	ldr	r3, [pc, #212]	; (8000bf8 <main+0x15c>)
 8000b22:	601a      	str	r2, [r3, #0]
    /* Task blink led 500ms */
    if (superloop_first_tick - prev_time_blink_led >= BLINK_LED_FREQ)
 8000b24:	4b34      	ldr	r3, [pc, #208]	; (8000bf8 <main+0x15c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <main+0x160>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b32:	d30e      	bcc.n	8000b52 <main+0xb6>
    {
      prev_time_blink_led = superloop_first_tick;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <main+0x15c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a30      	ldr	r2, [pc, #192]	; (8000bfc <main+0x160>)
 8000b3a:	6013      	str	r3, [r2, #0]
      __MY_TOGGLE_LED(LED_4);
 8000b3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b40:	482a      	ldr	r0, [pc, #168]	; (8000bec <main+0x150>)
 8000b42:	f001 faa9 	bl	8002098 <HAL_GPIO_TogglePin>
      __PRINT_TIME_STAMP();
 8000b46:	f000 fed9 	bl	80018fc <HAL_GetTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fb0d 	bl	800116c <vTimeStamp>
    }

    /* Task read sensor 1000ms */
    if (superloop_first_tick - prev_time_app >= APP1_FREQ)
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <main+0x15c>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <main+0x164>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	2b31      	cmp	r3, #49	; 0x31
 8000b5e:	d92d      	bls.n	8000bbc <main+0x120>
    {
      prev_time_app = superloop_first_tick;
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <main+0x15c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <main+0x164>)
 8000b66:	6013      	str	r3, [r2, #0]
      if (uart_receive_handle.rx_cplt_flag == 1)
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <main+0x140>)
 8000b6a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d124      	bne.n	8000bbc <main+0x120>
      {
        printf("Input string :\"%s\"\r\n", uart_receive_handle.rx_buffer);
 8000b72:	4924      	ldr	r1, [pc, #144]	; (8000c04 <main+0x168>)
 8000b74:	4824      	ldr	r0, [pc, #144]	; (8000c08 <main+0x16c>)
 8000b76:	f003 fdd9 	bl	800472c <iprintf>
        if (IS_STRING(&uart_receive_handle.rx_buffer, "led1 on"))
 8000b7a:	4924      	ldr	r1, [pc, #144]	; (8000c0c <main+0x170>)
 8000b7c:	4821      	ldr	r0, [pc, #132]	; (8000c04 <main+0x168>)
 8000b7e:	f7ff fae7 	bl	8000150 <strcmp>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <main+0xf8>
        {
          __MY_WRITE_LED(LED_1, ON);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2120      	movs	r1, #32
 8000b8c:	4817      	ldr	r0, [pc, #92]	; (8000bec <main+0x150>)
 8000b8e:	f001 fa6b 	bl	8002068 <HAL_GPIO_WritePin>
 8000b92:	e00f      	b.n	8000bb4 <main+0x118>
        }
        else if (IS_STRING(&uart_receive_handle.rx_buffer, "led1 off"))
 8000b94:	491e      	ldr	r1, [pc, #120]	; (8000c10 <main+0x174>)
 8000b96:	481b      	ldr	r0, [pc, #108]	; (8000c04 <main+0x168>)
 8000b98:	f7ff fada 	bl	8000150 <strcmp>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <main+0x112>
        {
          __MY_WRITE_LED(LED_1, OFF);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2120      	movs	r1, #32
 8000ba6:	4811      	ldr	r0, [pc, #68]	; (8000bec <main+0x150>)
 8000ba8:	f001 fa5e 	bl	8002068 <HAL_GPIO_WritePin>
 8000bac:	e002      	b.n	8000bb4 <main+0x118>
        }
        else
        {
          printf("Unknown Command\r\n");
 8000bae:	4819      	ldr	r0, [pc, #100]	; (8000c14 <main+0x178>)
 8000bb0:	f003 fe30 	bl	8004814 <puts>
        }
//        vServeCLICommand(&uart_receive_handle);
        uart_receive_handle.rx_cplt_flag = 0;
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <main+0x140>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      }
    }

    superloop_process_time = HAL_GetTick() - superloop_first_tick;
 8000bbc:	f000 fe9e 	bl	80018fc <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <main+0x15c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <main+0x17c>)
 8000bca:	6013      	str	r3, [r2, #0]
    vMCUProcessingEvaluate(&mcu_processing_time, superloop_process_time);
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <main+0x17c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4812      	ldr	r0, [pc, #72]	; (8000c1c <main+0x180>)
 8000bd4:	f000 fb14 	bl	8001200 <vMCUProcessingEvaluate>
    superloop_first_tick = HAL_GetTick();
 8000bd8:	e79f      	b.n	8000b1a <main+0x7e>
 8000bda:	bf00      	nop
 8000bdc:	20000208 	.word	0x20000208
 8000be0:	40004400 	.word	0x40004400
 8000be4:	2000035c 	.word	0x2000035c
 8000be8:	08006648 	.word	0x08006648
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	0800664c 	.word	0x0800664c
 8000bf8:	20000200 	.word	0x20000200
 8000bfc:	200001f8 	.word	0x200001f8
 8000c00:	200001fc 	.word	0x200001fc
 8000c04:	20000209 	.word	0x20000209
 8000c08:	08006660 	.word	0x08006660
 8000c0c:	08006678 	.word	0x08006678
 8000c10:	08006680 	.word	0x08006680
 8000c14:	0800668c 	.word	0x0800668c
 8000c18:	20000204 	.word	0x20000204
 8000c1c:	20000270 	.word	0x20000270

08000c20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b090      	sub	sp, #64	; 0x40
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	2228      	movs	r2, #40	; 0x28
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 f8bc 	bl	8003dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000c42:	2309      	movs	r3, #9
 8000c44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	2301      	movs	r3, #1
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c54:	2301      	movs	r3, #1
 8000c56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c68:	f107 0318 	add.w	r3, r7, #24
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 fb75 	bl	800235c <HAL_RCC_OscConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <SystemClock_Config+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c78:	21ca      	movs	r1, #202	; 0xca
 8000c7a:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <SystemClock_Config+0x98>)
 8000c7c:	f000 f946 	bl	8000f0c <_Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
     */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c80:	230f      	movs	r3, #15
 8000c82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2302      	movs	r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2102      	movs	r1, #2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fdde 	bl	800285c <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <SystemClock_Config+0x8e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000ca6:	21d6      	movs	r1, #214	; 0xd6
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <SystemClock_Config+0x98>)
 8000caa:	f000 f92f 	bl	8000f0c <_Error_Handler>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3740      	adds	r7, #64	; 0x40
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	080066a0 	.word	0x080066a0

08000cbc <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cc2:	4a18      	ldr	r2, [pc, #96]	; (8000d24 <MX_CAN_Init+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cc8:	2210      	movs	r2, #16
 8000cca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_CAN_Init+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_CAN_Init+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_CAN_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d02:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_CAN_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_CAN_Init+0x64>)
 8000d0a:	f000 fe01 	bl	8001910 <HAL_CAN_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <MX_CAN_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d14:	21f7      	movs	r1, #247	; 0xf7
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_CAN_Init+0x6c>)
 8000d18:	f000 f8f8 	bl	8000f0c <_Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200002f4 	.word	0x200002f4
 8000d24:	40006400 	.word	0x40006400
 8000d28:	080066a0 	.word	0x080066a0

08000d2c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d32:	4a15      	ldr	r2, [pc, #84]	; (8000d88 <MX_I2C1_Init+0x5c>)
 8000d34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d38:	4a14      	ldr	r2, [pc, #80]	; (8000d8c <MX_I2C1_Init+0x60>)
 8000d3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <MX_I2C1_Init+0x58>)
 8000d6a:	f001 f9cf 	bl	800210c <HAL_I2C_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d004      	beq.n	8000d7e <MX_I2C1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000d74:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_I2C1_Init+0x64>)
 8000d7a:	f000 f8c7 	bl	8000f0c <_Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000288 	.word	0x20000288
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	000186a0 	.word	0x000186a0
 8000d90:	080066a0 	.word	0x080066a0

08000d94 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	463b      	mov	r3, r7
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000db2:	4a22      	ldr	r2, [pc, #136]	; (8000e3c <MX_TIM3_Init+0xa8>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000db8:	2247      	movs	r2, #71	; 0x47
 8000dba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd6:	4818      	ldr	r0, [pc, #96]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000dd8:	f001 ff0c 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <MX_TIM3_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000de2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8000de6:	4816      	ldr	r0, [pc, #88]	; (8000e40 <MX_TIM3_Init+0xac>)
 8000de8:	f000 f890 	bl	8000f0c <_Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000dfa:	f002 f851 	bl	8002ea0 <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d004      	beq.n	8000e0e <MX_TIM3_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e04:	f240 1159 	movw	r1, #345	; 0x159
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_TIM3_Init+0xac>)
 8000e0a:	f000 f87f 	bl	8000f0c <_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	; (8000e38 <MX_TIM3_Init+0xa4>)
 8000e1c:	f002 fa14 	bl	8003248 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <MX_TIM3_Init+0x9c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000e26:	f240 115f 	movw	r1, #351	; 0x15f
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_TIM3_Init+0xac>)
 8000e2c:	f000 f86e 	bl	8000f0c <_Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000031c 	.word	0x2000031c
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	080066a0 	.word	0x080066a0

08000e44 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a27      	ldr	r2, [pc, #156]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e5e:	f043 0320 	orr.w	r3, r3, #32
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_GPIO_Init+0xb8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_1_Pin | USER_LED_4_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000ea6:	4816      	ldr	r0, [pc, #88]	; (8000f00 <MX_GPIO_Init+0xbc>)
 8000ea8:	f001 f8de 	bl	8002068 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BT_UP_Pin BT_CENTER_Pin BT_DOWN_Pin */
  GPIO_InitStruct.Pin = BT_UP_Pin | BT_CENTER_Pin | BT_DOWN_Pin;
 8000eac:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_GPIO_Init+0xc0>)
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_GPIO_Init+0xc4>)
 8000ec2:	f000 ff77 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED_1_Pin USER_LED_4_Pin */
  GPIO_InitStruct.Pin = USER_LED_1_Pin | USER_LED_4_Pin;
 8000ec6:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4808      	ldr	r0, [pc, #32]	; (8000f00 <MX_GPIO_Init+0xbc>)
 8000ee0:	f000 ff68 	bl	8001db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2102      	movs	r1, #2
 8000ee8:	2017      	movs	r0, #23
 8000eea:	f000 fec2 	bl	8001c72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000eee:	2017      	movs	r0, #23
 8000ef0:	f000 fedb 	bl	8001caa <HAL_NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3720      	adds	r7, #32
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40010c00 	.word	0x40010c00
 8000f04:	10210000 	.word	0x10210000
 8000f08:	40010800 	.word	0x40010800

08000f0c <_Error_Handler>:

/* USER CODE BEGIN 4 */
void _Error_Handler(char *file, int line)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  while (1)
  {
    printf("\r\nError file %s line %d", file, line);
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4802      	ldr	r0, [pc, #8]	; (8000f24 <_Error_Handler+0x18>)
 8000f1c:	f003 fc06 	bl	800472c <iprintf>
 8000f20:	e7f9      	b.n	8000f16 <_Error_Handler+0xa>
 8000f22:	bf00      	nop
 8000f24:	080066b4 	.word	0x080066b4

08000f28 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f3a:	f000 fccd 	bl	80018d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40000800 	.word	0x40000800

08000f4c <vUART_Init>:
/* Should be excluded if not used to prevent build errors */
extern USART_StringReceive_t uart_receive_handle;
extern MCUProcessingEvaluate_t mcu_processing_time;

void vUART_Init(UART_HandleTypeDef *huart, USART_TypeDef *USARTx, USART_StringReceive_t *uart_receive_handle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
    huart->Instance = USARTx; /* Select this parameter according to USART Instance configured in .ioc */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	601a      	str	r2, [r3, #0]
    huart->Init.BaudRate = 115200;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f64:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(huart) != HAL_OK) /* Inside HAL_UART_Init also initialize GPIO used for USART */
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f002 f9b2 	bl	80032f4 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <vUART_Init+0x52>
    {
        _Error_Handler(__FILE__, __LINE__);
 8000f96:	2117      	movs	r1, #23
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <vUART_Init+0x68>)
 8000f9a:	f7ff ffb7 	bl	8000f0c <_Error_Handler>
    }
    /* Enable ISR when receive via USART */
    HAL_UART_Receive_IT(huart, (uint8_t *)(&uart_receive_handle->rx_data), 2);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3365      	adds	r3, #101	; 0x65
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	f002 fb30 	bl	800360c <HAL_UART_Receive_IT>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	080066cc 	.word	0x080066cc

08000fb8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    uint8_t i;
    /* Process USART2 Receive_Cplt_IT */
    if (huart->Instance == USART2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <HAL_UART_RxCpltCallback+0x7c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d130      	bne.n	800102c <HAL_UART_RxCpltCallback+0x74>
    {
        /* Reset Receive Buffer whenever index_value = 0 */
        if (uart_receive_handle.rx_index == 0)
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10d      	bne.n	8000fee <HAL_UART_RxCpltCallback+0x36>
        {
            for (i = 0; i < USART_RX_BUFFER_SIZE; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e007      	b.n	8000fe8 <HAL_UART_RxCpltCallback+0x30>
            {
                uart_receive_handle.rx_buffer[i] = 0;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	705a      	strb	r2, [r3, #1]
            for (i = 0; i < USART_RX_BUFFER_SIZE; i++)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b63      	cmp	r3, #99	; 0x63
 8000fec:	d9f4      	bls.n	8000fd8 <HAL_UART_RxCpltCallback+0x20>
            }
        }

        /* Case when user input data not equal to "\r" */
        if (uart_receive_handle.rx_data[0] != 13)
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 8000ff0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000ff4:	2b0d      	cmp	r3, #13
 8000ff6:	d00d      	beq.n	8001014 <HAL_UART_RxCpltCallback+0x5c>
        {
            uart_receive_handle.rx_buffer[uart_receive_handle.rx_index++] = uart_receive_handle.rx_data[0];
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	b2d1      	uxtb	r1, r2
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 8001002:	7011      	strb	r1, [r2, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 8001008:	f893 2065 	ldrb.w	r2, [r3, #101]	; 0x65
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 800100e:	440b      	add	r3, r1
 8001010:	705a      	strb	r2, [r3, #1]
 8001012:	e006      	b.n	8001022 <HAL_UART_RxCpltCallback+0x6a>
        }

        else /* Case when user input data = "\r" */
        {
            uart_receive_handle.rx_index = 0;
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
            uart_receive_handle.rx_cplt_flag = 1;
 800101a:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_UART_RxCpltCallback+0x80>)
 800101c:	2201      	movs	r2, #1
 800101e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        }

        /* Trigger to Receive and jump into ISR on each ISR process is necessary */
        HAL_UART_Receive_IT(&huart2, (uint8_t *)(&uart_receive_handle.rx_data), 1);
 8001022:	2201      	movs	r2, #1
 8001024:	4905      	ldr	r1, [pc, #20]	; (800103c <HAL_UART_RxCpltCallback+0x84>)
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <HAL_UART_RxCpltCallback+0x88>)
 8001028:	f002 faf0 	bl	800360c <HAL_UART_Receive_IT>
    }
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40004400 	.word	0x40004400
 8001038:	20000208 	.word	0x20000208
 800103c:	2000026d 	.word	0x2000026d
 8001040:	2000035c 	.word	0x2000035c

08001044 <resetCauseGet>:
	}
}
#endif /* !configLL_UART */

reset_cause_t resetCauseGet(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
	reset_cause_t reset_cause;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <resetCauseGet+0x84>)
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	2b00      	cmp	r3, #0
 8001050:	da02      	bge.n	8001058 <resetCauseGet+0x14>
	{
		reset_cause = eRESET_CAUSE_LOW_POWER_RESET;
 8001052:	2301      	movs	r3, #1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e02e      	b.n	80010b6 <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <resetCauseGet+0x84>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <resetCauseGet+0x26>
	{
		reset_cause = eRESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8001064:	2302      	movs	r3, #2
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e025      	b.n	80010b6 <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <resetCauseGet+0x84>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <resetCauseGet+0x38>
	{
		reset_cause = eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8001076:	2303      	movs	r3, #3
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e01c      	b.n	80010b6 <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <resetCauseGet+0x84>)
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <resetCauseGet+0x4a>
	{
		reset_cause = eRESET_CAUSE_SOFTWARE_RESET; // This reset is induced by calling the ARM CMSIS `NVIC_SystemReset()` function!
 8001088:	2304      	movs	r3, #4
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	e013      	b.n	80010b6 <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <resetCauseGet+0x84>)
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <resetCauseGet+0x5c>
	{
		reset_cause = eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800109a:	2305      	movs	r3, #5
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	e00a      	b.n	80010b6 <resetCauseGet+0x72>
	}
	else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <resetCauseGet+0x84>)
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <resetCauseGet+0x6e>
	{
		reset_cause = eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 80010ac:	2306      	movs	r3, #6
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	e001      	b.n	80010b6 <resetCauseGet+0x72>
     {
     reset_cause = eRESET_CAUSE_BROWNOUT_RESET;
     } */
	else
	{
		reset_cause = eRESET_CAUSE_UNKNOWN;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71fb      	strb	r3, [r7, #7]
	}

	// Clear all the reset flags or else they will remain set during future resets until system power is fully removed.
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80010b6:	4b05      	ldr	r3, [pc, #20]	; (80010cc <resetCauseGet+0x88>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

	return reset_cause;
 80010bc:	79fb      	ldrb	r3, [r7, #7]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000
 80010cc:	424204e0 	.word	0x424204e0

080010d0 <resetCauseGetName>:

const char *resetCauseGetName(reset_cause_t reset_cause)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	const char *reset_cause_name = "TBD";
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <resetCauseGetName+0x78>)
 80010dc:	60fb      	str	r3, [r7, #12]

	switch (reset_cause)
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b07      	cmp	r3, #7
 80010e2:	d82b      	bhi.n	800113c <resetCauseGetName+0x6c>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <resetCauseGetName+0x1c>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	0800110d 	.word	0x0800110d
 80010f0:	08001113 	.word	0x08001113
 80010f4:	08001119 	.word	0x08001119
 80010f8:	0800111f 	.word	0x0800111f
 80010fc:	08001125 	.word	0x08001125
 8001100:	0800112b 	.word	0x0800112b
 8001104:	08001131 	.word	0x08001131
 8001108:	08001137 	.word	0x08001137
	{
	case eRESET_CAUSE_UNKNOWN:
		reset_cause_name = "UNKNOWN";
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <resetCauseGetName+0x7c>)
 800110e:	60fb      	str	r3, [r7, #12]
		break;
 8001110:	e014      	b.n	800113c <resetCauseGetName+0x6c>
	case eRESET_CAUSE_LOW_POWER_RESET:
		reset_cause_name = "LOW_POWER_RESET";
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <resetCauseGetName+0x80>)
 8001114:	60fb      	str	r3, [r7, #12]
		break;
 8001116:	e011      	b.n	800113c <resetCauseGetName+0x6c>
	case eRESET_CAUSE_WINDOW_WATCHDOG_RESET:
		reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <resetCauseGetName+0x84>)
 800111a:	60fb      	str	r3, [r7, #12]
		break;
 800111c:	e00e      	b.n	800113c <resetCauseGetName+0x6c>
	case eRESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
		reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <resetCauseGetName+0x88>)
 8001120:	60fb      	str	r3, [r7, #12]
		break;
 8001122:	e00b      	b.n	800113c <resetCauseGetName+0x6c>
	case eRESET_CAUSE_SOFTWARE_RESET:
		reset_cause_name = "SOFTWARE_RESET";
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <resetCauseGetName+0x8c>)
 8001126:	60fb      	str	r3, [r7, #12]
		break;
 8001128:	e008      	b.n	800113c <resetCauseGetName+0x6c>
	case eRESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
		reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <resetCauseGetName+0x90>)
 800112c:	60fb      	str	r3, [r7, #12]
		break;
 800112e:	e005      	b.n	800113c <resetCauseGetName+0x6c>
	case eRESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
		reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <resetCauseGetName+0x94>)
 8001132:	60fb      	str	r3, [r7, #12]
		break;
 8001134:	e002      	b.n	800113c <resetCauseGetName+0x6c>
	case eRESET_CAUSE_BROWNOUT_RESET:
		reset_cause_name = "BROWNOUT_RESET (BOR)";
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <resetCauseGetName+0x98>)
 8001138:	60fb      	str	r3, [r7, #12]
		break;
 800113a:	bf00      	nop
	}
	return reset_cause_name;
 800113c:	68fb      	ldr	r3, [r7, #12]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	0800674c 	.word	0x0800674c
 800114c:	08006750 	.word	0x08006750
 8001150:	08006758 	.word	0x08006758
 8001154:	08006768 	.word	0x08006768
 8001158:	08006780 	.word	0x08006780
 800115c:	0800679c 	.word	0x0800679c
 8001160:	080067ac 	.word	0x080067ac
 8001164:	080067dc 	.word	0x080067dc
 8001168:	080067f8 	.word	0x080067f8

0800116c <vTimeStamp>:
	}
	/* USER CODE END Error_Handler_Debug */
}

void vTimeStamp(uint32_t now_tick)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af02      	add	r7, sp, #8
 8001172:	6078      	str	r0, [r7, #4]
	uint8_t second, minute, hour;
	uint32_t millis_second, now_second;

	/* ex: 450235ms => now_second = 450 */
	now_second = now_tick / 1000;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <vTimeStamp+0x88>)
 8001178:	fba2 2303 	umull	r2, r3, r2, r3
 800117c:	099b      	lsrs	r3, r3, #6
 800117e:	613b      	str	r3, [r7, #16]
	/* ex: 450235ms => millis_second = 235 */
	millis_second = now_tick - now_second * 1000;
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	60fb      	str	r3, [r7, #12]
	/* ex: 450235ms => 450/60 = 7 */
	minute = now_second / 60;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <vTimeStamp+0x8c>)
 8001194:	fba2 2303 	umull	r2, r3, r2, r3
 8001198:	095b      	lsrs	r3, r3, #5
 800119a:	75fb      	strb	r3, [r7, #23]
	/* ex: 450235ms => 450 - 7*60 = 30 */
	second = now_second - minute * 60;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	4619      	mov	r1, r3
 80011a4:	0109      	lsls	r1, r1, #4
 80011a6:	1acb      	subs	r3, r1, r3
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	72fb      	strb	r3, [r7, #11]
	if (minute > 60)
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	2b3c      	cmp	r3, #60	; 0x3c
 80011b4:	d90f      	bls.n	80011d6 <vTimeStamp+0x6a>
	{
		hour = minute / 60;
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <vTimeStamp+0x8c>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	75bb      	strb	r3, [r7, #22]
		minute = minute - hour * 60;
 80011c2:	7dbb      	ldrb	r3, [r7, #22]
 80011c4:	461a      	mov	r2, r3
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	4413      	add	r3, r2
 80011d2:	75fb      	strb	r3, [r7, #23]
 80011d4:	e001      	b.n	80011da <vTimeStamp+0x6e>
	}
	else
	{
		hour = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75bb      	strb	r3, [r7, #22]
	}

#if (defined(PRINT_DEBUG))
	printf("[%02d:%02d:%02d.%03ld]\r\n", hour, minute, second, millis_second);
 80011da:	7db9      	ldrb	r1, [r7, #22]
 80011dc:	7dfa      	ldrb	r2, [r7, #23]
 80011de:	7af8      	ldrb	r0, [r7, #11]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4603      	mov	r3, r0
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <vTimeStamp+0x90>)
 80011e8:	f003 faa0 	bl	800472c <iprintf>
#endif
	return;
 80011ec:	bf00      	nop
}
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	10624dd3 	.word	0x10624dd3
 80011f8:	88888889 	.word	0x88888889
 80011fc:	08006840 	.word	0x08006840

08001200 <vMCUProcessingEvaluate>:

void vMCUProcessingEvaluate(MCUProcessingEvaluate_t *mcu_process_time_handle, uint32_t current_processing_time)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	mcu_process_time_handle->current_process_time = current_processing_time;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	609a      	str	r2, [r3, #8]
	if (current_processing_time > mcu_process_time_handle->maxmimum_process_time)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d902      	bls.n	8001220 <vMCUProcessingEvaluate+0x20>
	{
		mcu_process_time_handle->maxmimum_process_time = current_processing_time;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	605a      	str	r2, [r3, #4]
	}
	if (current_processing_time < mcu_process_time_handle->minimum_process_time)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d202      	bcs.n	8001230 <vMCUProcessingEvaluate+0x30>
	{
		mcu_process_time_handle->minimum_process_time = current_processing_time;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	601a      	str	r2, [r3, #0]
	}
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
	...

0800123c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001244:	4a07      	ldr	r2, [pc, #28]	; (8001264 <RetargetInit+0x28>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <RetargetInit+0x2c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6898      	ldr	r0, [r3, #8]
 8001250:	2300      	movs	r3, #0
 8001252:	2202      	movs	r2, #2
 8001254:	2100      	movs	r1, #0
 8001256:	f003 faf5 	bl	8004844 <setvbuf>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000039c 	.word	0x2000039c
 8001268:	2000000c 	.word	0x2000000c

0800126c <_isatty>:

int _isatty(int fd) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db04      	blt.n	8001284 <_isatty+0x18>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b02      	cmp	r3, #2
 800127e:	dc01      	bgt.n	8001284 <_isatty+0x18>
    return 1;
 8001280:	2301      	movs	r3, #1
 8001282:	e005      	b.n	8001290 <_isatty+0x24>

  errno = EBADF;
 8001284:	f002 fd68 	bl	8003d58 <__errno>
 8001288:	4602      	mov	r2, r0
 800128a:	2309      	movs	r3, #9
 800128c:	6013      	str	r3, [r2, #0]
  return 0;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_write>:

int _write(int fd, char* ptr, int len) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d002      	beq.n	80012b0 <_write+0x18>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d111      	bne.n	80012d4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <_write+0x54>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	f002 f866 	bl	800338e <HAL_UART_Transmit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <_write+0x38>
      return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	e008      	b.n	80012e2 <_write+0x4a>
    else
      return EIO;
 80012d0:	2305      	movs	r3, #5
 80012d2:	e006      	b.n	80012e2 <_write+0x4a>
  }
  errno = EBADF;
 80012d4:	f002 fd40 	bl	8003d58 <__errno>
 80012d8:	4602      	mov	r2, r0
 80012da:	2309      	movs	r3, #9
 80012dc:	6013      	str	r3, [r2, #0]
  return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000039c 	.word	0x2000039c

080012f0 <_close>:

int _close(int fd) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db04      	blt.n	8001308 <_close+0x18>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b02      	cmp	r3, #2
 8001302:	dc01      	bgt.n	8001308 <_close+0x18>
    return 0;
 8001304:	2300      	movs	r3, #0
 8001306:	e006      	b.n	8001316 <_close+0x26>

  errno = EBADF;
 8001308:	f002 fd26 	bl	8003d58 <__errno>
 800130c:	4602      	mov	r2, r0
 800130e:	2309      	movs	r3, #9
 8001310:	6013      	str	r3, [r2, #0]
  return -1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800132a:	f002 fd15 	bl	8003d58 <__errno>
 800132e:	4602      	mov	r2, r0
 8001330:	2309      	movs	r3, #9
 8001332:	6013      	str	r3, [r2, #0]
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_read>:

int _read(int fd, char* ptr, int len) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d110      	bne.n	8001374 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <_read+0x4c>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	2201      	movs	r2, #1
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	f002 f8af 	bl	80034c0 <HAL_UART_Receive>
 8001362:	4603      	mov	r3, r0
 8001364:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <_read+0x30>
      return 1;
 800136c:	2301      	movs	r3, #1
 800136e:	e008      	b.n	8001382 <_read+0x42>
    else
      return EIO;
 8001370:	2305      	movs	r3, #5
 8001372:	e006      	b.n	8001382 <_read+0x42>
  }
  errno = EBADF;
 8001374:	f002 fcf0 	bl	8003d58 <__errno>
 8001378:	4602      	mov	r2, r0
 800137a:	2309      	movs	r3, #9
 800137c:	6013      	str	r3, [r2, #0]
  return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000039c 	.word	0x2000039c

08001390 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db08      	blt.n	80013b2 <_fstat+0x22>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	dc05      	bgt.n	80013b2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ac:	605a      	str	r2, [r3, #4]
    return 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e005      	b.n	80013be <_fstat+0x2e>
  }

  errno = EBADF;
 80013b2:	f002 fcd1 	bl	8003d58 <__errno>
 80013b6:	4602      	mov	r2, r0
 80013b8:	2309      	movs	r3, #9
 80013ba:	6013      	str	r3, [r2, #0]
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_MspInit+0x5c>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_MspInit+0x5c>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_MspInit+0x5c>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_MspInit+0x5c>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MspInit+0x5c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_MspInit+0x5c>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013fe:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <HAL_MspInit+0x60>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_MspInit+0x60>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40021000 	.word	0x40021000
 8001428:	40010000 	.word	0x40010000

0800142c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <HAL_CAN_MspInit+0x8c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d131      	bne.n	80014b0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_CAN_MspInit+0x90>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_CAN_MspInit+0x90>)
 8001452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001456:	61d3      	str	r3, [r2, #28]
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <HAL_CAN_MspInit+0x90>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_CAN_MspInit+0x90>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_CAN_MspInit+0x90>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_CAN_MspInit+0x90>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0304 	and.w	r3, r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800147c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4619      	mov	r1, r3
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <HAL_CAN_MspInit+0x94>)
 8001492:	f000 fc8f 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_CAN_MspInit+0x94>)
 80014ac:	f000 fc82 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40006400 	.word	0x40006400
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010800 	.word	0x40010800

080014c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <HAL_I2C_MspInit+0x70>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d123      	bne.n	800152c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <HAL_I2C_MspInit+0x74>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <HAL_I2C_MspInit+0x74>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_I2C_MspInit+0x74>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fc:	23c0      	movs	r3, #192	; 0xc0
 80014fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	2312      	movs	r3, #18
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <HAL_I2C_MspInit+0x78>)
 8001510:	f000 fc50 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_I2C_MspInit+0x74>)
 8001516:	69db      	ldr	r3, [r3, #28]
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_I2C_MspInit+0x74>)
 800151a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151e:	61d3      	str	r3, [r2, #28]
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_I2C_MspInit+0x74>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800152c:	bf00      	nop
 800152e:	3720      	adds	r7, #32
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40005400 	.word	0x40005400
 8001538:	40021000 	.word	0x40021000
 800153c:	40010c00 	.word	0x40010c00

08001540 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0d      	ldr	r2, [pc, #52]	; (8001584 <HAL_TIM_Base_MspInit+0x44>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d113      	bne.n	800157a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_TIM_Base_MspInit+0x48>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a0c      	ldr	r2, [pc, #48]	; (8001588 <HAL_TIM_Base_MspInit+0x48>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_TIM_Base_MspInit+0x48>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2103      	movs	r1, #3
 800156e:	201d      	movs	r0, #29
 8001570:	f000 fb7f 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001574:	201d      	movs	r0, #29
 8001576:	f000 fb98 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40000400 	.word	0x40000400
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0310 	add.w	r3, r7, #16
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_UART_MspInit+0x98>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d137      	bne.n	800161c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_UART_MspInit+0x9c>)
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0x9c>)
 80015b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b6:	61d3      	str	r3, [r2, #28]
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_UART_MspInit+0x9c>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_UART_MspInit+0x9c>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_UART_MspInit+0x9c>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <HAL_UART_MspInit+0x9c>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015dc:	2304      	movs	r3, #4
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	480f      	ldr	r0, [pc, #60]	; (800162c <HAL_UART_MspInit+0xa0>)
 80015f0:	f000 fbe0 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015f4:	2308      	movs	r3, #8
 80015f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4619      	mov	r1, r3
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <HAL_UART_MspInit+0xa0>)
 8001608:	f000 fbd4 	bl	8001db4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2100      	movs	r1, #0
 8001610:	2026      	movs	r0, #38	; 0x26
 8001612:	f000 fb2e 	bl	8001c72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001616:	2026      	movs	r0, #38	; 0x26
 8001618:	f000 fb47 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40004400 	.word	0x40004400
 8001628:	40021000 	.word	0x40021000
 800162c:	40010800 	.word	0x40010800

08001630 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	201e      	movs	r0, #30
 8001646:	f000 fb14 	bl	8001c72 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800164a:	201e      	movs	r0, #30
 800164c:	f000 fb2d 	bl	8001caa <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001650:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <HAL_InitTick+0xa0>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_InitTick+0xa0>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	61d3      	str	r3, [r2, #28]
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_InitTick+0xa0>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001668:	f107 0210 	add.w	r2, r7, #16
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f001 fa70 	bl	8002b58 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001678:	f001 fa46 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 800167c:	4603      	mov	r3, r0
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <HAL_InitTick+0xa4>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0c9b      	lsrs	r3, r3, #18
 800168c:	3b01      	subs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_InitTick+0xa8>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <HAL_InitTick+0xac>)
 8001694:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_InitTick+0xa8>)
 8001698:	f240 32e7 	movw	r2, #999	; 0x3e7
 800169c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <HAL_InitTick+0xa8>)
 80016a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_InitTick+0xa8>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_InitTick+0xa8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80016b0:	4809      	ldr	r0, [pc, #36]	; (80016d8 <HAL_InitTick+0xa8>)
 80016b2:	f001 fa9f 	bl	8002bf4 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80016bc:	4806      	ldr	r0, [pc, #24]	; (80016d8 <HAL_InitTick+0xa8>)
 80016be:	f001 fac4 	bl	8002c4a <HAL_TIM_Base_Start_IT>
 80016c2:	4603      	mov	r3, r0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3730      	adds	r7, #48	; 0x30
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	431bde83 	.word	0x431bde83
 80016d8:	200003a0 	.word	0x200003a0
 80016dc:	40000800 	.word	0x40000800

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <HardFault_Handler+0x4>

080016f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <BusFault_Handler+0x4>

080016fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001702:	e7fe      	b.n	8001702 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001738:	2040      	movs	r0, #64	; 0x40
 800173a:	f000 fcc5 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800173e:	2080      	movs	r0, #128	; 0x80
 8001740:	f000 fcc2 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001744:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001748:	f000 fcbe 	bl	80020c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM3_IRQHandler+0x10>)
 8001756:	f001 fa9b 	bl	8002c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000031c 	.word	0x2000031c

08001764 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM4_IRQHandler+0x10>)
 800176a:	f001 fa91 	bl	8002c90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200003a0 	.word	0x200003a0

08001778 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <USART2_IRQHandler+0x10>)
 800177e:	f001 ff99 	bl	80036b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000035c 	.word	0x2000035c

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f002 facc 	bl	8003d58 <__errno>
 80017c0:	4602      	mov	r2, r0
 80017c2:	230c      	movs	r3, #12
 80017c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20005000 	.word	0x20005000
 80017ec:	00000400 	.word	0x00000400
 80017f0:	2000027c 	.word	0x2000027c
 80017f4:	200003e8 	.word	0x200003e8

080017f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <SystemInit+0x5c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <SystemInit+0x5c>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <SystemInit+0x5c>)
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4911      	ldr	r1, [pc, #68]	; (8001854 <SystemInit+0x5c>)
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <SystemInit+0x60>)
 8001810:	4013      	ands	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <SystemInit+0x5c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <SystemInit+0x5c>)
 800181a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <SystemInit+0x5c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <SystemInit+0x5c>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <SystemInit+0x5c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <SystemInit+0x5c>)
 8001836:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800183a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SystemInit+0x5c>)
 800183e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001842:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SystemInit+0x64>)
 8001846:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800184a:	609a      	str	r2, [r3, #8]
#endif 
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	f8ff0000 	.word	0xf8ff0000
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001862:	e003      	b.n	800186c <LoopCopyDataInit>

08001864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800186a:	3104      	adds	r1, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800186c:	480a      	ldr	r0, [pc, #40]	; (8001898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001874:	d3f6      	bcc.n	8001864 <CopyDataInit>
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001878:	e002      	b.n	8001880 <LoopFillZerobss>

0800187a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800187c:	f842 3b04 	str.w	r3, [r2], #4

08001880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001884:	d3f9      	bcc.n	800187a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001886:	f7ff ffb7 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188a:	f002 fa6b 	bl	8003d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188e:	f7ff f905 	bl	8000a9c <main>
  bx lr
 8001892:	4770      	bx	lr
  ldr r3, =_sidata
 8001894:	08006bc8 	.word	0x08006bc8
  ldr r0, =_sdata
 8001898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800189c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80018a0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80018a4:	200003e8 	.word	0x200003e8

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>
	...

080018ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x28>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x28>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f9cd 	bl	8001c5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff feb4 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fd7e 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40022000 	.word	0x40022000

080018d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_IncTick+0x1c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_IncTick+0x20>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_IncTick+0x20>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000008 	.word	0x20000008
 80018f8:	200003e0 	.word	0x200003e0

080018fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b02      	ldr	r3, [pc, #8]	; (800190c <HAL_GetTick+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	200003e0 	.word	0x200003e0

08001910 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0ed      	b.n	8001afe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d102      	bne.n	8001934 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fd7c 	bl	800142c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0202 	bic.w	r2, r2, #2
 8001942:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001944:	f7ff ffda 	bl	80018fc <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800194a:	e012      	b.n	8001972 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800194c:	f7ff ffd6 	bl	80018fc <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b0a      	cmp	r3, #10
 8001958:	d90b      	bls.n	8001972 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2205      	movs	r2, #5
 800196a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0c5      	b.n	8001afe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e5      	bne.n	800194c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001990:	f7ff ffb4 	bl	80018fc <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001996:	e012      	b.n	80019be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001998:	f7ff ffb0 	bl	80018fc <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b0a      	cmp	r3, #10
 80019a4:	d90b      	bls.n	80019be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2205      	movs	r2, #5
 80019b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e09f      	b.n	8001afe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0e5      	beq.n	8001998 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7e1b      	ldrb	r3, [r3, #24]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7e5b      	ldrb	r3, [r3, #25]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e007      	b.n	8001a20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7e9b      	ldrb	r3, [r3, #26]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d108      	bne.n	8001a3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0220 	orr.w	r2, r2, #32
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e007      	b.n	8001a4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0220 	bic.w	r2, r2, #32
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7edb      	ldrb	r3, [r3, #27]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0210 	bic.w	r2, r2, #16
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	e007      	b.n	8001a74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0210 	orr.w	r2, r2, #16
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7f1b      	ldrb	r3, [r3, #28]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d108      	bne.n	8001a8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0208 	orr.w	r2, r2, #8
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	e007      	b.n	8001a9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0208 	bic.w	r2, r2, #8
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7f5b      	ldrb	r3, [r3, #29]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0204 	orr.w	r2, r2, #4
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	e007      	b.n	8001ac8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0204 	bic.w	r2, r2, #4
 8001ac6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	ea42 0103 	orr.w	r1, r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <__NVIC_EnableIRQ+0x34>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f7ff ff4f 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c84:	f7ff ff64 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001c88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f7ff ffb2 	bl	8001bf8 <NVIC_EncodePriority>
 8001c94:	4602      	mov	r2, r0
 8001c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff81 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff57 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d005      	beq.n	8001cea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e051      	b.n	8001d8e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 020e 	bic.w	r2, r2, #14
 8001cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0201 	bic.w	r2, r2, #1
 8001d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <HAL_DMA_Abort_IT+0xd0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d029      	beq.n	8001d68 <HAL_DMA_Abort_IT+0xa0>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_DMA_Abort_IT+0xd4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d022      	beq.n	8001d64 <HAL_DMA_Abort_IT+0x9c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_DMA_Abort_IT+0xd8>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d01a      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x96>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_DMA_Abort_IT+0xdc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d012      	beq.n	8001d58 <HAL_DMA_Abort_IT+0x90>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <HAL_DMA_Abort_IT+0xe0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00a      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x8a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_DMA_Abort_IT+0xe4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d102      	bne.n	8001d4c <HAL_DMA_Abort_IT+0x84>
 8001d46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d4a:	e00e      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d50:	e00b      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d56:	e008      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d5c:	e005      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	e002      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d64:	2310      	movs	r3, #16
 8001d66:	e000      	b.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <HAL_DMA_Abort_IT+0xe8>)
 8001d6c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
    } 
  }
  return status;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40020008 	.word	0x40020008
 8001d9c:	4002001c 	.word	0x4002001c
 8001da0:	40020030 	.word	0x40020030
 8001da4:	40020044 	.word	0x40020044
 8001da8:	40020058 	.word	0x40020058
 8001dac:	4002006c 	.word	0x4002006c
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	e127      	b.n	8002018 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f040 8116 	bne.w	8002012 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b12      	cmp	r3, #18
 8001dec:	d034      	beq.n	8001e58 <HAL_GPIO_Init+0xa4>
 8001dee:	2b12      	cmp	r3, #18
 8001df0:	d80d      	bhi.n	8001e0e <HAL_GPIO_Init+0x5a>
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d02b      	beq.n	8001e4e <HAL_GPIO_Init+0x9a>
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d804      	bhi.n	8001e04 <HAL_GPIO_Init+0x50>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d031      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d01c      	beq.n	8001e3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e02:	e048      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d043      	beq.n	8001e90 <HAL_GPIO_Init+0xdc>
 8001e08:	2b11      	cmp	r3, #17
 8001e0a:	d01b      	beq.n	8001e44 <HAL_GPIO_Init+0x90>
          break;
 8001e0c:	e043      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e0e:	4a89      	ldr	r2, [pc, #548]	; (8002034 <HAL_GPIO_Init+0x280>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d026      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e14:	4a87      	ldr	r2, [pc, #540]	; (8002034 <HAL_GPIO_Init+0x280>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d806      	bhi.n	8001e28 <HAL_GPIO_Init+0x74>
 8001e1a:	4a87      	ldr	r2, [pc, #540]	; (8002038 <HAL_GPIO_Init+0x284>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d020      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e20:	4a86      	ldr	r2, [pc, #536]	; (800203c <HAL_GPIO_Init+0x288>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d01d      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
          break;
 8001e26:	e036      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e28:	4a85      	ldr	r2, [pc, #532]	; (8002040 <HAL_GPIO_Init+0x28c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d019      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e2e:	4a85      	ldr	r2, [pc, #532]	; (8002044 <HAL_GPIO_Init+0x290>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d016      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
 8001e34:	4a84      	ldr	r2, [pc, #528]	; (8002048 <HAL_GPIO_Init+0x294>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0xae>
          break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e028      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e023      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3308      	adds	r3, #8
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e01e      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e019      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e012      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	611a      	str	r2, [r3, #16]
          break;
 8001e82:	e008      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
          break;
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2bff      	cmp	r3, #255	; 0xff
 8001e9a:	d801      	bhi.n	8001ea0 <HAL_GPIO_Init+0xec>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	e001      	b.n	8001ea4 <HAL_GPIO_Init+0xf0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	d802      	bhi.n	8001eb2 <HAL_GPIO_Init+0xfe>
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	e002      	b.n	8001eb8 <HAL_GPIO_Init+0x104>
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	3b08      	subs	r3, #8
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	401a      	ands	r2, r3
 8001eca:	6a39      	ldr	r1, [r7, #32]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 8096 	beq.w	8002012 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee6:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_GPIO_Init+0x298>)
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_GPIO_Init+0x298>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6193      	str	r3, [r2, #24]
 8001ef2:	4b56      	ldr	r3, [pc, #344]	; (800204c <HAL_GPIO_Init+0x298>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001efe:	4a54      	ldr	r2, [pc, #336]	; (8002050 <HAL_GPIO_Init+0x29c>)
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <HAL_GPIO_Init+0x2a0>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x19e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	; (8002058 <HAL_GPIO_Init+0x2a4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x19a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a49      	ldr	r2, [pc, #292]	; (800205c <HAL_GPIO_Init+0x2a8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x196>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a48      	ldr	r2, [pc, #288]	; (8002060 <HAL_GPIO_Init+0x2ac>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x192>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x1a0>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e004      	b.n	8001f54 <HAL_GPIO_Init+0x1a0>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_Init+0x1a0>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x1a0>
 8001f52:	2300      	movs	r3, #0
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	f002 0203 	and.w	r2, r2, #3
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f64:	493a      	ldr	r1, [pc, #232]	; (8002050 <HAL_GPIO_Init+0x29c>)
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d006      	beq.n	8001f8c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f7e:	4b39      	ldr	r3, [pc, #228]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4938      	ldr	r1, [pc, #224]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
 8001f8a:	e006      	b.n	8001f9a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	4933      	ldr	r1, [pc, #204]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d006      	beq.n	8001fb4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	492e      	ldr	r1, [pc, #184]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb4:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	4929      	ldr	r1, [pc, #164]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	4924      	ldr	r1, [pc, #144]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
 8001fda:	e006      	b.n	8001fea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	491f      	ldr	r1, [pc, #124]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff6:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	491a      	ldr	r1, [pc, #104]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60cb      	str	r3, [r1, #12]
 8002002:	e006      	b.n	8002012 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	43db      	mvns	r3, r3
 800200c:	4915      	ldr	r1, [pc, #84]	; (8002064 <HAL_GPIO_Init+0x2b0>)
 800200e:	4013      	ands	r3, r2
 8002010:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	3301      	adds	r3, #1
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	f47f aed0 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 8002028:	bf00      	nop
 800202a:	372c      	adds	r7, #44	; 0x2c
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	10210000 	.word	0x10210000
 8002038:	10110000 	.word	0x10110000
 800203c:	10120000 	.word	0x10120000
 8002040:	10310000 	.word	0x10310000
 8002044:	10320000 	.word	0x10320000
 8002048:	10220000 	.word	0x10220000
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	40010800 	.word	0x40010800
 8002058:	40010c00 	.word	0x40010c00
 800205c:	40011000 	.word	0x40011000
 8002060:	40011400 	.word	0x40011400
 8002064:	40010400 	.word	0x40010400

08002068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	807b      	strh	r3, [r7, #2]
 8002074:	4613      	mov	r3, r2
 8002076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002078:	787b      	ldrb	r3, [r7, #1]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002084:	e003      	b.n	800208e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	041a      	lsls	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020b0:	887a      	ldrh	r2, [r7, #2]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80020b6:	e002      	b.n	80020be <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b8:	887a      	ldrh	r2, [r7, #2]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f806 	bl	80020f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e10f      	b.n	800233e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff f9c6 	bl	80014c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	; 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002150:	f000 fcda 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8002154:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4a7b      	ldr	r2, [pc, #492]	; (8002348 <HAL_I2C_Init+0x23c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d807      	bhi.n	8002170 <HAL_I2C_Init+0x64>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a7a      	ldr	r2, [pc, #488]	; (800234c <HAL_I2C_Init+0x240>)
 8002164:	4293      	cmp	r3, r2
 8002166:	bf94      	ite	ls
 8002168:	2301      	movls	r3, #1
 800216a:	2300      	movhi	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e006      	b.n	800217e <HAL_I2C_Init+0x72>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a77      	ldr	r2, [pc, #476]	; (8002350 <HAL_I2C_Init+0x244>)
 8002174:	4293      	cmp	r3, r2
 8002176:	bf94      	ite	ls
 8002178:	2301      	movls	r3, #1
 800217a:	2300      	movhi	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e0db      	b.n	800233e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a72      	ldr	r2, [pc, #456]	; (8002354 <HAL_I2C_Init+0x248>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0c9b      	lsrs	r3, r3, #18
 8002190:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a64      	ldr	r2, [pc, #400]	; (8002348 <HAL_I2C_Init+0x23c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d802      	bhi.n	80021c0 <HAL_I2C_Init+0xb4>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3301      	adds	r3, #1
 80021be:	e009      	b.n	80021d4 <HAL_I2C_Init+0xc8>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	4a63      	ldr	r2, [pc, #396]	; (8002358 <HAL_I2C_Init+0x24c>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	099b      	lsrs	r3, r3, #6
 80021d2:	3301      	adds	r3, #1
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	430b      	orrs	r3, r1
 80021da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4956      	ldr	r1, [pc, #344]	; (8002348 <HAL_I2C_Init+0x23c>)
 80021f0:	428b      	cmp	r3, r1
 80021f2:	d80d      	bhi.n	8002210 <HAL_I2C_Init+0x104>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e59      	subs	r1, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	2b04      	cmp	r3, #4
 800220a:	bf38      	it	cc
 800220c:	2304      	movcc	r3, #4
 800220e:	e04f      	b.n	80022b0 <HAL_I2C_Init+0x1a4>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d111      	bne.n	800223c <HAL_I2C_Init+0x130>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e58      	subs	r0, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e012      	b.n	8002262 <HAL_I2C_Init+0x156>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e58      	subs	r0, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	0099      	lsls	r1, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Init+0x15e>
 8002266:	2301      	movs	r3, #1
 8002268:	e022      	b.n	80022b0 <HAL_I2C_Init+0x1a4>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10e      	bne.n	8002290 <HAL_I2C_Init+0x184>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e58      	subs	r0, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6859      	ldr	r1, [r3, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	440b      	add	r3, r1
 8002280:	fbb0 f3f3 	udiv	r3, r0, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228e:	e00f      	b.n	80022b0 <HAL_I2C_Init+0x1a4>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1e58      	subs	r0, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	0099      	lsls	r1, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	6809      	ldr	r1, [r1, #0]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	431a      	orrs	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6911      	ldr	r1, [r2, #16]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68d2      	ldr	r2, [r2, #12]
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	000186a0 	.word	0x000186a0
 800234c:	001e847f 	.word	0x001e847f
 8002350:	003d08ff 	.word	0x003d08ff
 8002354:	431bde83 	.word	0x431bde83
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e26c      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800237c:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002388:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d112      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
 8002394:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06c      	beq.n	8002488 <HAL_RCC_OscConfig+0x12c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d168      	bne.n	8002488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e246      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x76>
 80023c4:	4b80      	ldr	r3, [pc, #512]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7f      	ldr	r2, [pc, #508]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e02e      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b7b      	ldr	r3, [pc, #492]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7a      	ldr	r2, [pc, #488]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0xbc>
 80023fe:	4b72      	ldr	r3, [pc, #456]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a71      	ldr	r2, [pc, #452]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 8002418:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a67      	ldr	r2, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fa60 	bl	80018fc <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff fa5c 	bl	80018fc <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1fa      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xe4>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff fa4c 	bl	80018fc <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff fa48 	bl	80018fc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1e6      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b53      	ldr	r3, [pc, #332]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x10c>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002496:	4b4c      	ldr	r3, [pc, #304]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a2:	4b49      	ldr	r3, [pc, #292]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
 80024ae:	4b46      	ldr	r3, [pc, #280]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b43      	ldr	r3, [pc, #268]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1ba      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4939      	ldr	r1, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7ff fa01 	bl	80018fc <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7ff f9fd 	bl	80018fc <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e19b      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4927      	ldr	r1, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b26      	ldr	r3, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x270>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff f9e0 	bl	80018fc <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7ff f9dc 	bl	80018fc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e17a      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d03a      	beq.n	80025e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7ff f9c0 	bl	80018fc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7ff f9bc 	bl	80018fc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e15a      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f000 fb0a 	bl	8002bb8 <RCC_Delay>
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7ff f9a6 	bl	80018fc <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7ff f9a2 	bl	80018fc <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d908      	bls.n	80025d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e140      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	42420000 	.word	0x42420000
 80025d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b9e      	ldr	r3, [pc, #632]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e9      	bne.n	80025b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a6 	beq.w	800273a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b97      	ldr	r3, [pc, #604]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a93      	ldr	r2, [pc, #588]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b8e      	ldr	r3, [pc, #568]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a8a      	ldr	r2, [pc, #552]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7ff f963 	bl	80018fc <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7ff f95f 	bl	80018fc <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	; 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0fd      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x4f8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x312>
 8002660:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a7a      	ldr	r2, [pc, #488]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e02d      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x334>
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b73      	ldr	r3, [pc, #460]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a72      	ldr	r2, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x356>
 8002698:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a6c      	ldr	r2, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	4b64      	ldr	r3, [pc, #400]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a63      	ldr	r2, [pc, #396]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7ff f913 	bl	80018fc <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7ff f90f 	bl	80018fc <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0ab      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x37e>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7ff f8fd 	bl	80018fc <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7ff f8f9 	bl	80018fc <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e095      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b4c      	ldr	r3, [pc, #304]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a47      	ldr	r2, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8081 	beq.w	8002846 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002744:	4b42      	ldr	r3, [pc, #264]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d061      	beq.n	8002814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d146      	bne.n	80027e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b3f      	ldr	r3, [pc, #252]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7ff f8cd 	bl	80018fc <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7ff f8c9 	bl	80018fc <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e067      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	492d      	ldr	r1, [pc, #180]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a19      	ldr	r1, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	430b      	orrs	r3, r1
 80027b2:	4927      	ldr	r1, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7ff f89d 	bl	80018fc <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7ff f899 	bl	80018fc <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e037      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46a>
 80027e4:	e02f      	b.n	8002846 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCC_OscConfig+0x4fc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7ff f886 	bl	80018fc <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7ff f882 	bl	80018fc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e020      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x498>
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e013      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x4f4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	42420060 	.word	0x42420060

0800285c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0d0      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d910      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4965      	ldr	r1, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d040      	beq.n	800297c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d115      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e073      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e06b      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4936      	ldr	r1, [pc, #216]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7fe ffd6 	bl	80018fc <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7fe ffd2 	bl	80018fc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e053      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d210      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	4922      	ldr	r1, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4601      	mov	r1, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1cc>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1d0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fe10 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	080068e8 	.word	0x080068e8
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	20000004 	.word	0x20000004

08002a30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	b490      	push	{r4, r7}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a36:	4b2a      	ldr	r3, [pc, #168]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a38:	1d3c      	adds	r4, r7, #4
 8002a3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d002      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d003      	beq.n	8002a76 <HAL_RCC_GetSysClockFreq+0x46>
 8002a6e:	e02d      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a72:	623b      	str	r3, [r7, #32]
      break;
 8002a74:	e02d      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	0c9b      	lsrs	r3, r3, #18
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a82:	4413      	add	r3, r2
 8002a84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a88:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a94:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	0c5b      	lsrs	r3, r3, #17
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aa8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	4a0f      	ldr	r2, [pc, #60]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aae:	fb02 f203 	mul.w	r2, r2, r3
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	e004      	b.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	623b      	str	r3, [r7, #32]
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ace:	623b      	str	r3, [r7, #32]
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc90      	pop	{r4, r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	080068d4 	.word	0x080068d4
 8002ae4:	080068e4 	.word	0x080068e4
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	007a1200 	.word	0x007a1200
 8002af0:	003d0900 	.word	0x003d0900

08002af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af8:	4b02      	ldr	r3, [pc, #8]	; (8002b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afa:	681b      	ldr	r3, [r3, #0]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b0c:	f7ff fff2 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4601      	mov	r1, r0
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4a03      	ldr	r2, [pc, #12]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
 8002b20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	080068f8 	.word	0x080068f8

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	f7ff ffde 	bl	8002af4 <HAL_RCC_GetHCLKFreq>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	0adb      	lsrs	r3, r3, #11
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4a03      	ldr	r2, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	080068f8 	.word	0x080068f8

08002b58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	220f      	movs	r2, #15
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 0203 	and.w	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_RCC_GetClockConfig+0x58>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0207 	and.w	r2, r3, #7
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40022000 	.word	0x40022000

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e01d      	b.n	8002c42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fc90 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fa10 	bl	8003058 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68da      	ldr	r2, [r3, #12]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b06      	cmp	r3, #6
 8002c72:	d007      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0202 	mvn.w	r2, #2
 8002cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9a4 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f997 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f9a6 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0204 	mvn.w	r2, #4
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f97a 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f96d 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f97c 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0208 	mvn.w	r2, #8
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f950 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f943 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f952 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b10      	cmp	r3, #16
 8002da0:	d122      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b10      	cmp	r3, #16
 8002dae:	d11b      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f926 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f919 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f928 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d10e      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d107      	bne.n	8002e14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0201 	mvn.w	r2, #1
 8002e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe f88a 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1e:	2b80      	cmp	r3, #128	; 0x80
 8002e20:	d10e      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa51 	bl	80032e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d107      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8ec 	bl	8003044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0220 	mvn.w	r2, #32
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fa1c 	bl	80032d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_ConfigClockSource+0x18>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e0a6      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x166>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ede:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b40      	cmp	r3, #64	; 0x40
 8002eee:	d067      	beq.n	8002fc0 <HAL_TIM_ConfigClockSource+0x120>
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d80b      	bhi.n	8002f0c <HAL_TIM_ConfigClockSource+0x6c>
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d073      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0x140>
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d802      	bhi.n	8002f02 <HAL_TIM_ConfigClockSource+0x62>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d06f      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f00:	e078      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d06c      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0x140>
 8002f06:	2b30      	cmp	r3, #48	; 0x30
 8002f08:	d06a      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f0a:	e073      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f0c:	2b70      	cmp	r3, #112	; 0x70
 8002f0e:	d00d      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0x8c>
 8002f10:	2b70      	cmp	r3, #112	; 0x70
 8002f12:	d804      	bhi.n	8002f1e <HAL_TIM_ConfigClockSource+0x7e>
 8002f14:	2b50      	cmp	r3, #80	; 0x50
 8002f16:	d033      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0xe0>
 8002f18:	2b60      	cmp	r3, #96	; 0x60
 8002f1a:	d041      	beq.n	8002fa0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f1c:	e06a      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f22:	d066      	beq.n	8002ff2 <HAL_TIM_ConfigClockSource+0x152>
 8002f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f28:	d017      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f2a:	e063      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6818      	ldr	r0, [r3, #0]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6899      	ldr	r1, [r3, #8]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f000 f965 	bl	800320a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	609a      	str	r2, [r3, #8]
      break;
 8002f58:	e04c      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6899      	ldr	r1, [r3, #8]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f000 f94e 	bl	800320a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f7c:	609a      	str	r2, [r3, #8]
      break;
 8002f7e:	e039      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6859      	ldr	r1, [r3, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f000 f8c5 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2150      	movs	r1, #80	; 0x50
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f91c 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002f9e:	e029      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	461a      	mov	r2, r3
 8002fae:	f000 f8e3 	bl	8003178 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2160      	movs	r1, #96	; 0x60
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 f90c 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002fbe:	e019      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f000 f8a5 	bl	800311c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2140      	movs	r1, #64	; 0x40
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f8fc 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002fde:	e009      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 f8f3 	bl	80031d6 <TIM_ITRx_SetConfig>
      break;
 8002ff0:	e000      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
	...

08003058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a29      	ldr	r2, [pc, #164]	; (8003110 <TIM_Base_SetConfig+0xb8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0x30>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0x30>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a26      	ldr	r2, [pc, #152]	; (8003114 <TIM_Base_SetConfig+0xbc>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0x30>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a25      	ldr	r2, [pc, #148]	; (8003118 <TIM_Base_SetConfig+0xc0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d108      	bne.n	800309a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <TIM_Base_SetConfig+0xb8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_Base_SetConfig+0x62>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d007      	beq.n	80030ba <TIM_Base_SetConfig+0x62>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a19      	ldr	r2, [pc, #100]	; (8003114 <TIM_Base_SetConfig+0xbc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_Base_SetConfig+0x62>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a18      	ldr	r2, [pc, #96]	; (8003118 <TIM_Base_SetConfig+0xc0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a07      	ldr	r2, [pc, #28]	; (8003110 <TIM_Base_SetConfig+0xb8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d103      	bne.n	8003100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	615a      	str	r2, [r3, #20]
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800

0800311c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0201 	bic.w	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f023 030a 	bic.w	r3, r3, #10
 8003158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	621a      	str	r2, [r3, #32]
}
 800316e:	bf00      	nop
 8003170:	371c      	adds	r7, #28
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f023 0210 	bic.w	r2, r3, #16
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	031b      	lsls	r3, r3, #12
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	621a      	str	r2, [r3, #32]
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f043 0307 	orr.w	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	609a      	str	r2, [r3, #8]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bc80      	pop	{r7}
 8003208:	4770      	bx	lr

0800320a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003224:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	021a      	lsls	r2, r3, #8
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	431a      	orrs	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	609a      	str	r2, [r3, #8]
}
 800323e:	bf00      	nop
 8003240:	371c      	adds	r7, #28
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800325c:	2302      	movs	r3, #2
 800325e:	e032      	b.n	80032c6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003298:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e03f      	b.n	8003386 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe f936 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2224      	movs	r2, #36	; 0x24
 8003324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fc33 	bl	8003ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800336c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b088      	sub	sp, #32
 8003392:	af02      	add	r7, sp, #8
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f040 8083 	bne.w	80034b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_UART_Transmit+0x2e>
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e07b      	b.n	80034b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Transmit+0x40>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e074      	b.n	80034b8 <HAL_UART_Transmit+0x12a>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2221      	movs	r2, #33	; 0x21
 80033e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033e4:	f7fe fa8a 	bl	80018fc <HAL_GetTick>
 80033e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033f6:	e042      	b.n	800347e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	d122      	bne.n	8003456 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2200      	movs	r2, #0
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fa58 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e046      	b.n	80034b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800343c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d103      	bne.n	800344e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3302      	adds	r3, #2
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	e017      	b.n	800347e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3301      	adds	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	e013      	b.n	800347e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	; 0x80
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fa35 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e023      	b.n	80034b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	60ba      	str	r2, [r7, #8]
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1b7      	bne.n	80033f8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2200      	movs	r2, #0
 8003490:	2140      	movs	r1, #64	; 0x40
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fa1c 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e00a      	b.n	80034b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b20      	cmp	r3, #32
 80034de:	f040 8090 	bne.w	8003602 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_UART_Receive+0x2e>
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e088      	b.n	8003604 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_UART_Receive+0x40>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e081      	b.n	8003604 <HAL_UART_Receive+0x144>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2222      	movs	r2, #34	; 0x22
 8003512:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003516:	f7fe f9f1 	bl	80018fc <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	88fa      	ldrh	r2, [r7, #6]
 8003520:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003528:	e05c      	b.n	80035e4 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d12b      	bne.n	800359a <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	2120      	movs	r1, #32
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f000 f9bf 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e053      	b.n	8003604 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10c      	bne.n	8003582 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003574:	b29a      	uxth	r2, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	3302      	adds	r3, #2
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	e030      	b.n	80035e4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	b29b      	uxth	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	b29a      	uxth	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	3301      	adds	r3, #1
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	e024      	b.n	80035e4 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2120      	movs	r1, #32
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 f993 	bl	80038d0 <UART_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e027      	b.n	8003604 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d108      	bne.n	80035ce <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	60ba      	str	r2, [r7, #8]
 80035c8:	b2ca      	uxtb	r2, r1
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e00a      	b.n	80035e4 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	1c59      	adds	r1, r3, #1
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d19d      	bne.n	800352a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b20      	cmp	r3, #32
 8003624:	d140      	bne.n	80036a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d002      	beq.n	8003632 <HAL_UART_Receive_IT+0x26>
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e039      	b.n	80036aa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_UART_Receive_IT+0x38>
 8003640:	2302      	movs	r3, #2
 8003642:	e032      	b.n	80036aa <HAL_UART_Receive_IT+0x9e>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2222      	movs	r2, #34	; 0x22
 8003668:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003682:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0220 	orr.w	r2, r2, #32
 80036a2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_UART_IRQHandler+0x52>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9ce 	bl	8003aa0 <UART_Receive_IT>
      return;
 8003704:	e0cc      	b.n	80038a0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80ab 	beq.w	8003864 <HAL_UART_IRQHandler+0x1b0>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d105      	bne.n	8003724 <HAL_UART_IRQHandler+0x70>
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80a0 	beq.w	8003864 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_UART_IRQHandler+0x90>
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	f043 0201 	orr.w	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_UART_IRQHandler+0xb0>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	f043 0202 	orr.w	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_UART_IRQHandler+0xd0>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	f043 0204 	orr.w	r2, r3, #4
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_UART_IRQHandler+0xf0>
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379c:	f043 0208 	orr.w	r2, r3, #8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d078      	beq.n	800389e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_UART_IRQHandler+0x112>
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f96d 	bl	8003aa0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <HAL_UART_IRQHandler+0x13a>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d031      	beq.n	8003852 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f8b8 	bl	8003964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d023      	beq.n	800384a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003810:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d013      	beq.n	8003842 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_UART_IRQHandler+0x1f4>)
 8003820:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fa4e 	bl	8001cc8 <HAL_DMA_Abort_IT>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d016      	beq.n	8003860 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800383c:	4610      	mov	r0, r2
 800383e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	e00e      	b.n	8003860 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f83b 	bl	80038be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	e00a      	b.n	8003860 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f837 	bl	80038be <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e006      	b.n	8003860 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f833 	bl	80038be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800385e:	e01e      	b.n	800389e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	bf00      	nop
    return;
 8003862:	e01c      	b.n	800389e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <HAL_UART_IRQHandler+0x1cc>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f8a4 	bl	80039c6 <UART_Transmit_IT>
    return;
 800387e:	e00f      	b.n	80038a0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <HAL_UART_IRQHandler+0x1ec>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8eb 	bl	8003a70 <UART_EndTransmit_IT>
    return;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_UART_IRQHandler+0x1ec>
    return;
 800389e:	bf00      	nop
  }
}
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	0800399f 	.word	0x0800399f

080038ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr

080038d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	e02c      	b.n	800393c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d028      	beq.n	800393c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <UART_WaitOnFlagUntilTimeout+0x30>
 80038f0:	f7fe f804 	bl	80018fc <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d21d      	bcs.n	800393c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800390e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e00f      	b.n	800395c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	bf0c      	ite	eq
 800394c:	2301      	moveq	r3, #1
 800394e:	2300      	movne	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	429a      	cmp	r2, r3
 8003958:	d0c3      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800397a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr

0800399e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff ff80 	bl	80038be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b085      	sub	sp, #20
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b21      	cmp	r3, #33	; 0x21
 80039d8:	d144      	bne.n	8003a64 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d11a      	bne.n	8003a1a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	1c9a      	adds	r2, r3, #2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]
 8003a0c:	e00e      	b.n	8003a2c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]
 8003a18:	e008      	b.n	8003a2c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	1c59      	adds	r1, r3, #1
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6211      	str	r1, [r2, #32]
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10f      	bne.n	8003a60 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e000      	b.n	8003a66 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
  }
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff0b 	bl	80038ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b22      	cmp	r3, #34	; 0x22
 8003ab2:	d171      	bne.n	8003b98 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003abc:	d123      	bne.n	8003b06 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10e      	bne.n	8003aea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae8:	e029      	b.n	8003b3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28
 8003b04:	e01b      	b.n	8003b3e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6858      	ldr	r0, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	1c59      	adds	r1, r3, #1
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6291      	str	r1, [r2, #40]	; 0x28
 8003b1e:	b2c2      	uxtb	r2, r0
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e00c      	b.n	8003b3e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	1c58      	adds	r0, r3, #1
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	6288      	str	r0, [r1, #40]	; 0x28
 8003b36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d120      	bne.n	8003b94 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0220 	bic.w	r2, r2, #32
 8003b60:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fa14 	bl	8000fb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e002      	b.n	8003b9a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	e000      	b.n	8003b9a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bde:	f023 030c 	bic.w	r3, r3, #12
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699a      	ldr	r2, [r3, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a52      	ldr	r2, [pc, #328]	; (8003d50 <UART_SetConfig+0x1ac>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d14e      	bne.n	8003caa <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7fe ff90 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 8003c10:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	4a4a      	ldr	r2, [pc, #296]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	0119      	lsls	r1, r3, #4
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	4b42      	ldr	r3, [pc, #264]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2064      	movs	r0, #100	; 0x64
 8003c52:	fb00 f303 	mul.w	r3, r0, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a3d      	ldr	r2, [pc, #244]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c68:	4419      	add	r1, r3
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009a      	lsls	r2, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c80:	4b34      	ldr	r3, [pc, #208]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003c82:	fba3 0302 	umull	r0, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2064      	movs	r0, #100	; 0x64
 8003c8a:	fb00 f303 	mul.w	r3, r0, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003ca8:	e04d      	b.n	8003d46 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003caa:	f7fe ff2d 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 8003cae:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009a      	lsls	r2, r3, #2
 8003cba:	441a      	add	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc6:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	0119      	lsls	r1, r3, #4
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009a      	lsls	r2, r3, #2
 8003cda:	441a      	add	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce6:	4b1b      	ldr	r3, [pc, #108]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003ce8:	fba3 0302 	umull	r0, r3, r3, r2
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	2064      	movs	r0, #100	; 0x64
 8003cf0:	fb00 f303 	mul.w	r3, r0, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	3332      	adds	r3, #50	; 0x32
 8003cfa:	4a16      	ldr	r2, [pc, #88]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d06:	4419      	add	r1, r3
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009a      	lsls	r2, r3, #2
 8003d12:	441a      	add	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003d20:	fba3 0302 	umull	r0, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	2064      	movs	r0, #100	; 0x64
 8003d28:	fb00 f303 	mul.w	r3, r0, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	3332      	adds	r3, #50	; 0x32
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <UART_SetConfig+0x1b0>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	440a      	add	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
}
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40013800 	.word	0x40013800
 8003d54:	51eb851f 	.word	0x51eb851f

08003d58 <__errno>:
 8003d58:	4b01      	ldr	r3, [pc, #4]	; (8003d60 <__errno+0x8>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	2000000c 	.word	0x2000000c

08003d64 <__libc_init_array>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	2500      	movs	r5, #0
 8003d68:	4e0c      	ldr	r6, [pc, #48]	; (8003d9c <__libc_init_array+0x38>)
 8003d6a:	4c0d      	ldr	r4, [pc, #52]	; (8003da0 <__libc_init_array+0x3c>)
 8003d6c:	1ba4      	subs	r4, r4, r6
 8003d6e:	10a4      	asrs	r4, r4, #2
 8003d70:	42a5      	cmp	r5, r4
 8003d72:	d109      	bne.n	8003d88 <__libc_init_array+0x24>
 8003d74:	f002 fc5a 	bl	800662c <_init>
 8003d78:	2500      	movs	r5, #0
 8003d7a:	4e0a      	ldr	r6, [pc, #40]	; (8003da4 <__libc_init_array+0x40>)
 8003d7c:	4c0a      	ldr	r4, [pc, #40]	; (8003da8 <__libc_init_array+0x44>)
 8003d7e:	1ba4      	subs	r4, r4, r6
 8003d80:	10a4      	asrs	r4, r4, #2
 8003d82:	42a5      	cmp	r5, r4
 8003d84:	d105      	bne.n	8003d92 <__libc_init_array+0x2e>
 8003d86:	bd70      	pop	{r4, r5, r6, pc}
 8003d88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d8c:	4798      	blx	r3
 8003d8e:	3501      	adds	r5, #1
 8003d90:	e7ee      	b.n	8003d70 <__libc_init_array+0xc>
 8003d92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d96:	4798      	blx	r3
 8003d98:	3501      	adds	r5, #1
 8003d9a:	e7f2      	b.n	8003d82 <__libc_init_array+0x1e>
 8003d9c:	08006bc0 	.word	0x08006bc0
 8003da0:	08006bc0 	.word	0x08006bc0
 8003da4:	08006bc0 	.word	0x08006bc0
 8003da8:	08006bc4 	.word	0x08006bc4

08003dac <memset>:
 8003dac:	4603      	mov	r3, r0
 8003dae:	4402      	add	r2, r0
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d100      	bne.n	8003db6 <memset+0xa>
 8003db4:	4770      	bx	lr
 8003db6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dba:	e7f9      	b.n	8003db0 <memset+0x4>

08003dbc <_calloc_r>:
 8003dbc:	b538      	push	{r3, r4, r5, lr}
 8003dbe:	fb02 f401 	mul.w	r4, r2, r1
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	f000 f808 	bl	8003dd8 <_malloc_r>
 8003dc8:	4605      	mov	r5, r0
 8003dca:	b118      	cbz	r0, 8003dd4 <_calloc_r+0x18>
 8003dcc:	4622      	mov	r2, r4
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f7ff ffec 	bl	8003dac <memset>
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}

08003dd8 <_malloc_r>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	1ccd      	adds	r5, r1, #3
 8003ddc:	f025 0503 	bic.w	r5, r5, #3
 8003de0:	3508      	adds	r5, #8
 8003de2:	2d0c      	cmp	r5, #12
 8003de4:	bf38      	it	cc
 8003de6:	250c      	movcc	r5, #12
 8003de8:	2d00      	cmp	r5, #0
 8003dea:	4606      	mov	r6, r0
 8003dec:	db01      	blt.n	8003df2 <_malloc_r+0x1a>
 8003dee:	42a9      	cmp	r1, r5
 8003df0:	d903      	bls.n	8003dfa <_malloc_r+0x22>
 8003df2:	230c      	movs	r3, #12
 8003df4:	6033      	str	r3, [r6, #0]
 8003df6:	2000      	movs	r0, #0
 8003df8:	bd70      	pop	{r4, r5, r6, pc}
 8003dfa:	f001 fee2 	bl	8005bc2 <__malloc_lock>
 8003dfe:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <_malloc_r+0xac>)
 8003e00:	6814      	ldr	r4, [r2, #0]
 8003e02:	4621      	mov	r1, r4
 8003e04:	b991      	cbnz	r1, 8003e2c <_malloc_r+0x54>
 8003e06:	4c20      	ldr	r4, [pc, #128]	; (8003e88 <_malloc_r+0xb0>)
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	b91b      	cbnz	r3, 8003e14 <_malloc_r+0x3c>
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 fd09 	bl	8004824 <_sbrk_r>
 8003e12:	6020      	str	r0, [r4, #0]
 8003e14:	4629      	mov	r1, r5
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 fd04 	bl	8004824 <_sbrk_r>
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d124      	bne.n	8003e6a <_malloc_r+0x92>
 8003e20:	230c      	movs	r3, #12
 8003e22:	4630      	mov	r0, r6
 8003e24:	6033      	str	r3, [r6, #0]
 8003e26:	f001 fecd 	bl	8005bc4 <__malloc_unlock>
 8003e2a:	e7e4      	b.n	8003df6 <_malloc_r+0x1e>
 8003e2c:	680b      	ldr	r3, [r1, #0]
 8003e2e:	1b5b      	subs	r3, r3, r5
 8003e30:	d418      	bmi.n	8003e64 <_malloc_r+0x8c>
 8003e32:	2b0b      	cmp	r3, #11
 8003e34:	d90f      	bls.n	8003e56 <_malloc_r+0x7e>
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	18cc      	adds	r4, r1, r3
 8003e3a:	50cd      	str	r5, [r1, r3]
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	f001 fec1 	bl	8005bc4 <__malloc_unlock>
 8003e42:	f104 000b 	add.w	r0, r4, #11
 8003e46:	1d23      	adds	r3, r4, #4
 8003e48:	f020 0007 	bic.w	r0, r0, #7
 8003e4c:	1ac3      	subs	r3, r0, r3
 8003e4e:	d0d3      	beq.n	8003df8 <_malloc_r+0x20>
 8003e50:	425a      	negs	r2, r3
 8003e52:	50e2      	str	r2, [r4, r3]
 8003e54:	e7d0      	b.n	8003df8 <_malloc_r+0x20>
 8003e56:	684b      	ldr	r3, [r1, #4]
 8003e58:	428c      	cmp	r4, r1
 8003e5a:	bf16      	itet	ne
 8003e5c:	6063      	strne	r3, [r4, #4]
 8003e5e:	6013      	streq	r3, [r2, #0]
 8003e60:	460c      	movne	r4, r1
 8003e62:	e7eb      	b.n	8003e3c <_malloc_r+0x64>
 8003e64:	460c      	mov	r4, r1
 8003e66:	6849      	ldr	r1, [r1, #4]
 8003e68:	e7cc      	b.n	8003e04 <_malloc_r+0x2c>
 8003e6a:	1cc4      	adds	r4, r0, #3
 8003e6c:	f024 0403 	bic.w	r4, r4, #3
 8003e70:	42a0      	cmp	r0, r4
 8003e72:	d005      	beq.n	8003e80 <_malloc_r+0xa8>
 8003e74:	1a21      	subs	r1, r4, r0
 8003e76:	4630      	mov	r0, r6
 8003e78:	f000 fcd4 	bl	8004824 <_sbrk_r>
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d0cf      	beq.n	8003e20 <_malloc_r+0x48>
 8003e80:	6025      	str	r5, [r4, #0]
 8003e82:	e7db      	b.n	8003e3c <_malloc_r+0x64>
 8003e84:	20000280 	.word	0x20000280
 8003e88:	20000284 	.word	0x20000284

08003e8c <__cvt>:
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e92:	461e      	mov	r6, r3
 8003e94:	bfbb      	ittet	lt
 8003e96:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e9a:	461e      	movlt	r6, r3
 8003e9c:	2300      	movge	r3, #0
 8003e9e:	232d      	movlt	r3, #45	; 0x2d
 8003ea0:	b088      	sub	sp, #32
 8003ea2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003ea4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003ea8:	f027 0720 	bic.w	r7, r7, #32
 8003eac:	2f46      	cmp	r7, #70	; 0x46
 8003eae:	4614      	mov	r4, r2
 8003eb0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003eb2:	700b      	strb	r3, [r1, #0]
 8003eb4:	d004      	beq.n	8003ec0 <__cvt+0x34>
 8003eb6:	2f45      	cmp	r7, #69	; 0x45
 8003eb8:	d100      	bne.n	8003ebc <__cvt+0x30>
 8003eba:	3501      	adds	r5, #1
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e000      	b.n	8003ec2 <__cvt+0x36>
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	aa07      	add	r2, sp, #28
 8003ec4:	9204      	str	r2, [sp, #16]
 8003ec6:	aa06      	add	r2, sp, #24
 8003ec8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003ecc:	e9cd 3500 	strd	r3, r5, [sp]
 8003ed0:	4622      	mov	r2, r4
 8003ed2:	4633      	mov	r3, r6
 8003ed4:	f000 feb4 	bl	8004c40 <_dtoa_r>
 8003ed8:	2f47      	cmp	r7, #71	; 0x47
 8003eda:	4680      	mov	r8, r0
 8003edc:	d102      	bne.n	8003ee4 <__cvt+0x58>
 8003ede:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ee0:	07db      	lsls	r3, r3, #31
 8003ee2:	d526      	bpl.n	8003f32 <__cvt+0xa6>
 8003ee4:	2f46      	cmp	r7, #70	; 0x46
 8003ee6:	eb08 0905 	add.w	r9, r8, r5
 8003eea:	d111      	bne.n	8003f10 <__cvt+0x84>
 8003eec:	f898 3000 	ldrb.w	r3, [r8]
 8003ef0:	2b30      	cmp	r3, #48	; 0x30
 8003ef2:	d10a      	bne.n	8003f0a <__cvt+0x7e>
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	4620      	mov	r0, r4
 8003efa:	4631      	mov	r1, r6
 8003efc:	f7fc fd5e 	bl	80009bc <__aeabi_dcmpeq>
 8003f00:	b918      	cbnz	r0, 8003f0a <__cvt+0x7e>
 8003f02:	f1c5 0501 	rsb	r5, r5, #1
 8003f06:	f8ca 5000 	str.w	r5, [sl]
 8003f0a:	f8da 3000 	ldr.w	r3, [sl]
 8003f0e:	4499      	add	r9, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	2300      	movs	r3, #0
 8003f14:	4620      	mov	r0, r4
 8003f16:	4631      	mov	r1, r6
 8003f18:	f7fc fd50 	bl	80009bc <__aeabi_dcmpeq>
 8003f1c:	b938      	cbnz	r0, 8003f2e <__cvt+0xa2>
 8003f1e:	2230      	movs	r2, #48	; 0x30
 8003f20:	9b07      	ldr	r3, [sp, #28]
 8003f22:	454b      	cmp	r3, r9
 8003f24:	d205      	bcs.n	8003f32 <__cvt+0xa6>
 8003f26:	1c59      	adds	r1, r3, #1
 8003f28:	9107      	str	r1, [sp, #28]
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	e7f8      	b.n	8003f20 <__cvt+0x94>
 8003f2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003f32:	4640      	mov	r0, r8
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003f38:	eba3 0308 	sub.w	r3, r3, r8
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	b008      	add	sp, #32
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f44 <__exponent>:
 8003f44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f46:	2900      	cmp	r1, #0
 8003f48:	bfb4      	ite	lt
 8003f4a:	232d      	movlt	r3, #45	; 0x2d
 8003f4c:	232b      	movge	r3, #43	; 0x2b
 8003f4e:	4604      	mov	r4, r0
 8003f50:	bfb8      	it	lt
 8003f52:	4249      	neglt	r1, r1
 8003f54:	2909      	cmp	r1, #9
 8003f56:	f804 2b02 	strb.w	r2, [r4], #2
 8003f5a:	7043      	strb	r3, [r0, #1]
 8003f5c:	dd21      	ble.n	8003fa2 <__exponent+0x5e>
 8003f5e:	f10d 0307 	add.w	r3, sp, #7
 8003f62:	461f      	mov	r7, r3
 8003f64:	260a      	movs	r6, #10
 8003f66:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f6a:	fb06 1115 	mls	r1, r6, r5, r1
 8003f6e:	2d09      	cmp	r5, #9
 8003f70:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003f74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f78:	f103 32ff 	add.w	r2, r3, #4294967295
 8003f7c:	4629      	mov	r1, r5
 8003f7e:	dc09      	bgt.n	8003f94 <__exponent+0x50>
 8003f80:	3130      	adds	r1, #48	; 0x30
 8003f82:	3b02      	subs	r3, #2
 8003f84:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f88:	42bb      	cmp	r3, r7
 8003f8a:	4622      	mov	r2, r4
 8003f8c:	d304      	bcc.n	8003f98 <__exponent+0x54>
 8003f8e:	1a10      	subs	r0, r2, r0
 8003f90:	b003      	add	sp, #12
 8003f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f94:	4613      	mov	r3, r2
 8003f96:	e7e6      	b.n	8003f66 <__exponent+0x22>
 8003f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f9c:	f804 2b01 	strb.w	r2, [r4], #1
 8003fa0:	e7f2      	b.n	8003f88 <__exponent+0x44>
 8003fa2:	2330      	movs	r3, #48	; 0x30
 8003fa4:	4419      	add	r1, r3
 8003fa6:	7083      	strb	r3, [r0, #2]
 8003fa8:	1d02      	adds	r2, r0, #4
 8003faa:	70c1      	strb	r1, [r0, #3]
 8003fac:	e7ef      	b.n	8003f8e <__exponent+0x4a>
	...

08003fb0 <_printf_float>:
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	b091      	sub	sp, #68	; 0x44
 8003fb6:	460c      	mov	r4, r1
 8003fb8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003fba:	4693      	mov	fp, r2
 8003fbc:	461e      	mov	r6, r3
 8003fbe:	4605      	mov	r5, r0
 8003fc0:	f001 fd6c 	bl	8005a9c <_localeconv_r>
 8003fc4:	6803      	ldr	r3, [r0, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fca:	f7fc f8cb 	bl	8000164 <strlen>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	900a      	str	r0, [sp, #40]	; 0x28
 8003fd6:	3307      	adds	r3, #7
 8003fd8:	f023 0307 	bic.w	r3, r3, #7
 8003fdc:	f103 0208 	add.w	r2, r3, #8
 8003fe0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003fe4:	f8d4 a000 	ldr.w	sl, [r4]
 8003fe8:	603a      	str	r2, [r7, #0]
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ff2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003ff6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8004000:	4ba6      	ldr	r3, [pc, #664]	; (800429c <_printf_float+0x2ec>)
 8004002:	4638      	mov	r0, r7
 8004004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004006:	f7fc fd0b 	bl	8000a20 <__aeabi_dcmpun>
 800400a:	bb68      	cbnz	r0, 8004068 <_printf_float+0xb8>
 800400c:	f04f 32ff 	mov.w	r2, #4294967295
 8004010:	4ba2      	ldr	r3, [pc, #648]	; (800429c <_printf_float+0x2ec>)
 8004012:	4638      	mov	r0, r7
 8004014:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004016:	f7fc fce5 	bl	80009e4 <__aeabi_dcmple>
 800401a:	bb28      	cbnz	r0, 8004068 <_printf_float+0xb8>
 800401c:	2200      	movs	r2, #0
 800401e:	2300      	movs	r3, #0
 8004020:	4638      	mov	r0, r7
 8004022:	4649      	mov	r1, r9
 8004024:	f7fc fcd4 	bl	80009d0 <__aeabi_dcmplt>
 8004028:	b110      	cbz	r0, 8004030 <_printf_float+0x80>
 800402a:	232d      	movs	r3, #45	; 0x2d
 800402c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004030:	4f9b      	ldr	r7, [pc, #620]	; (80042a0 <_printf_float+0x2f0>)
 8004032:	4b9c      	ldr	r3, [pc, #624]	; (80042a4 <_printf_float+0x2f4>)
 8004034:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004038:	bf98      	it	ls
 800403a:	461f      	movls	r7, r3
 800403c:	2303      	movs	r3, #3
 800403e:	f04f 0900 	mov.w	r9, #0
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	f02a 0304 	bic.w	r3, sl, #4
 8004048:	6023      	str	r3, [r4, #0]
 800404a:	9600      	str	r6, [sp, #0]
 800404c:	465b      	mov	r3, fp
 800404e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004050:	4621      	mov	r1, r4
 8004052:	4628      	mov	r0, r5
 8004054:	f000 f9e2 	bl	800441c <_printf_common>
 8004058:	3001      	adds	r0, #1
 800405a:	f040 8090 	bne.w	800417e <_printf_float+0x1ce>
 800405e:	f04f 30ff 	mov.w	r0, #4294967295
 8004062:	b011      	add	sp, #68	; 0x44
 8004064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004068:	463a      	mov	r2, r7
 800406a:	464b      	mov	r3, r9
 800406c:	4638      	mov	r0, r7
 800406e:	4649      	mov	r1, r9
 8004070:	f7fc fcd6 	bl	8000a20 <__aeabi_dcmpun>
 8004074:	b110      	cbz	r0, 800407c <_printf_float+0xcc>
 8004076:	4f8c      	ldr	r7, [pc, #560]	; (80042a8 <_printf_float+0x2f8>)
 8004078:	4b8c      	ldr	r3, [pc, #560]	; (80042ac <_printf_float+0x2fc>)
 800407a:	e7db      	b.n	8004034 <_printf_float+0x84>
 800407c:	6863      	ldr	r3, [r4, #4]
 800407e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004082:	1c59      	adds	r1, r3, #1
 8004084:	a80d      	add	r0, sp, #52	; 0x34
 8004086:	a90e      	add	r1, sp, #56	; 0x38
 8004088:	d140      	bne.n	800410c <_printf_float+0x15c>
 800408a:	2306      	movs	r3, #6
 800408c:	6063      	str	r3, [r4, #4]
 800408e:	f04f 0c00 	mov.w	ip, #0
 8004092:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004096:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	6022      	str	r2, [r4, #0]
 800409e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	463a      	mov	r2, r7
 80040a6:	464b      	mov	r3, r9
 80040a8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80040ac:	4628      	mov	r0, r5
 80040ae:	f7ff feed 	bl	8003e8c <__cvt>
 80040b2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80040b6:	2b47      	cmp	r3, #71	; 0x47
 80040b8:	4607      	mov	r7, r0
 80040ba:	d109      	bne.n	80040d0 <_printf_float+0x120>
 80040bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040be:	1cd8      	adds	r0, r3, #3
 80040c0:	db02      	blt.n	80040c8 <_printf_float+0x118>
 80040c2:	6862      	ldr	r2, [r4, #4]
 80040c4:	4293      	cmp	r3, r2
 80040c6:	dd47      	ble.n	8004158 <_printf_float+0x1a8>
 80040c8:	f1a8 0802 	sub.w	r8, r8, #2
 80040cc:	fa5f f888 	uxtb.w	r8, r8
 80040d0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80040d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040d6:	d824      	bhi.n	8004122 <_printf_float+0x172>
 80040d8:	3901      	subs	r1, #1
 80040da:	4642      	mov	r2, r8
 80040dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040e0:	910d      	str	r1, [sp, #52]	; 0x34
 80040e2:	f7ff ff2f 	bl	8003f44 <__exponent>
 80040e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040e8:	4681      	mov	r9, r0
 80040ea:	1813      	adds	r3, r2, r0
 80040ec:	2a01      	cmp	r2, #1
 80040ee:	6123      	str	r3, [r4, #16]
 80040f0:	dc02      	bgt.n	80040f8 <_printf_float+0x148>
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	07d1      	lsls	r1, r2, #31
 80040f6:	d501      	bpl.n	80040fc <_printf_float+0x14c>
 80040f8:	3301      	adds	r3, #1
 80040fa:	6123      	str	r3, [r4, #16]
 80040fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0a2      	beq.n	800404a <_printf_float+0x9a>
 8004104:	232d      	movs	r3, #45	; 0x2d
 8004106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410a:	e79e      	b.n	800404a <_printf_float+0x9a>
 800410c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004110:	f000 816e 	beq.w	80043f0 <_printf_float+0x440>
 8004114:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004118:	d1b9      	bne.n	800408e <_printf_float+0xde>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1b7      	bne.n	800408e <_printf_float+0xde>
 800411e:	2301      	movs	r3, #1
 8004120:	e7b4      	b.n	800408c <_printf_float+0xdc>
 8004122:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004126:	d119      	bne.n	800415c <_printf_float+0x1ac>
 8004128:	2900      	cmp	r1, #0
 800412a:	6863      	ldr	r3, [r4, #4]
 800412c:	dd0c      	ble.n	8004148 <_printf_float+0x198>
 800412e:	6121      	str	r1, [r4, #16]
 8004130:	b913      	cbnz	r3, 8004138 <_printf_float+0x188>
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	07d2      	lsls	r2, r2, #31
 8004136:	d502      	bpl.n	800413e <_printf_float+0x18e>
 8004138:	3301      	adds	r3, #1
 800413a:	440b      	add	r3, r1
 800413c:	6123      	str	r3, [r4, #16]
 800413e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004140:	f04f 0900 	mov.w	r9, #0
 8004144:	65a3      	str	r3, [r4, #88]	; 0x58
 8004146:	e7d9      	b.n	80040fc <_printf_float+0x14c>
 8004148:	b913      	cbnz	r3, 8004150 <_printf_float+0x1a0>
 800414a:	6822      	ldr	r2, [r4, #0]
 800414c:	07d0      	lsls	r0, r2, #31
 800414e:	d501      	bpl.n	8004154 <_printf_float+0x1a4>
 8004150:	3302      	adds	r3, #2
 8004152:	e7f3      	b.n	800413c <_printf_float+0x18c>
 8004154:	2301      	movs	r3, #1
 8004156:	e7f1      	b.n	800413c <_printf_float+0x18c>
 8004158:	f04f 0867 	mov.w	r8, #103	; 0x67
 800415c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004160:	4293      	cmp	r3, r2
 8004162:	db05      	blt.n	8004170 <_printf_float+0x1c0>
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	6123      	str	r3, [r4, #16]
 8004168:	07d1      	lsls	r1, r2, #31
 800416a:	d5e8      	bpl.n	800413e <_printf_float+0x18e>
 800416c:	3301      	adds	r3, #1
 800416e:	e7e5      	b.n	800413c <_printf_float+0x18c>
 8004170:	2b00      	cmp	r3, #0
 8004172:	bfcc      	ite	gt
 8004174:	2301      	movgt	r3, #1
 8004176:	f1c3 0302 	rsble	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	e7de      	b.n	800413c <_printf_float+0x18c>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	055a      	lsls	r2, r3, #21
 8004182:	d407      	bmi.n	8004194 <_printf_float+0x1e4>
 8004184:	6923      	ldr	r3, [r4, #16]
 8004186:	463a      	mov	r2, r7
 8004188:	4659      	mov	r1, fp
 800418a:	4628      	mov	r0, r5
 800418c:	47b0      	blx	r6
 800418e:	3001      	adds	r0, #1
 8004190:	d129      	bne.n	80041e6 <_printf_float+0x236>
 8004192:	e764      	b.n	800405e <_printf_float+0xae>
 8004194:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004198:	f240 80d7 	bls.w	800434a <_printf_float+0x39a>
 800419c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041a0:	2200      	movs	r2, #0
 80041a2:	2300      	movs	r3, #0
 80041a4:	f7fc fc0a 	bl	80009bc <__aeabi_dcmpeq>
 80041a8:	b388      	cbz	r0, 800420e <_printf_float+0x25e>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4a40      	ldr	r2, [pc, #256]	; (80042b0 <_printf_float+0x300>)
 80041ae:	4659      	mov	r1, fp
 80041b0:	4628      	mov	r0, r5
 80041b2:	47b0      	blx	r6
 80041b4:	3001      	adds	r0, #1
 80041b6:	f43f af52 	beq.w	800405e <_printf_float+0xae>
 80041ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80041be:	429a      	cmp	r2, r3
 80041c0:	db02      	blt.n	80041c8 <_printf_float+0x218>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	07d8      	lsls	r0, r3, #31
 80041c6:	d50e      	bpl.n	80041e6 <_printf_float+0x236>
 80041c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041cc:	4659      	mov	r1, fp
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b0      	blx	r6
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f af43 	beq.w	800405e <_printf_float+0xae>
 80041d8:	2700      	movs	r7, #0
 80041da:	f104 081a 	add.w	r8, r4, #26
 80041de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041e0:	3b01      	subs	r3, #1
 80041e2:	42bb      	cmp	r3, r7
 80041e4:	dc09      	bgt.n	80041fa <_printf_float+0x24a>
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	079f      	lsls	r7, r3, #30
 80041ea:	f100 80fd 	bmi.w	80043e8 <_printf_float+0x438>
 80041ee:	68e0      	ldr	r0, [r4, #12]
 80041f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041f2:	4298      	cmp	r0, r3
 80041f4:	bfb8      	it	lt
 80041f6:	4618      	movlt	r0, r3
 80041f8:	e733      	b.n	8004062 <_printf_float+0xb2>
 80041fa:	2301      	movs	r3, #1
 80041fc:	4642      	mov	r2, r8
 80041fe:	4659      	mov	r1, fp
 8004200:	4628      	mov	r0, r5
 8004202:	47b0      	blx	r6
 8004204:	3001      	adds	r0, #1
 8004206:	f43f af2a 	beq.w	800405e <_printf_float+0xae>
 800420a:	3701      	adds	r7, #1
 800420c:	e7e7      	b.n	80041de <_printf_float+0x22e>
 800420e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004210:	2b00      	cmp	r3, #0
 8004212:	dc2b      	bgt.n	800426c <_printf_float+0x2bc>
 8004214:	2301      	movs	r3, #1
 8004216:	4a26      	ldr	r2, [pc, #152]	; (80042b0 <_printf_float+0x300>)
 8004218:	4659      	mov	r1, fp
 800421a:	4628      	mov	r0, r5
 800421c:	47b0      	blx	r6
 800421e:	3001      	adds	r0, #1
 8004220:	f43f af1d 	beq.w	800405e <_printf_float+0xae>
 8004224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004226:	b923      	cbnz	r3, 8004232 <_printf_float+0x282>
 8004228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800422a:	b913      	cbnz	r3, 8004232 <_printf_float+0x282>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	07d9      	lsls	r1, r3, #31
 8004230:	d5d9      	bpl.n	80041e6 <_printf_float+0x236>
 8004232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004236:	4659      	mov	r1, fp
 8004238:	4628      	mov	r0, r5
 800423a:	47b0      	blx	r6
 800423c:	3001      	adds	r0, #1
 800423e:	f43f af0e 	beq.w	800405e <_printf_float+0xae>
 8004242:	f04f 0800 	mov.w	r8, #0
 8004246:	f104 091a 	add.w	r9, r4, #26
 800424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800424c:	425b      	negs	r3, r3
 800424e:	4543      	cmp	r3, r8
 8004250:	dc01      	bgt.n	8004256 <_printf_float+0x2a6>
 8004252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004254:	e797      	b.n	8004186 <_printf_float+0x1d6>
 8004256:	2301      	movs	r3, #1
 8004258:	464a      	mov	r2, r9
 800425a:	4659      	mov	r1, fp
 800425c:	4628      	mov	r0, r5
 800425e:	47b0      	blx	r6
 8004260:	3001      	adds	r0, #1
 8004262:	f43f aefc 	beq.w	800405e <_printf_float+0xae>
 8004266:	f108 0801 	add.w	r8, r8, #1
 800426a:	e7ee      	b.n	800424a <_printf_float+0x29a>
 800426c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800426e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004270:	429a      	cmp	r2, r3
 8004272:	bfa8      	it	ge
 8004274:	461a      	movge	r2, r3
 8004276:	2a00      	cmp	r2, #0
 8004278:	4690      	mov	r8, r2
 800427a:	dd07      	ble.n	800428c <_printf_float+0x2dc>
 800427c:	4613      	mov	r3, r2
 800427e:	4659      	mov	r1, fp
 8004280:	463a      	mov	r2, r7
 8004282:	4628      	mov	r0, r5
 8004284:	47b0      	blx	r6
 8004286:	3001      	adds	r0, #1
 8004288:	f43f aee9 	beq.w	800405e <_printf_float+0xae>
 800428c:	f104 031a 	add.w	r3, r4, #26
 8004290:	f04f 0a00 	mov.w	sl, #0
 8004294:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004298:	930b      	str	r3, [sp, #44]	; 0x2c
 800429a:	e015      	b.n	80042c8 <_printf_float+0x318>
 800429c:	7fefffff 	.word	0x7fefffff
 80042a0:	08006908 	.word	0x08006908
 80042a4:	08006904 	.word	0x08006904
 80042a8:	08006910 	.word	0x08006910
 80042ac:	0800690c 	.word	0x0800690c
 80042b0:	08006914 	.word	0x08006914
 80042b4:	2301      	movs	r3, #1
 80042b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042b8:	4659      	mov	r1, fp
 80042ba:	4628      	mov	r0, r5
 80042bc:	47b0      	blx	r6
 80042be:	3001      	adds	r0, #1
 80042c0:	f43f aecd 	beq.w	800405e <_printf_float+0xae>
 80042c4:	f10a 0a01 	add.w	sl, sl, #1
 80042c8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80042cc:	eba9 0308 	sub.w	r3, r9, r8
 80042d0:	4553      	cmp	r3, sl
 80042d2:	dcef      	bgt.n	80042b4 <_printf_float+0x304>
 80042d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042d8:	429a      	cmp	r2, r3
 80042da:	444f      	add	r7, r9
 80042dc:	db14      	blt.n	8004308 <_printf_float+0x358>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	07da      	lsls	r2, r3, #31
 80042e2:	d411      	bmi.n	8004308 <_printf_float+0x358>
 80042e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042e6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042e8:	eba3 0209 	sub.w	r2, r3, r9
 80042ec:	eba3 0901 	sub.w	r9, r3, r1
 80042f0:	4591      	cmp	r9, r2
 80042f2:	bfa8      	it	ge
 80042f4:	4691      	movge	r9, r2
 80042f6:	f1b9 0f00 	cmp.w	r9, #0
 80042fa:	dc0d      	bgt.n	8004318 <_printf_float+0x368>
 80042fc:	2700      	movs	r7, #0
 80042fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004302:	f104 081a 	add.w	r8, r4, #26
 8004306:	e018      	b.n	800433a <_printf_float+0x38a>
 8004308:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800430c:	4659      	mov	r1, fp
 800430e:	4628      	mov	r0, r5
 8004310:	47b0      	blx	r6
 8004312:	3001      	adds	r0, #1
 8004314:	d1e6      	bne.n	80042e4 <_printf_float+0x334>
 8004316:	e6a2      	b.n	800405e <_printf_float+0xae>
 8004318:	464b      	mov	r3, r9
 800431a:	463a      	mov	r2, r7
 800431c:	4659      	mov	r1, fp
 800431e:	4628      	mov	r0, r5
 8004320:	47b0      	blx	r6
 8004322:	3001      	adds	r0, #1
 8004324:	d1ea      	bne.n	80042fc <_printf_float+0x34c>
 8004326:	e69a      	b.n	800405e <_printf_float+0xae>
 8004328:	2301      	movs	r3, #1
 800432a:	4642      	mov	r2, r8
 800432c:	4659      	mov	r1, fp
 800432e:	4628      	mov	r0, r5
 8004330:	47b0      	blx	r6
 8004332:	3001      	adds	r0, #1
 8004334:	f43f ae93 	beq.w	800405e <_printf_float+0xae>
 8004338:	3701      	adds	r7, #1
 800433a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	eba3 0309 	sub.w	r3, r3, r9
 8004344:	42bb      	cmp	r3, r7
 8004346:	dcef      	bgt.n	8004328 <_printf_float+0x378>
 8004348:	e74d      	b.n	80041e6 <_printf_float+0x236>
 800434a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800434c:	2a01      	cmp	r2, #1
 800434e:	dc01      	bgt.n	8004354 <_printf_float+0x3a4>
 8004350:	07db      	lsls	r3, r3, #31
 8004352:	d538      	bpl.n	80043c6 <_printf_float+0x416>
 8004354:	2301      	movs	r3, #1
 8004356:	463a      	mov	r2, r7
 8004358:	4659      	mov	r1, fp
 800435a:	4628      	mov	r0, r5
 800435c:	47b0      	blx	r6
 800435e:	3001      	adds	r0, #1
 8004360:	f43f ae7d 	beq.w	800405e <_printf_float+0xae>
 8004364:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004368:	4659      	mov	r1, fp
 800436a:	4628      	mov	r0, r5
 800436c:	47b0      	blx	r6
 800436e:	3001      	adds	r0, #1
 8004370:	f107 0701 	add.w	r7, r7, #1
 8004374:	f43f ae73 	beq.w	800405e <_printf_float+0xae>
 8004378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800437c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800437e:	2200      	movs	r2, #0
 8004380:	f103 38ff 	add.w	r8, r3, #4294967295
 8004384:	2300      	movs	r3, #0
 8004386:	f7fc fb19 	bl	80009bc <__aeabi_dcmpeq>
 800438a:	b9c0      	cbnz	r0, 80043be <_printf_float+0x40e>
 800438c:	4643      	mov	r3, r8
 800438e:	463a      	mov	r2, r7
 8004390:	4659      	mov	r1, fp
 8004392:	4628      	mov	r0, r5
 8004394:	47b0      	blx	r6
 8004396:	3001      	adds	r0, #1
 8004398:	d10d      	bne.n	80043b6 <_printf_float+0x406>
 800439a:	e660      	b.n	800405e <_printf_float+0xae>
 800439c:	2301      	movs	r3, #1
 800439e:	4642      	mov	r2, r8
 80043a0:	4659      	mov	r1, fp
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b0      	blx	r6
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f ae59 	beq.w	800405e <_printf_float+0xae>
 80043ac:	3701      	adds	r7, #1
 80043ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b0:	3b01      	subs	r3, #1
 80043b2:	42bb      	cmp	r3, r7
 80043b4:	dcf2      	bgt.n	800439c <_printf_float+0x3ec>
 80043b6:	464b      	mov	r3, r9
 80043b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043bc:	e6e4      	b.n	8004188 <_printf_float+0x1d8>
 80043be:	2700      	movs	r7, #0
 80043c0:	f104 081a 	add.w	r8, r4, #26
 80043c4:	e7f3      	b.n	80043ae <_printf_float+0x3fe>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e7e1      	b.n	800438e <_printf_float+0x3de>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4642      	mov	r2, r8
 80043ce:	4659      	mov	r1, fp
 80043d0:	4628      	mov	r0, r5
 80043d2:	47b0      	blx	r6
 80043d4:	3001      	adds	r0, #1
 80043d6:	f43f ae42 	beq.w	800405e <_printf_float+0xae>
 80043da:	3701      	adds	r7, #1
 80043dc:	68e3      	ldr	r3, [r4, #12]
 80043de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	42bb      	cmp	r3, r7
 80043e4:	dcf1      	bgt.n	80043ca <_printf_float+0x41a>
 80043e6:	e702      	b.n	80041ee <_printf_float+0x23e>
 80043e8:	2700      	movs	r7, #0
 80043ea:	f104 0819 	add.w	r8, r4, #25
 80043ee:	e7f5      	b.n	80043dc <_printf_float+0x42c>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f43f ae94 	beq.w	800411e <_printf_float+0x16e>
 80043f6:	f04f 0c00 	mov.w	ip, #0
 80043fa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80043fe:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004402:	6022      	str	r2, [r4, #0]
 8004404:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004408:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	463a      	mov	r2, r7
 8004410:	464b      	mov	r3, r9
 8004412:	4628      	mov	r0, r5
 8004414:	f7ff fd3a 	bl	8003e8c <__cvt>
 8004418:	4607      	mov	r7, r0
 800441a:	e64f      	b.n	80040bc <_printf_float+0x10c>

0800441c <_printf_common>:
 800441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004420:	4691      	mov	r9, r2
 8004422:	461f      	mov	r7, r3
 8004424:	688a      	ldr	r2, [r1, #8]
 8004426:	690b      	ldr	r3, [r1, #16]
 8004428:	4606      	mov	r6, r0
 800442a:	4293      	cmp	r3, r2
 800442c:	bfb8      	it	lt
 800442e:	4613      	movlt	r3, r2
 8004430:	f8c9 3000 	str.w	r3, [r9]
 8004434:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004438:	460c      	mov	r4, r1
 800443a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800443e:	b112      	cbz	r2, 8004446 <_printf_common+0x2a>
 8004440:	3301      	adds	r3, #1
 8004442:	f8c9 3000 	str.w	r3, [r9]
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	0699      	lsls	r1, r3, #26
 800444a:	bf42      	ittt	mi
 800444c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004450:	3302      	addmi	r3, #2
 8004452:	f8c9 3000 	strmi.w	r3, [r9]
 8004456:	6825      	ldr	r5, [r4, #0]
 8004458:	f015 0506 	ands.w	r5, r5, #6
 800445c:	d107      	bne.n	800446e <_printf_common+0x52>
 800445e:	f104 0a19 	add.w	sl, r4, #25
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	f8d9 2000 	ldr.w	r2, [r9]
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	42ab      	cmp	r3, r5
 800446c:	dc29      	bgt.n	80044c2 <_printf_common+0xa6>
 800446e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	3300      	adds	r3, #0
 8004476:	bf18      	it	ne
 8004478:	2301      	movne	r3, #1
 800447a:	0692      	lsls	r2, r2, #26
 800447c:	d42e      	bmi.n	80044dc <_printf_common+0xc0>
 800447e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004482:	4639      	mov	r1, r7
 8004484:	4630      	mov	r0, r6
 8004486:	47c0      	blx	r8
 8004488:	3001      	adds	r0, #1
 800448a:	d021      	beq.n	80044d0 <_printf_common+0xb4>
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	68e5      	ldr	r5, [r4, #12]
 8004490:	f003 0306 	and.w	r3, r3, #6
 8004494:	2b04      	cmp	r3, #4
 8004496:	bf18      	it	ne
 8004498:	2500      	movne	r5, #0
 800449a:	f8d9 2000 	ldr.w	r2, [r9]
 800449e:	f04f 0900 	mov.w	r9, #0
 80044a2:	bf08      	it	eq
 80044a4:	1aad      	subeq	r5, r5, r2
 80044a6:	68a3      	ldr	r3, [r4, #8]
 80044a8:	6922      	ldr	r2, [r4, #16]
 80044aa:	bf08      	it	eq
 80044ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bfc4      	itt	gt
 80044b4:	1a9b      	subgt	r3, r3, r2
 80044b6:	18ed      	addgt	r5, r5, r3
 80044b8:	341a      	adds	r4, #26
 80044ba:	454d      	cmp	r5, r9
 80044bc:	d11a      	bne.n	80044f4 <_printf_common+0xd8>
 80044be:	2000      	movs	r0, #0
 80044c0:	e008      	b.n	80044d4 <_printf_common+0xb8>
 80044c2:	2301      	movs	r3, #1
 80044c4:	4652      	mov	r2, sl
 80044c6:	4639      	mov	r1, r7
 80044c8:	4630      	mov	r0, r6
 80044ca:	47c0      	blx	r8
 80044cc:	3001      	adds	r0, #1
 80044ce:	d103      	bne.n	80044d8 <_printf_common+0xbc>
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	3501      	adds	r5, #1
 80044da:	e7c2      	b.n	8004462 <_printf_common+0x46>
 80044dc:	2030      	movs	r0, #48	; 0x30
 80044de:	18e1      	adds	r1, r4, r3
 80044e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044e4:	1c5a      	adds	r2, r3, #1
 80044e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044ea:	4422      	add	r2, r4
 80044ec:	3302      	adds	r3, #2
 80044ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044f2:	e7c4      	b.n	800447e <_printf_common+0x62>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4622      	mov	r2, r4
 80044f8:	4639      	mov	r1, r7
 80044fa:	4630      	mov	r0, r6
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d0e6      	beq.n	80044d0 <_printf_common+0xb4>
 8004502:	f109 0901 	add.w	r9, r9, #1
 8004506:	e7d8      	b.n	80044ba <_printf_common+0x9e>

08004508 <_printf_i>:
 8004508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800450c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004510:	460c      	mov	r4, r1
 8004512:	7e09      	ldrb	r1, [r1, #24]
 8004514:	b085      	sub	sp, #20
 8004516:	296e      	cmp	r1, #110	; 0x6e
 8004518:	4617      	mov	r7, r2
 800451a:	4606      	mov	r6, r0
 800451c:	4698      	mov	r8, r3
 800451e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004520:	f000 80b3 	beq.w	800468a <_printf_i+0x182>
 8004524:	d822      	bhi.n	800456c <_printf_i+0x64>
 8004526:	2963      	cmp	r1, #99	; 0x63
 8004528:	d036      	beq.n	8004598 <_printf_i+0x90>
 800452a:	d80a      	bhi.n	8004542 <_printf_i+0x3a>
 800452c:	2900      	cmp	r1, #0
 800452e:	f000 80b9 	beq.w	80046a4 <_printf_i+0x19c>
 8004532:	2958      	cmp	r1, #88	; 0x58
 8004534:	f000 8083 	beq.w	800463e <_printf_i+0x136>
 8004538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800453c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004540:	e032      	b.n	80045a8 <_printf_i+0xa0>
 8004542:	2964      	cmp	r1, #100	; 0x64
 8004544:	d001      	beq.n	800454a <_printf_i+0x42>
 8004546:	2969      	cmp	r1, #105	; 0x69
 8004548:	d1f6      	bne.n	8004538 <_printf_i+0x30>
 800454a:	6820      	ldr	r0, [r4, #0]
 800454c:	6813      	ldr	r3, [r2, #0]
 800454e:	0605      	lsls	r5, r0, #24
 8004550:	f103 0104 	add.w	r1, r3, #4
 8004554:	d52a      	bpl.n	80045ac <_printf_i+0xa4>
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	da03      	bge.n	8004566 <_printf_i+0x5e>
 800455e:	222d      	movs	r2, #45	; 0x2d
 8004560:	425b      	negs	r3, r3
 8004562:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004566:	486f      	ldr	r0, [pc, #444]	; (8004724 <_printf_i+0x21c>)
 8004568:	220a      	movs	r2, #10
 800456a:	e039      	b.n	80045e0 <_printf_i+0xd8>
 800456c:	2973      	cmp	r1, #115	; 0x73
 800456e:	f000 809d 	beq.w	80046ac <_printf_i+0x1a4>
 8004572:	d808      	bhi.n	8004586 <_printf_i+0x7e>
 8004574:	296f      	cmp	r1, #111	; 0x6f
 8004576:	d020      	beq.n	80045ba <_printf_i+0xb2>
 8004578:	2970      	cmp	r1, #112	; 0x70
 800457a:	d1dd      	bne.n	8004538 <_printf_i+0x30>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	f043 0320 	orr.w	r3, r3, #32
 8004582:	6023      	str	r3, [r4, #0]
 8004584:	e003      	b.n	800458e <_printf_i+0x86>
 8004586:	2975      	cmp	r1, #117	; 0x75
 8004588:	d017      	beq.n	80045ba <_printf_i+0xb2>
 800458a:	2978      	cmp	r1, #120	; 0x78
 800458c:	d1d4      	bne.n	8004538 <_printf_i+0x30>
 800458e:	2378      	movs	r3, #120	; 0x78
 8004590:	4865      	ldr	r0, [pc, #404]	; (8004728 <_printf_i+0x220>)
 8004592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004596:	e055      	b.n	8004644 <_printf_i+0x13c>
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800459e:	1d19      	adds	r1, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6011      	str	r1, [r2, #0]
 80045a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045a8:	2301      	movs	r3, #1
 80045aa:	e08c      	b.n	80046c6 <_printf_i+0x1be>
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045b2:	6011      	str	r1, [r2, #0]
 80045b4:	bf18      	it	ne
 80045b6:	b21b      	sxthne	r3, r3
 80045b8:	e7cf      	b.n	800455a <_printf_i+0x52>
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	6825      	ldr	r5, [r4, #0]
 80045be:	1d18      	adds	r0, r3, #4
 80045c0:	6010      	str	r0, [r2, #0]
 80045c2:	0628      	lsls	r0, r5, #24
 80045c4:	d501      	bpl.n	80045ca <_printf_i+0xc2>
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	e002      	b.n	80045d0 <_printf_i+0xc8>
 80045ca:	0668      	lsls	r0, r5, #25
 80045cc:	d5fb      	bpl.n	80045c6 <_printf_i+0xbe>
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	296f      	cmp	r1, #111	; 0x6f
 80045d2:	bf14      	ite	ne
 80045d4:	220a      	movne	r2, #10
 80045d6:	2208      	moveq	r2, #8
 80045d8:	4852      	ldr	r0, [pc, #328]	; (8004724 <_printf_i+0x21c>)
 80045da:	2100      	movs	r1, #0
 80045dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045e0:	6865      	ldr	r5, [r4, #4]
 80045e2:	2d00      	cmp	r5, #0
 80045e4:	60a5      	str	r5, [r4, #8]
 80045e6:	f2c0 8095 	blt.w	8004714 <_printf_i+0x20c>
 80045ea:	6821      	ldr	r1, [r4, #0]
 80045ec:	f021 0104 	bic.w	r1, r1, #4
 80045f0:	6021      	str	r1, [r4, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d13d      	bne.n	8004672 <_printf_i+0x16a>
 80045f6:	2d00      	cmp	r5, #0
 80045f8:	f040 808e 	bne.w	8004718 <_printf_i+0x210>
 80045fc:	4665      	mov	r5, ip
 80045fe:	2a08      	cmp	r2, #8
 8004600:	d10b      	bne.n	800461a <_printf_i+0x112>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	07db      	lsls	r3, r3, #31
 8004606:	d508      	bpl.n	800461a <_printf_i+0x112>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	6862      	ldr	r2, [r4, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	bfde      	ittt	le
 8004610:	2330      	movle	r3, #48	; 0x30
 8004612:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004616:	f105 35ff 	addle.w	r5, r5, #4294967295
 800461a:	ebac 0305 	sub.w	r3, ip, r5
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	f8cd 8000 	str.w	r8, [sp]
 8004624:	463b      	mov	r3, r7
 8004626:	aa03      	add	r2, sp, #12
 8004628:	4621      	mov	r1, r4
 800462a:	4630      	mov	r0, r6
 800462c:	f7ff fef6 	bl	800441c <_printf_common>
 8004630:	3001      	adds	r0, #1
 8004632:	d14d      	bne.n	80046d0 <_printf_i+0x1c8>
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	b005      	add	sp, #20
 800463a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800463e:	4839      	ldr	r0, [pc, #228]	; (8004724 <_printf_i+0x21c>)
 8004640:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004644:	6813      	ldr	r3, [r2, #0]
 8004646:	6821      	ldr	r1, [r4, #0]
 8004648:	1d1d      	adds	r5, r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6015      	str	r5, [r2, #0]
 800464e:	060a      	lsls	r2, r1, #24
 8004650:	d50b      	bpl.n	800466a <_printf_i+0x162>
 8004652:	07ca      	lsls	r2, r1, #31
 8004654:	bf44      	itt	mi
 8004656:	f041 0120 	orrmi.w	r1, r1, #32
 800465a:	6021      	strmi	r1, [r4, #0]
 800465c:	b91b      	cbnz	r3, 8004666 <_printf_i+0x15e>
 800465e:	6822      	ldr	r2, [r4, #0]
 8004660:	f022 0220 	bic.w	r2, r2, #32
 8004664:	6022      	str	r2, [r4, #0]
 8004666:	2210      	movs	r2, #16
 8004668:	e7b7      	b.n	80045da <_printf_i+0xd2>
 800466a:	064d      	lsls	r5, r1, #25
 800466c:	bf48      	it	mi
 800466e:	b29b      	uxthmi	r3, r3
 8004670:	e7ef      	b.n	8004652 <_printf_i+0x14a>
 8004672:	4665      	mov	r5, ip
 8004674:	fbb3 f1f2 	udiv	r1, r3, r2
 8004678:	fb02 3311 	mls	r3, r2, r1, r3
 800467c:	5cc3      	ldrb	r3, [r0, r3]
 800467e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004682:	460b      	mov	r3, r1
 8004684:	2900      	cmp	r1, #0
 8004686:	d1f5      	bne.n	8004674 <_printf_i+0x16c>
 8004688:	e7b9      	b.n	80045fe <_printf_i+0xf6>
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	6825      	ldr	r5, [r4, #0]
 800468e:	1d18      	adds	r0, r3, #4
 8004690:	6961      	ldr	r1, [r4, #20]
 8004692:	6010      	str	r0, [r2, #0]
 8004694:	0628      	lsls	r0, r5, #24
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	d501      	bpl.n	800469e <_printf_i+0x196>
 800469a:	6019      	str	r1, [r3, #0]
 800469c:	e002      	b.n	80046a4 <_printf_i+0x19c>
 800469e:	066a      	lsls	r2, r5, #25
 80046a0:	d5fb      	bpl.n	800469a <_printf_i+0x192>
 80046a2:	8019      	strh	r1, [r3, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	4665      	mov	r5, ip
 80046a8:	6123      	str	r3, [r4, #16]
 80046aa:	e7b9      	b.n	8004620 <_printf_i+0x118>
 80046ac:	6813      	ldr	r3, [r2, #0]
 80046ae:	1d19      	adds	r1, r3, #4
 80046b0:	6011      	str	r1, [r2, #0]
 80046b2:	681d      	ldr	r5, [r3, #0]
 80046b4:	6862      	ldr	r2, [r4, #4]
 80046b6:	2100      	movs	r1, #0
 80046b8:	4628      	mov	r0, r5
 80046ba:	f001 fa69 	bl	8005b90 <memchr>
 80046be:	b108      	cbz	r0, 80046c4 <_printf_i+0x1bc>
 80046c0:	1b40      	subs	r0, r0, r5
 80046c2:	6060      	str	r0, [r4, #4]
 80046c4:	6863      	ldr	r3, [r4, #4]
 80046c6:	6123      	str	r3, [r4, #16]
 80046c8:	2300      	movs	r3, #0
 80046ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ce:	e7a7      	b.n	8004620 <_printf_i+0x118>
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	462a      	mov	r2, r5
 80046d4:	4639      	mov	r1, r7
 80046d6:	4630      	mov	r0, r6
 80046d8:	47c0      	blx	r8
 80046da:	3001      	adds	r0, #1
 80046dc:	d0aa      	beq.n	8004634 <_printf_i+0x12c>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	079b      	lsls	r3, r3, #30
 80046e2:	d413      	bmi.n	800470c <_printf_i+0x204>
 80046e4:	68e0      	ldr	r0, [r4, #12]
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	4298      	cmp	r0, r3
 80046ea:	bfb8      	it	lt
 80046ec:	4618      	movlt	r0, r3
 80046ee:	e7a3      	b.n	8004638 <_printf_i+0x130>
 80046f0:	2301      	movs	r3, #1
 80046f2:	464a      	mov	r2, r9
 80046f4:	4639      	mov	r1, r7
 80046f6:	4630      	mov	r0, r6
 80046f8:	47c0      	blx	r8
 80046fa:	3001      	adds	r0, #1
 80046fc:	d09a      	beq.n	8004634 <_printf_i+0x12c>
 80046fe:	3501      	adds	r5, #1
 8004700:	68e3      	ldr	r3, [r4, #12]
 8004702:	9a03      	ldr	r2, [sp, #12]
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	42ab      	cmp	r3, r5
 8004708:	dcf2      	bgt.n	80046f0 <_printf_i+0x1e8>
 800470a:	e7eb      	b.n	80046e4 <_printf_i+0x1dc>
 800470c:	2500      	movs	r5, #0
 800470e:	f104 0919 	add.w	r9, r4, #25
 8004712:	e7f5      	b.n	8004700 <_printf_i+0x1f8>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ac      	bne.n	8004672 <_printf_i+0x16a>
 8004718:	7803      	ldrb	r3, [r0, #0]
 800471a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800471e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004722:	e76c      	b.n	80045fe <_printf_i+0xf6>
 8004724:	08006916 	.word	0x08006916
 8004728:	08006927 	.word	0x08006927

0800472c <iprintf>:
 800472c:	b40f      	push	{r0, r1, r2, r3}
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <iprintf+0x2c>)
 8004730:	b513      	push	{r0, r1, r4, lr}
 8004732:	681c      	ldr	r4, [r3, #0]
 8004734:	b124      	cbz	r4, 8004740 <iprintf+0x14>
 8004736:	69a3      	ldr	r3, [r4, #24]
 8004738:	b913      	cbnz	r3, 8004740 <iprintf+0x14>
 800473a:	4620      	mov	r0, r4
 800473c:	f001 f924 	bl	8005988 <__sinit>
 8004740:	ab05      	add	r3, sp, #20
 8004742:	9a04      	ldr	r2, [sp, #16]
 8004744:	68a1      	ldr	r1, [r4, #8]
 8004746:	4620      	mov	r0, r4
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	f001 fd8d 	bl	8006268 <_vfiprintf_r>
 800474e:	b002      	add	sp, #8
 8004750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004754:	b004      	add	sp, #16
 8004756:	4770      	bx	lr
 8004758:	2000000c 	.word	0x2000000c

0800475c <_puts_r>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	460e      	mov	r6, r1
 8004760:	4605      	mov	r5, r0
 8004762:	b118      	cbz	r0, 800476c <_puts_r+0x10>
 8004764:	6983      	ldr	r3, [r0, #24]
 8004766:	b90b      	cbnz	r3, 800476c <_puts_r+0x10>
 8004768:	f001 f90e 	bl	8005988 <__sinit>
 800476c:	69ab      	ldr	r3, [r5, #24]
 800476e:	68ac      	ldr	r4, [r5, #8]
 8004770:	b913      	cbnz	r3, 8004778 <_puts_r+0x1c>
 8004772:	4628      	mov	r0, r5
 8004774:	f001 f908 	bl	8005988 <__sinit>
 8004778:	4b23      	ldr	r3, [pc, #140]	; (8004808 <_puts_r+0xac>)
 800477a:	429c      	cmp	r4, r3
 800477c:	d117      	bne.n	80047ae <_puts_r+0x52>
 800477e:	686c      	ldr	r4, [r5, #4]
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	071b      	lsls	r3, r3, #28
 8004784:	d51d      	bpl.n	80047c2 <_puts_r+0x66>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	b1db      	cbz	r3, 80047c2 <_puts_r+0x66>
 800478a:	3e01      	subs	r6, #1
 800478c:	68a3      	ldr	r3, [r4, #8]
 800478e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004792:	3b01      	subs	r3, #1
 8004794:	60a3      	str	r3, [r4, #8]
 8004796:	b9e9      	cbnz	r1, 80047d4 <_puts_r+0x78>
 8004798:	2b00      	cmp	r3, #0
 800479a:	da2e      	bge.n	80047fa <_puts_r+0x9e>
 800479c:	4622      	mov	r2, r4
 800479e:	210a      	movs	r1, #10
 80047a0:	4628      	mov	r0, r5
 80047a2:	f000 f8fd 	bl	80049a0 <__swbuf_r>
 80047a6:	3001      	adds	r0, #1
 80047a8:	d011      	beq.n	80047ce <_puts_r+0x72>
 80047aa:	200a      	movs	r0, #10
 80047ac:	e011      	b.n	80047d2 <_puts_r+0x76>
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <_puts_r+0xb0>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	d101      	bne.n	80047b8 <_puts_r+0x5c>
 80047b4:	68ac      	ldr	r4, [r5, #8]
 80047b6:	e7e3      	b.n	8004780 <_puts_r+0x24>
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <_puts_r+0xb4>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	bf08      	it	eq
 80047be:	68ec      	ldreq	r4, [r5, #12]
 80047c0:	e7de      	b.n	8004780 <_puts_r+0x24>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4628      	mov	r0, r5
 80047c6:	f000 f93d 	bl	8004a44 <__swsetup_r>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d0dd      	beq.n	800478a <_puts_r+0x2e>
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	da04      	bge.n	80047e2 <_puts_r+0x86>
 80047d8:	69a2      	ldr	r2, [r4, #24]
 80047da:	429a      	cmp	r2, r3
 80047dc:	dc06      	bgt.n	80047ec <_puts_r+0x90>
 80047de:	290a      	cmp	r1, #10
 80047e0:	d004      	beq.n	80047ec <_puts_r+0x90>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	6022      	str	r2, [r4, #0]
 80047e8:	7019      	strb	r1, [r3, #0]
 80047ea:	e7cf      	b.n	800478c <_puts_r+0x30>
 80047ec:	4622      	mov	r2, r4
 80047ee:	4628      	mov	r0, r5
 80047f0:	f000 f8d6 	bl	80049a0 <__swbuf_r>
 80047f4:	3001      	adds	r0, #1
 80047f6:	d1c9      	bne.n	800478c <_puts_r+0x30>
 80047f8:	e7e9      	b.n	80047ce <_puts_r+0x72>
 80047fa:	200a      	movs	r0, #10
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	6022      	str	r2, [r4, #0]
 8004802:	7018      	strb	r0, [r3, #0]
 8004804:	e7e5      	b.n	80047d2 <_puts_r+0x76>
 8004806:	bf00      	nop
 8004808:	08006968 	.word	0x08006968
 800480c:	08006988 	.word	0x08006988
 8004810:	08006948 	.word	0x08006948

08004814 <puts>:
 8004814:	4b02      	ldr	r3, [pc, #8]	; (8004820 <puts+0xc>)
 8004816:	4601      	mov	r1, r0
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f7ff bf9f 	b.w	800475c <_puts_r>
 800481e:	bf00      	nop
 8004820:	2000000c 	.word	0x2000000c

08004824 <_sbrk_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	2300      	movs	r3, #0
 8004828:	4c05      	ldr	r4, [pc, #20]	; (8004840 <_sbrk_r+0x1c>)
 800482a:	4605      	mov	r5, r0
 800482c:	4608      	mov	r0, r1
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	f7fc ffac 	bl	800178c <_sbrk>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	d102      	bne.n	800483e <_sbrk_r+0x1a>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	b103      	cbz	r3, 800483e <_sbrk_r+0x1a>
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	bd38      	pop	{r3, r4, r5, pc}
 8004840:	200003e4 	.word	0x200003e4

08004844 <setvbuf>:
 8004844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004848:	461d      	mov	r5, r3
 800484a:	4b51      	ldr	r3, [pc, #324]	; (8004990 <setvbuf+0x14c>)
 800484c:	4604      	mov	r4, r0
 800484e:	681e      	ldr	r6, [r3, #0]
 8004850:	460f      	mov	r7, r1
 8004852:	4690      	mov	r8, r2
 8004854:	b126      	cbz	r6, 8004860 <setvbuf+0x1c>
 8004856:	69b3      	ldr	r3, [r6, #24]
 8004858:	b913      	cbnz	r3, 8004860 <setvbuf+0x1c>
 800485a:	4630      	mov	r0, r6
 800485c:	f001 f894 	bl	8005988 <__sinit>
 8004860:	4b4c      	ldr	r3, [pc, #304]	; (8004994 <setvbuf+0x150>)
 8004862:	429c      	cmp	r4, r3
 8004864:	d152      	bne.n	800490c <setvbuf+0xc8>
 8004866:	6874      	ldr	r4, [r6, #4]
 8004868:	f1b8 0f02 	cmp.w	r8, #2
 800486c:	d006      	beq.n	800487c <setvbuf+0x38>
 800486e:	f1b8 0f01 	cmp.w	r8, #1
 8004872:	f200 8089 	bhi.w	8004988 <setvbuf+0x144>
 8004876:	2d00      	cmp	r5, #0
 8004878:	f2c0 8086 	blt.w	8004988 <setvbuf+0x144>
 800487c:	4621      	mov	r1, r4
 800487e:	4630      	mov	r0, r6
 8004880:	f001 f818 	bl	80058b4 <_fflush_r>
 8004884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004886:	b141      	cbz	r1, 800489a <setvbuf+0x56>
 8004888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800488c:	4299      	cmp	r1, r3
 800488e:	d002      	beq.n	8004896 <setvbuf+0x52>
 8004890:	4630      	mov	r0, r6
 8004892:	f001 fc75 	bl	8006180 <_free_r>
 8004896:	2300      	movs	r3, #0
 8004898:	6363      	str	r3, [r4, #52]	; 0x34
 800489a:	2300      	movs	r3, #0
 800489c:	61a3      	str	r3, [r4, #24]
 800489e:	6063      	str	r3, [r4, #4]
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	d503      	bpl.n	80048ae <setvbuf+0x6a>
 80048a6:	6921      	ldr	r1, [r4, #16]
 80048a8:	4630      	mov	r0, r6
 80048aa:	f001 fc69 	bl	8006180 <_free_r>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	f1b8 0f02 	cmp.w	r8, #2
 80048b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80048b8:	f023 0303 	bic.w	r3, r3, #3
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	d05d      	beq.n	800497c <setvbuf+0x138>
 80048c0:	ab01      	add	r3, sp, #4
 80048c2:	466a      	mov	r2, sp
 80048c4:	4621      	mov	r1, r4
 80048c6:	4630      	mov	r0, r6
 80048c8:	f001 f8f6 	bl	8005ab8 <__swhatbuf_r>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	4318      	orrs	r0, r3
 80048d0:	81a0      	strh	r0, [r4, #12]
 80048d2:	bb2d      	cbnz	r5, 8004920 <setvbuf+0xdc>
 80048d4:	9d00      	ldr	r5, [sp, #0]
 80048d6:	4628      	mov	r0, r5
 80048d8:	f001 f952 	bl	8005b80 <malloc>
 80048dc:	4607      	mov	r7, r0
 80048de:	2800      	cmp	r0, #0
 80048e0:	d14e      	bne.n	8004980 <setvbuf+0x13c>
 80048e2:	f8dd 9000 	ldr.w	r9, [sp]
 80048e6:	45a9      	cmp	r9, r5
 80048e8:	d13c      	bne.n	8004964 <setvbuf+0x120>
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295
 80048ee:	89a3      	ldrh	r3, [r4, #12]
 80048f0:	f043 0302 	orr.w	r3, r3, #2
 80048f4:	81a3      	strh	r3, [r4, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	60a3      	str	r3, [r4, #8]
 80048fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80048fe:	6023      	str	r3, [r4, #0]
 8004900:	6123      	str	r3, [r4, #16]
 8004902:	2301      	movs	r3, #1
 8004904:	6163      	str	r3, [r4, #20]
 8004906:	b003      	add	sp, #12
 8004908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800490c:	4b22      	ldr	r3, [pc, #136]	; (8004998 <setvbuf+0x154>)
 800490e:	429c      	cmp	r4, r3
 8004910:	d101      	bne.n	8004916 <setvbuf+0xd2>
 8004912:	68b4      	ldr	r4, [r6, #8]
 8004914:	e7a8      	b.n	8004868 <setvbuf+0x24>
 8004916:	4b21      	ldr	r3, [pc, #132]	; (800499c <setvbuf+0x158>)
 8004918:	429c      	cmp	r4, r3
 800491a:	bf08      	it	eq
 800491c:	68f4      	ldreq	r4, [r6, #12]
 800491e:	e7a3      	b.n	8004868 <setvbuf+0x24>
 8004920:	2f00      	cmp	r7, #0
 8004922:	d0d8      	beq.n	80048d6 <setvbuf+0x92>
 8004924:	69b3      	ldr	r3, [r6, #24]
 8004926:	b913      	cbnz	r3, 800492e <setvbuf+0xea>
 8004928:	4630      	mov	r0, r6
 800492a:	f001 f82d 	bl	8005988 <__sinit>
 800492e:	f1b8 0f01 	cmp.w	r8, #1
 8004932:	bf08      	it	eq
 8004934:	89a3      	ldrheq	r3, [r4, #12]
 8004936:	6027      	str	r7, [r4, #0]
 8004938:	bf04      	itt	eq
 800493a:	f043 0301 	orreq.w	r3, r3, #1
 800493e:	81a3      	strheq	r3, [r4, #12]
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004946:	f013 0008 	ands.w	r0, r3, #8
 800494a:	d01b      	beq.n	8004984 <setvbuf+0x140>
 800494c:	f013 0001 	ands.w	r0, r3, #1
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	bf1f      	itttt	ne
 8004956:	426d      	negne	r5, r5
 8004958:	60a3      	strne	r3, [r4, #8]
 800495a:	61a5      	strne	r5, [r4, #24]
 800495c:	4618      	movne	r0, r3
 800495e:	bf08      	it	eq
 8004960:	60a5      	streq	r5, [r4, #8]
 8004962:	e7d0      	b.n	8004906 <setvbuf+0xc2>
 8004964:	4648      	mov	r0, r9
 8004966:	f001 f90b 	bl	8005b80 <malloc>
 800496a:	4607      	mov	r7, r0
 800496c:	2800      	cmp	r0, #0
 800496e:	d0bc      	beq.n	80048ea <setvbuf+0xa6>
 8004970:	89a3      	ldrh	r3, [r4, #12]
 8004972:	464d      	mov	r5, r9
 8004974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004978:	81a3      	strh	r3, [r4, #12]
 800497a:	e7d3      	b.n	8004924 <setvbuf+0xe0>
 800497c:	2000      	movs	r0, #0
 800497e:	e7b6      	b.n	80048ee <setvbuf+0xaa>
 8004980:	46a9      	mov	r9, r5
 8004982:	e7f5      	b.n	8004970 <setvbuf+0x12c>
 8004984:	60a0      	str	r0, [r4, #8]
 8004986:	e7be      	b.n	8004906 <setvbuf+0xc2>
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	e7bb      	b.n	8004906 <setvbuf+0xc2>
 800498e:	bf00      	nop
 8004990:	2000000c 	.word	0x2000000c
 8004994:	08006968 	.word	0x08006968
 8004998:	08006988 	.word	0x08006988
 800499c:	08006948 	.word	0x08006948

080049a0 <__swbuf_r>:
 80049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a2:	460e      	mov	r6, r1
 80049a4:	4614      	mov	r4, r2
 80049a6:	4605      	mov	r5, r0
 80049a8:	b118      	cbz	r0, 80049b2 <__swbuf_r+0x12>
 80049aa:	6983      	ldr	r3, [r0, #24]
 80049ac:	b90b      	cbnz	r3, 80049b2 <__swbuf_r+0x12>
 80049ae:	f000 ffeb 	bl	8005988 <__sinit>
 80049b2:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <__swbuf_r+0x98>)
 80049b4:	429c      	cmp	r4, r3
 80049b6:	d12a      	bne.n	8004a0e <__swbuf_r+0x6e>
 80049b8:	686c      	ldr	r4, [r5, #4]
 80049ba:	69a3      	ldr	r3, [r4, #24]
 80049bc:	60a3      	str	r3, [r4, #8]
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	071a      	lsls	r2, r3, #28
 80049c2:	d52e      	bpl.n	8004a22 <__swbuf_r+0x82>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	b363      	cbz	r3, 8004a22 <__swbuf_r+0x82>
 80049c8:	6923      	ldr	r3, [r4, #16]
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	b2f6      	uxtb	r6, r6
 80049ce:	1ac0      	subs	r0, r0, r3
 80049d0:	6963      	ldr	r3, [r4, #20]
 80049d2:	4637      	mov	r7, r6
 80049d4:	4283      	cmp	r3, r0
 80049d6:	dc04      	bgt.n	80049e2 <__swbuf_r+0x42>
 80049d8:	4621      	mov	r1, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 ff6a 	bl	80058b4 <_fflush_r>
 80049e0:	bb28      	cbnz	r0, 8004a2e <__swbuf_r+0x8e>
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	3001      	adds	r0, #1
 80049e6:	3b01      	subs	r3, #1
 80049e8:	60a3      	str	r3, [r4, #8]
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	6022      	str	r2, [r4, #0]
 80049f0:	701e      	strb	r6, [r3, #0]
 80049f2:	6963      	ldr	r3, [r4, #20]
 80049f4:	4283      	cmp	r3, r0
 80049f6:	d004      	beq.n	8004a02 <__swbuf_r+0x62>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	07db      	lsls	r3, r3, #31
 80049fc:	d519      	bpl.n	8004a32 <__swbuf_r+0x92>
 80049fe:	2e0a      	cmp	r6, #10
 8004a00:	d117      	bne.n	8004a32 <__swbuf_r+0x92>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 ff55 	bl	80058b4 <_fflush_r>
 8004a0a:	b190      	cbz	r0, 8004a32 <__swbuf_r+0x92>
 8004a0c:	e00f      	b.n	8004a2e <__swbuf_r+0x8e>
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <__swbuf_r+0x9c>)
 8004a10:	429c      	cmp	r4, r3
 8004a12:	d101      	bne.n	8004a18 <__swbuf_r+0x78>
 8004a14:	68ac      	ldr	r4, [r5, #8]
 8004a16:	e7d0      	b.n	80049ba <__swbuf_r+0x1a>
 8004a18:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <__swbuf_r+0xa0>)
 8004a1a:	429c      	cmp	r4, r3
 8004a1c:	bf08      	it	eq
 8004a1e:	68ec      	ldreq	r4, [r5, #12]
 8004a20:	e7cb      	b.n	80049ba <__swbuf_r+0x1a>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	f000 f80d 	bl	8004a44 <__swsetup_r>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d0cc      	beq.n	80049c8 <__swbuf_r+0x28>
 8004a2e:	f04f 37ff 	mov.w	r7, #4294967295
 8004a32:	4638      	mov	r0, r7
 8004a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a36:	bf00      	nop
 8004a38:	08006968 	.word	0x08006968
 8004a3c:	08006988 	.word	0x08006988
 8004a40:	08006948 	.word	0x08006948

08004a44 <__swsetup_r>:
 8004a44:	4b32      	ldr	r3, [pc, #200]	; (8004b10 <__swsetup_r+0xcc>)
 8004a46:	b570      	push	{r4, r5, r6, lr}
 8004a48:	681d      	ldr	r5, [r3, #0]
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	b125      	cbz	r5, 8004a5a <__swsetup_r+0x16>
 8004a50:	69ab      	ldr	r3, [r5, #24]
 8004a52:	b913      	cbnz	r3, 8004a5a <__swsetup_r+0x16>
 8004a54:	4628      	mov	r0, r5
 8004a56:	f000 ff97 	bl	8005988 <__sinit>
 8004a5a:	4b2e      	ldr	r3, [pc, #184]	; (8004b14 <__swsetup_r+0xd0>)
 8004a5c:	429c      	cmp	r4, r3
 8004a5e:	d10f      	bne.n	8004a80 <__swsetup_r+0x3c>
 8004a60:	686c      	ldr	r4, [r5, #4]
 8004a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	0715      	lsls	r5, r2, #28
 8004a6a:	d42c      	bmi.n	8004ac6 <__swsetup_r+0x82>
 8004a6c:	06d0      	lsls	r0, r2, #27
 8004a6e:	d411      	bmi.n	8004a94 <__swsetup_r+0x50>
 8004a70:	2209      	movs	r2, #9
 8004a72:	6032      	str	r2, [r6, #0]
 8004a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a78:	81a3      	strh	r3, [r4, #12]
 8004a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7e:	e03e      	b.n	8004afe <__swsetup_r+0xba>
 8004a80:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <__swsetup_r+0xd4>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	d101      	bne.n	8004a8a <__swsetup_r+0x46>
 8004a86:	68ac      	ldr	r4, [r5, #8]
 8004a88:	e7eb      	b.n	8004a62 <__swsetup_r+0x1e>
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <__swsetup_r+0xd8>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	bf08      	it	eq
 8004a90:	68ec      	ldreq	r4, [r5, #12]
 8004a92:	e7e6      	b.n	8004a62 <__swsetup_r+0x1e>
 8004a94:	0751      	lsls	r1, r2, #29
 8004a96:	d512      	bpl.n	8004abe <__swsetup_r+0x7a>
 8004a98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a9a:	b141      	cbz	r1, 8004aae <__swsetup_r+0x6a>
 8004a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	d002      	beq.n	8004aaa <__swsetup_r+0x66>
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f001 fb6b 	bl	8006180 <_free_r>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6363      	str	r3, [r4, #52]	; 0x34
 8004aae:	89a3      	ldrh	r3, [r4, #12]
 8004ab0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ab4:	81a3      	strh	r3, [r4, #12]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	6063      	str	r3, [r4, #4]
 8004aba:	6923      	ldr	r3, [r4, #16]
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	f043 0308 	orr.w	r3, r3, #8
 8004ac4:	81a3      	strh	r3, [r4, #12]
 8004ac6:	6923      	ldr	r3, [r4, #16]
 8004ac8:	b94b      	cbnz	r3, 8004ade <__swsetup_r+0x9a>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d003      	beq.n	8004ade <__swsetup_r+0x9a>
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f001 f811 	bl	8005b00 <__smakebuf_r>
 8004ade:	89a2      	ldrh	r2, [r4, #12]
 8004ae0:	f012 0301 	ands.w	r3, r2, #1
 8004ae4:	d00c      	beq.n	8004b00 <__swsetup_r+0xbc>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60a3      	str	r3, [r4, #8]
 8004aea:	6963      	ldr	r3, [r4, #20]
 8004aec:	425b      	negs	r3, r3
 8004aee:	61a3      	str	r3, [r4, #24]
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	b953      	cbnz	r3, 8004b0a <__swsetup_r+0xc6>
 8004af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004af8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004afc:	d1ba      	bne.n	8004a74 <__swsetup_r+0x30>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	0792      	lsls	r2, r2, #30
 8004b02:	bf58      	it	pl
 8004b04:	6963      	ldrpl	r3, [r4, #20]
 8004b06:	60a3      	str	r3, [r4, #8]
 8004b08:	e7f2      	b.n	8004af0 <__swsetup_r+0xac>
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	e7f7      	b.n	8004afe <__swsetup_r+0xba>
 8004b0e:	bf00      	nop
 8004b10:	2000000c 	.word	0x2000000c
 8004b14:	08006968 	.word	0x08006968
 8004b18:	08006988 	.word	0x08006988
 8004b1c:	08006948 	.word	0x08006948

08004b20 <quorem>:
 8004b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	6903      	ldr	r3, [r0, #16]
 8004b26:	690c      	ldr	r4, [r1, #16]
 8004b28:	4680      	mov	r8, r0
 8004b2a:	42a3      	cmp	r3, r4
 8004b2c:	f2c0 8084 	blt.w	8004c38 <quorem+0x118>
 8004b30:	3c01      	subs	r4, #1
 8004b32:	f101 0714 	add.w	r7, r1, #20
 8004b36:	f100 0614 	add.w	r6, r0, #20
 8004b3a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b3e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b42:	3501      	adds	r5, #1
 8004b44:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b48:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b4c:	eb06 030c 	add.w	r3, r6, ip
 8004b50:	eb07 090c 	add.w	r9, r7, ip
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	b39d      	cbz	r5, 8004bc0 <quorem+0xa0>
 8004b58:	f04f 0a00 	mov.w	sl, #0
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	46b6      	mov	lr, r6
 8004b60:	46d3      	mov	fp, sl
 8004b62:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b66:	b293      	uxth	r3, r2
 8004b68:	fb05 a303 	mla	r3, r5, r3, sl
 8004b6c:	0c12      	lsrs	r2, r2, #16
 8004b6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b72:	fb05 a202 	mla	r2, r5, r2, sl
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	ebab 0303 	sub.w	r3, fp, r3
 8004b7c:	f8de b000 	ldr.w	fp, [lr]
 8004b80:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b84:	fa1f fb8b 	uxth.w	fp, fp
 8004b88:	445b      	add	r3, fp
 8004b8a:	fa1f fb82 	uxth.w	fp, r2
 8004b8e:	f8de 2000 	ldr.w	r2, [lr]
 8004b92:	4581      	cmp	r9, r0
 8004b94:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ba2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004ba6:	f84e 3b04 	str.w	r3, [lr], #4
 8004baa:	d2da      	bcs.n	8004b62 <quorem+0x42>
 8004bac:	f856 300c 	ldr.w	r3, [r6, ip]
 8004bb0:	b933      	cbnz	r3, 8004bc0 <quorem+0xa0>
 8004bb2:	9b01      	ldr	r3, [sp, #4]
 8004bb4:	3b04      	subs	r3, #4
 8004bb6:	429e      	cmp	r6, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	d331      	bcc.n	8004c20 <quorem+0x100>
 8004bbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	f001 fa15 	bl	8005ff0 <__mcmp>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	db26      	blt.n	8004c18 <quorem+0xf8>
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f04f 0c00 	mov.w	ip, #0
 8004bd0:	3501      	adds	r5, #1
 8004bd2:	f857 1b04 	ldr.w	r1, [r7], #4
 8004bd6:	f8d0 e000 	ldr.w	lr, [r0]
 8004bda:	b28b      	uxth	r3, r1
 8004bdc:	ebac 0303 	sub.w	r3, ip, r3
 8004be0:	fa1f f28e 	uxth.w	r2, lr
 8004be4:	4413      	add	r3, r2
 8004be6:	0c0a      	lsrs	r2, r1, #16
 8004be8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bf6:	45b9      	cmp	r9, r7
 8004bf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bfc:	f840 3b04 	str.w	r3, [r0], #4
 8004c00:	d2e7      	bcs.n	8004bd2 <quorem+0xb2>
 8004c02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c0a:	b92a      	cbnz	r2, 8004c18 <quorem+0xf8>
 8004c0c:	3b04      	subs	r3, #4
 8004c0e:	429e      	cmp	r6, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	d30b      	bcc.n	8004c2c <quorem+0x10c>
 8004c14:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c18:	4628      	mov	r0, r5
 8004c1a:	b003      	add	sp, #12
 8004c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	3b04      	subs	r3, #4
 8004c24:	2a00      	cmp	r2, #0
 8004c26:	d1c9      	bne.n	8004bbc <quorem+0x9c>
 8004c28:	3c01      	subs	r4, #1
 8004c2a:	e7c4      	b.n	8004bb6 <quorem+0x96>
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	2a00      	cmp	r2, #0
 8004c32:	d1ef      	bne.n	8004c14 <quorem+0xf4>
 8004c34:	3c01      	subs	r4, #1
 8004c36:	e7ea      	b.n	8004c0e <quorem+0xee>
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e7ee      	b.n	8004c1a <quorem+0xfa>
 8004c3c:	0000      	movs	r0, r0
	...

08004c40 <_dtoa_r>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	4616      	mov	r6, r2
 8004c46:	461f      	mov	r7, r3
 8004c48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c4a:	b095      	sub	sp, #84	; 0x54
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004c52:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c56:	b93d      	cbnz	r5, 8004c68 <_dtoa_r+0x28>
 8004c58:	2010      	movs	r0, #16
 8004c5a:	f000 ff91 	bl	8005b80 <malloc>
 8004c5e:	6260      	str	r0, [r4, #36]	; 0x24
 8004c60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c64:	6005      	str	r5, [r0, #0]
 8004c66:	60c5      	str	r5, [r0, #12]
 8004c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c6a:	6819      	ldr	r1, [r3, #0]
 8004c6c:	b151      	cbz	r1, 8004c84 <_dtoa_r+0x44>
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2301      	movs	r3, #1
 8004c72:	4093      	lsls	r3, r2
 8004c74:	604a      	str	r2, [r1, #4]
 8004c76:	608b      	str	r3, [r1, #8]
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f000 ffd8 	bl	8005c2e <_Bfree>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	1e3b      	subs	r3, r7, #0
 8004c86:	bfaf      	iteee	ge
 8004c88:	2300      	movge	r3, #0
 8004c8a:	2201      	movlt	r2, #1
 8004c8c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	9303      	strlt	r3, [sp, #12]
 8004c92:	bfac      	ite	ge
 8004c94:	f8c8 3000 	strge.w	r3, [r8]
 8004c98:	f8c8 2000 	strlt.w	r2, [r8]
 8004c9c:	4bae      	ldr	r3, [pc, #696]	; (8004f58 <_dtoa_r+0x318>)
 8004c9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ca2:	ea33 0308 	bics.w	r3, r3, r8
 8004ca6:	d11b      	bne.n	8004ce0 <_dtoa_r+0xa0>
 8004ca8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	9b02      	ldr	r3, [sp, #8]
 8004cb2:	b923      	cbnz	r3, 8004cbe <_dtoa_r+0x7e>
 8004cb4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f000 8545 	beq.w	8005748 <_dtoa_r+0xb08>
 8004cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cc0:	b953      	cbnz	r3, 8004cd8 <_dtoa_r+0x98>
 8004cc2:	4ba6      	ldr	r3, [pc, #664]	; (8004f5c <_dtoa_r+0x31c>)
 8004cc4:	e021      	b.n	8004d0a <_dtoa_r+0xca>
 8004cc6:	4ba6      	ldr	r3, [pc, #664]	; (8004f60 <_dtoa_r+0x320>)
 8004cc8:	9306      	str	r3, [sp, #24]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	9806      	ldr	r0, [sp, #24]
 8004cd2:	b015      	add	sp, #84	; 0x54
 8004cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd8:	4ba0      	ldr	r3, [pc, #640]	; (8004f5c <_dtoa_r+0x31c>)
 8004cda:	9306      	str	r3, [sp, #24]
 8004cdc:	3303      	adds	r3, #3
 8004cde:	e7f5      	b.n	8004ccc <_dtoa_r+0x8c>
 8004ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4630      	mov	r0, r6
 8004cea:	4639      	mov	r1, r7
 8004cec:	f7fb fe66 	bl	80009bc <__aeabi_dcmpeq>
 8004cf0:	4682      	mov	sl, r0
 8004cf2:	b160      	cbz	r0, 8004d0e <_dtoa_r+0xce>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8520 	beq.w	8005742 <_dtoa_r+0xb02>
 8004d02:	4b98      	ldr	r3, [pc, #608]	; (8004f64 <_dtoa_r+0x324>)
 8004d04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	9306      	str	r3, [sp, #24]
 8004d0c:	e7e0      	b.n	8004cd0 <_dtoa_r+0x90>
 8004d0e:	ab12      	add	r3, sp, #72	; 0x48
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	ab13      	add	r3, sp, #76	; 0x4c
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4632      	mov	r2, r6
 8004d18:	463b      	mov	r3, r7
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f001 f9e0 	bl	80060e0 <__d2b>
 8004d20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d24:	4683      	mov	fp, r0
 8004d26:	2d00      	cmp	r5, #0
 8004d28:	d07d      	beq.n	8004e26 <_dtoa_r+0x1e6>
 8004d2a:	46b0      	mov	r8, r6
 8004d2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d30:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004d34:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004d38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d3c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004d40:	2200      	movs	r2, #0
 8004d42:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <_dtoa_r+0x328>)
 8004d44:	4640      	mov	r0, r8
 8004d46:	4649      	mov	r1, r9
 8004d48:	f7fb fa18 	bl	800017c <__aeabi_dsub>
 8004d4c:	a37c      	add	r3, pc, #496	; (adr r3, 8004f40 <_dtoa_r+0x300>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fbcb 	bl	80004ec <__aeabi_dmul>
 8004d56:	a37c      	add	r3, pc, #496	; (adr r3, 8004f48 <_dtoa_r+0x308>)
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f7fb fa10 	bl	8000180 <__adddf3>
 8004d60:	4606      	mov	r6, r0
 8004d62:	4628      	mov	r0, r5
 8004d64:	460f      	mov	r7, r1
 8004d66:	f7fb fb57 	bl	8000418 <__aeabi_i2d>
 8004d6a:	a379      	add	r3, pc, #484	; (adr r3, 8004f50 <_dtoa_r+0x310>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	f7fb fbbc 	bl	80004ec <__aeabi_dmul>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4630      	mov	r0, r6
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb fa00 	bl	8000180 <__adddf3>
 8004d80:	4606      	mov	r6, r0
 8004d82:	460f      	mov	r7, r1
 8004d84:	f7fb fe62 	bl	8000a4c <__aeabi_d2iz>
 8004d88:	2200      	movs	r2, #0
 8004d8a:	4682      	mov	sl, r0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4630      	mov	r0, r6
 8004d90:	4639      	mov	r1, r7
 8004d92:	f7fb fe1d 	bl	80009d0 <__aeabi_dcmplt>
 8004d96:	b148      	cbz	r0, 8004dac <_dtoa_r+0x16c>
 8004d98:	4650      	mov	r0, sl
 8004d9a:	f7fb fb3d 	bl	8000418 <__aeabi_i2d>
 8004d9e:	4632      	mov	r2, r6
 8004da0:	463b      	mov	r3, r7
 8004da2:	f7fb fe0b 	bl	80009bc <__aeabi_dcmpeq>
 8004da6:	b908      	cbnz	r0, 8004dac <_dtoa_r+0x16c>
 8004da8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dac:	f1ba 0f16 	cmp.w	sl, #22
 8004db0:	d85a      	bhi.n	8004e68 <_dtoa_r+0x228>
 8004db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004db6:	496d      	ldr	r1, [pc, #436]	; (8004f6c <_dtoa_r+0x32c>)
 8004db8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dc0:	f7fb fe24 	bl	8000a0c <__aeabi_dcmpgt>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d051      	beq.n	8004e6c <_dtoa_r+0x22c>
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dce:	930d      	str	r3, [sp, #52]	; 0x34
 8004dd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004dd2:	1b5d      	subs	r5, r3, r5
 8004dd4:	1e6b      	subs	r3, r5, #1
 8004dd6:	9307      	str	r3, [sp, #28]
 8004dd8:	bf43      	ittte	mi
 8004dda:	2300      	movmi	r3, #0
 8004ddc:	f1c5 0901 	rsbmi	r9, r5, #1
 8004de0:	9307      	strmi	r3, [sp, #28]
 8004de2:	f04f 0900 	movpl.w	r9, #0
 8004de6:	f1ba 0f00 	cmp.w	sl, #0
 8004dea:	db41      	blt.n	8004e70 <_dtoa_r+0x230>
 8004dec:	9b07      	ldr	r3, [sp, #28]
 8004dee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004df2:	4453      	add	r3, sl
 8004df4:	9307      	str	r3, [sp, #28]
 8004df6:	2300      	movs	r3, #0
 8004df8:	9308      	str	r3, [sp, #32]
 8004dfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004dfc:	2b09      	cmp	r3, #9
 8004dfe:	f200 808f 	bhi.w	8004f20 <_dtoa_r+0x2e0>
 8004e02:	2b05      	cmp	r3, #5
 8004e04:	bfc4      	itt	gt
 8004e06:	3b04      	subgt	r3, #4
 8004e08:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004e0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e0c:	bfc8      	it	gt
 8004e0e:	2500      	movgt	r5, #0
 8004e10:	f1a3 0302 	sub.w	r3, r3, #2
 8004e14:	bfd8      	it	le
 8004e16:	2501      	movle	r5, #1
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	f200 808d 	bhi.w	8004f38 <_dtoa_r+0x2f8>
 8004e1e:	e8df f003 	tbb	[pc, r3]
 8004e22:	7d7b      	.short	0x7d7b
 8004e24:	6f2f      	.short	0x6f2f
 8004e26:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e2a:	441d      	add	r5, r3
 8004e2c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e30:	2820      	cmp	r0, #32
 8004e32:	dd13      	ble.n	8004e5c <_dtoa_r+0x21c>
 8004e34:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e38:	9b02      	ldr	r3, [sp, #8]
 8004e3a:	fa08 f800 	lsl.w	r8, r8, r0
 8004e3e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e42:	fa23 f000 	lsr.w	r0, r3, r0
 8004e46:	ea48 0000 	orr.w	r0, r8, r0
 8004e4a:	f7fb fad5 	bl	80003f8 <__aeabi_ui2d>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4680      	mov	r8, r0
 8004e52:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004e56:	3d01      	subs	r5, #1
 8004e58:	9310      	str	r3, [sp, #64]	; 0x40
 8004e5a:	e771      	b.n	8004d40 <_dtoa_r+0x100>
 8004e5c:	9b02      	ldr	r3, [sp, #8]
 8004e5e:	f1c0 0020 	rsb	r0, r0, #32
 8004e62:	fa03 f000 	lsl.w	r0, r3, r0
 8004e66:	e7f0      	b.n	8004e4a <_dtoa_r+0x20a>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e7b0      	b.n	8004dce <_dtoa_r+0x18e>
 8004e6c:	900d      	str	r0, [sp, #52]	; 0x34
 8004e6e:	e7af      	b.n	8004dd0 <_dtoa_r+0x190>
 8004e70:	f1ca 0300 	rsb	r3, sl, #0
 8004e74:	9308      	str	r3, [sp, #32]
 8004e76:	2300      	movs	r3, #0
 8004e78:	eba9 090a 	sub.w	r9, r9, sl
 8004e7c:	930c      	str	r3, [sp, #48]	; 0x30
 8004e7e:	e7bc      	b.n	8004dfa <_dtoa_r+0x1ba>
 8004e80:	2301      	movs	r3, #1
 8004e82:	9309      	str	r3, [sp, #36]	; 0x24
 8004e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	dd74      	ble.n	8004f74 <_dtoa_r+0x334>
 8004e8a:	4698      	mov	r8, r3
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e92:	6072      	str	r2, [r6, #4]
 8004e94:	2204      	movs	r2, #4
 8004e96:	f102 0014 	add.w	r0, r2, #20
 8004e9a:	4298      	cmp	r0, r3
 8004e9c:	6871      	ldr	r1, [r6, #4]
 8004e9e:	d96e      	bls.n	8004f7e <_dtoa_r+0x33e>
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 fe90 	bl	8005bc6 <_Balloc>
 8004ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ea8:	6030      	str	r0, [r6, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f1b8 0f0e 	cmp.w	r8, #14
 8004eb0:	9306      	str	r3, [sp, #24]
 8004eb2:	f200 80ed 	bhi.w	8005090 <_dtoa_r+0x450>
 8004eb6:	2d00      	cmp	r5, #0
 8004eb8:	f000 80ea 	beq.w	8005090 <_dtoa_r+0x450>
 8004ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ec0:	f1ba 0f00 	cmp.w	sl, #0
 8004ec4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004ec8:	dd77      	ble.n	8004fba <_dtoa_r+0x37a>
 8004eca:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <_dtoa_r+0x32c>)
 8004ecc:	f00a 030f 	and.w	r3, sl, #15
 8004ed0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ed4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ed8:	06f0      	lsls	r0, r6, #27
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ee2:	d568      	bpl.n	8004fb6 <_dtoa_r+0x376>
 8004ee4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004ee8:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <_dtoa_r+0x330>)
 8004eea:	2503      	movs	r5, #3
 8004eec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ef0:	f7fb fc26 	bl	8000740 <__aeabi_ddiv>
 8004ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ef8:	f006 060f 	and.w	r6, r6, #15
 8004efc:	4f1c      	ldr	r7, [pc, #112]	; (8004f70 <_dtoa_r+0x330>)
 8004efe:	e04f      	b.n	8004fa0 <_dtoa_r+0x360>
 8004f00:	2301      	movs	r3, #1
 8004f02:	9309      	str	r3, [sp, #36]	; 0x24
 8004f04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f06:	4453      	add	r3, sl
 8004f08:	f103 0801 	add.w	r8, r3, #1
 8004f0c:	9304      	str	r3, [sp, #16]
 8004f0e:	4643      	mov	r3, r8
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	bfb8      	it	lt
 8004f14:	2301      	movlt	r3, #1
 8004f16:	e7ba      	b.n	8004e8e <_dtoa_r+0x24e>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e7b2      	b.n	8004e82 <_dtoa_r+0x242>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e7f0      	b.n	8004f02 <_dtoa_r+0x2c2>
 8004f20:	2501      	movs	r5, #1
 8004f22:	2300      	movs	r3, #0
 8004f24:	9509      	str	r5, [sp, #36]	; 0x24
 8004f26:	931e      	str	r3, [sp, #120]	; 0x78
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	9304      	str	r3, [sp, #16]
 8004f30:	4698      	mov	r8, r3
 8004f32:	2312      	movs	r3, #18
 8004f34:	921f      	str	r2, [sp, #124]	; 0x7c
 8004f36:	e7aa      	b.n	8004e8e <_dtoa_r+0x24e>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3c:	e7f4      	b.n	8004f28 <_dtoa_r+0x2e8>
 8004f3e:	bf00      	nop
 8004f40:	636f4361 	.word	0x636f4361
 8004f44:	3fd287a7 	.word	0x3fd287a7
 8004f48:	8b60c8b3 	.word	0x8b60c8b3
 8004f4c:	3fc68a28 	.word	0x3fc68a28
 8004f50:	509f79fb 	.word	0x509f79fb
 8004f54:	3fd34413 	.word	0x3fd34413
 8004f58:	7ff00000 	.word	0x7ff00000
 8004f5c:	08006941 	.word	0x08006941
 8004f60:	08006938 	.word	0x08006938
 8004f64:	08006915 	.word	0x08006915
 8004f68:	3ff80000 	.word	0x3ff80000
 8004f6c:	080069d0 	.word	0x080069d0
 8004f70:	080069a8 	.word	0x080069a8
 8004f74:	2301      	movs	r3, #1
 8004f76:	9304      	str	r3, [sp, #16]
 8004f78:	4698      	mov	r8, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	e7da      	b.n	8004f34 <_dtoa_r+0x2f4>
 8004f7e:	3101      	adds	r1, #1
 8004f80:	6071      	str	r1, [r6, #4]
 8004f82:	0052      	lsls	r2, r2, #1
 8004f84:	e787      	b.n	8004e96 <_dtoa_r+0x256>
 8004f86:	07f1      	lsls	r1, r6, #31
 8004f88:	d508      	bpl.n	8004f9c <_dtoa_r+0x35c>
 8004f8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f92:	f7fb faab 	bl	80004ec <__aeabi_dmul>
 8004f96:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f9a:	3501      	adds	r5, #1
 8004f9c:	1076      	asrs	r6, r6, #1
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	2e00      	cmp	r6, #0
 8004fa2:	d1f0      	bne.n	8004f86 <_dtoa_r+0x346>
 8004fa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fac:	f7fb fbc8 	bl	8000740 <__aeabi_ddiv>
 8004fb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fb4:	e01b      	b.n	8004fee <_dtoa_r+0x3ae>
 8004fb6:	2502      	movs	r5, #2
 8004fb8:	e7a0      	b.n	8004efc <_dtoa_r+0x2bc>
 8004fba:	f000 80a4 	beq.w	8005106 <_dtoa_r+0x4c6>
 8004fbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004fc2:	f1ca 0600 	rsb	r6, sl, #0
 8004fc6:	4ba0      	ldr	r3, [pc, #640]	; (8005248 <_dtoa_r+0x608>)
 8004fc8:	f006 020f 	and.w	r2, r6, #15
 8004fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb fa8a 	bl	80004ec <__aeabi_dmul>
 8004fd8:	2502      	movs	r5, #2
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fe0:	4f9a      	ldr	r7, [pc, #616]	; (800524c <_dtoa_r+0x60c>)
 8004fe2:	1136      	asrs	r6, r6, #4
 8004fe4:	2e00      	cmp	r6, #0
 8004fe6:	f040 8083 	bne.w	80050f0 <_dtoa_r+0x4b0>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e0      	bne.n	8004fb0 <_dtoa_r+0x370>
 8004fee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 808a 	beq.w	800510a <_dtoa_r+0x4ca>
 8004ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ffa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005002:	2200      	movs	r2, #0
 8005004:	4b92      	ldr	r3, [pc, #584]	; (8005250 <_dtoa_r+0x610>)
 8005006:	f7fb fce3 	bl	80009d0 <__aeabi_dcmplt>
 800500a:	2800      	cmp	r0, #0
 800500c:	d07d      	beq.n	800510a <_dtoa_r+0x4ca>
 800500e:	f1b8 0f00 	cmp.w	r8, #0
 8005012:	d07a      	beq.n	800510a <_dtoa_r+0x4ca>
 8005014:	9b04      	ldr	r3, [sp, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	dd36      	ble.n	8005088 <_dtoa_r+0x448>
 800501a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800501e:	2200      	movs	r2, #0
 8005020:	4b8c      	ldr	r3, [pc, #560]	; (8005254 <_dtoa_r+0x614>)
 8005022:	f7fb fa63 	bl	80004ec <__aeabi_dmul>
 8005026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800502a:	9e04      	ldr	r6, [sp, #16]
 800502c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005030:	3501      	adds	r5, #1
 8005032:	4628      	mov	r0, r5
 8005034:	f7fb f9f0 	bl	8000418 <__aeabi_i2d>
 8005038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800503c:	f7fb fa56 	bl	80004ec <__aeabi_dmul>
 8005040:	2200      	movs	r2, #0
 8005042:	4b85      	ldr	r3, [pc, #532]	; (8005258 <_dtoa_r+0x618>)
 8005044:	f7fb f89c 	bl	8000180 <__adddf3>
 8005048:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800504c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005050:	950b      	str	r5, [sp, #44]	; 0x2c
 8005052:	2e00      	cmp	r6, #0
 8005054:	d15c      	bne.n	8005110 <_dtoa_r+0x4d0>
 8005056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	4b7f      	ldr	r3, [pc, #508]	; (800525c <_dtoa_r+0x61c>)
 800505e:	f7fb f88d 	bl	800017c <__aeabi_dsub>
 8005062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005064:	462b      	mov	r3, r5
 8005066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800506a:	f7fb fccf 	bl	8000a0c <__aeabi_dcmpgt>
 800506e:	2800      	cmp	r0, #0
 8005070:	f040 8281 	bne.w	8005576 <_dtoa_r+0x936>
 8005074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800507a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800507e:	f7fb fca7 	bl	80009d0 <__aeabi_dcmplt>
 8005082:	2800      	cmp	r0, #0
 8005084:	f040 8275 	bne.w	8005572 <_dtoa_r+0x932>
 8005088:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800508c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005092:	2b00      	cmp	r3, #0
 8005094:	f2c0 814b 	blt.w	800532e <_dtoa_r+0x6ee>
 8005098:	f1ba 0f0e 	cmp.w	sl, #14
 800509c:	f300 8147 	bgt.w	800532e <_dtoa_r+0x6ee>
 80050a0:	4b69      	ldr	r3, [pc, #420]	; (8005248 <_dtoa_r+0x608>)
 80050a2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f280 80d7 	bge.w	8005264 <_dtoa_r+0x624>
 80050b6:	f1b8 0f00 	cmp.w	r8, #0
 80050ba:	f300 80d3 	bgt.w	8005264 <_dtoa_r+0x624>
 80050be:	f040 8257 	bne.w	8005570 <_dtoa_r+0x930>
 80050c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c6:	2200      	movs	r2, #0
 80050c8:	4b64      	ldr	r3, [pc, #400]	; (800525c <_dtoa_r+0x61c>)
 80050ca:	f7fb fa0f 	bl	80004ec <__aeabi_dmul>
 80050ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050d2:	f7fb fc91 	bl	80009f8 <__aeabi_dcmpge>
 80050d6:	4646      	mov	r6, r8
 80050d8:	4647      	mov	r7, r8
 80050da:	2800      	cmp	r0, #0
 80050dc:	f040 822d 	bne.w	800553a <_dtoa_r+0x8fa>
 80050e0:	9b06      	ldr	r3, [sp, #24]
 80050e2:	9a06      	ldr	r2, [sp, #24]
 80050e4:	1c5d      	adds	r5, r3, #1
 80050e6:	2331      	movs	r3, #49	; 0x31
 80050e8:	f10a 0a01 	add.w	sl, sl, #1
 80050ec:	7013      	strb	r3, [r2, #0]
 80050ee:	e228      	b.n	8005542 <_dtoa_r+0x902>
 80050f0:	07f2      	lsls	r2, r6, #31
 80050f2:	d505      	bpl.n	8005100 <_dtoa_r+0x4c0>
 80050f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f8:	f7fb f9f8 	bl	80004ec <__aeabi_dmul>
 80050fc:	2301      	movs	r3, #1
 80050fe:	3501      	adds	r5, #1
 8005100:	1076      	asrs	r6, r6, #1
 8005102:	3708      	adds	r7, #8
 8005104:	e76e      	b.n	8004fe4 <_dtoa_r+0x3a4>
 8005106:	2502      	movs	r5, #2
 8005108:	e771      	b.n	8004fee <_dtoa_r+0x3ae>
 800510a:	4657      	mov	r7, sl
 800510c:	4646      	mov	r6, r8
 800510e:	e790      	b.n	8005032 <_dtoa_r+0x3f2>
 8005110:	4b4d      	ldr	r3, [pc, #308]	; (8005248 <_dtoa_r+0x608>)
 8005112:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005116:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800511a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d048      	beq.n	80051b2 <_dtoa_r+0x572>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	2000      	movs	r0, #0
 8005126:	494e      	ldr	r1, [pc, #312]	; (8005260 <_dtoa_r+0x620>)
 8005128:	f7fb fb0a 	bl	8000740 <__aeabi_ddiv>
 800512c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005130:	f7fb f824 	bl	800017c <__aeabi_dsub>
 8005134:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005138:	9d06      	ldr	r5, [sp, #24]
 800513a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800513e:	f7fb fc85 	bl	8000a4c <__aeabi_d2iz>
 8005142:	9011      	str	r0, [sp, #68]	; 0x44
 8005144:	f7fb f968 	bl	8000418 <__aeabi_i2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005150:	f7fb f814 	bl	800017c <__aeabi_dsub>
 8005154:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800515a:	3330      	adds	r3, #48	; 0x30
 800515c:	f805 3b01 	strb.w	r3, [r5], #1
 8005160:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005164:	f7fb fc34 	bl	80009d0 <__aeabi_dcmplt>
 8005168:	2800      	cmp	r0, #0
 800516a:	d163      	bne.n	8005234 <_dtoa_r+0x5f4>
 800516c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005170:	2000      	movs	r0, #0
 8005172:	4937      	ldr	r1, [pc, #220]	; (8005250 <_dtoa_r+0x610>)
 8005174:	f7fb f802 	bl	800017c <__aeabi_dsub>
 8005178:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800517c:	f7fb fc28 	bl	80009d0 <__aeabi_dcmplt>
 8005180:	2800      	cmp	r0, #0
 8005182:	f040 80b5 	bne.w	80052f0 <_dtoa_r+0x6b0>
 8005186:	9b06      	ldr	r3, [sp, #24]
 8005188:	1aeb      	subs	r3, r5, r3
 800518a:	429e      	cmp	r6, r3
 800518c:	f77f af7c 	ble.w	8005088 <_dtoa_r+0x448>
 8005190:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005194:	2200      	movs	r2, #0
 8005196:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <_dtoa_r+0x614>)
 8005198:	f7fb f9a8 	bl	80004ec <__aeabi_dmul>
 800519c:	2200      	movs	r2, #0
 800519e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80051a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a6:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <_dtoa_r+0x614>)
 80051a8:	f7fb f9a0 	bl	80004ec <__aeabi_dmul>
 80051ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b0:	e7c3      	b.n	800513a <_dtoa_r+0x4fa>
 80051b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80051b6:	f7fb f999 	bl	80004ec <__aeabi_dmul>
 80051ba:	9b06      	ldr	r3, [sp, #24]
 80051bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80051c0:	199d      	adds	r5, r3, r6
 80051c2:	461e      	mov	r6, r3
 80051c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c8:	f7fb fc40 	bl	8000a4c <__aeabi_d2iz>
 80051cc:	9011      	str	r0, [sp, #68]	; 0x44
 80051ce:	f7fb f923 	bl	8000418 <__aeabi_i2d>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051da:	f7fa ffcf 	bl	800017c <__aeabi_dsub>
 80051de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051e4:	3330      	adds	r3, #48	; 0x30
 80051e6:	f806 3b01 	strb.w	r3, [r6], #1
 80051ea:	42ae      	cmp	r6, r5
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	d124      	bne.n	800523c <_dtoa_r+0x5fc>
 80051f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051f6:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <_dtoa_r+0x620>)
 80051f8:	f7fa ffc2 	bl	8000180 <__adddf3>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005204:	f7fb fc02 	bl	8000a0c <__aeabi_dcmpgt>
 8005208:	2800      	cmp	r0, #0
 800520a:	d171      	bne.n	80052f0 <_dtoa_r+0x6b0>
 800520c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005210:	2000      	movs	r0, #0
 8005212:	4913      	ldr	r1, [pc, #76]	; (8005260 <_dtoa_r+0x620>)
 8005214:	f7fa ffb2 	bl	800017c <__aeabi_dsub>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005220:	f7fb fbd6 	bl	80009d0 <__aeabi_dcmplt>
 8005224:	2800      	cmp	r0, #0
 8005226:	f43f af2f 	beq.w	8005088 <_dtoa_r+0x448>
 800522a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800522e:	1e6a      	subs	r2, r5, #1
 8005230:	2b30      	cmp	r3, #48	; 0x30
 8005232:	d001      	beq.n	8005238 <_dtoa_r+0x5f8>
 8005234:	46ba      	mov	sl, r7
 8005236:	e04a      	b.n	80052ce <_dtoa_r+0x68e>
 8005238:	4615      	mov	r5, r2
 800523a:	e7f6      	b.n	800522a <_dtoa_r+0x5ea>
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <_dtoa_r+0x614>)
 800523e:	f7fb f955 	bl	80004ec <__aeabi_dmul>
 8005242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005246:	e7bd      	b.n	80051c4 <_dtoa_r+0x584>
 8005248:	080069d0 	.word	0x080069d0
 800524c:	080069a8 	.word	0x080069a8
 8005250:	3ff00000 	.word	0x3ff00000
 8005254:	40240000 	.word	0x40240000
 8005258:	401c0000 	.word	0x401c0000
 800525c:	40140000 	.word	0x40140000
 8005260:	3fe00000 	.word	0x3fe00000
 8005264:	9d06      	ldr	r5, [sp, #24]
 8005266:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800526a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800526e:	4630      	mov	r0, r6
 8005270:	4639      	mov	r1, r7
 8005272:	f7fb fa65 	bl	8000740 <__aeabi_ddiv>
 8005276:	f7fb fbe9 	bl	8000a4c <__aeabi_d2iz>
 800527a:	4681      	mov	r9, r0
 800527c:	f7fb f8cc 	bl	8000418 <__aeabi_i2d>
 8005280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005284:	f7fb f932 	bl	80004ec <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4630      	mov	r0, r6
 800528e:	4639      	mov	r1, r7
 8005290:	f7fa ff74 	bl	800017c <__aeabi_dsub>
 8005294:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005298:	f805 6b01 	strb.w	r6, [r5], #1
 800529c:	9e06      	ldr	r6, [sp, #24]
 800529e:	4602      	mov	r2, r0
 80052a0:	1bae      	subs	r6, r5, r6
 80052a2:	45b0      	cmp	r8, r6
 80052a4:	460b      	mov	r3, r1
 80052a6:	d135      	bne.n	8005314 <_dtoa_r+0x6d4>
 80052a8:	f7fa ff6a 	bl	8000180 <__adddf3>
 80052ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052b0:	4606      	mov	r6, r0
 80052b2:	460f      	mov	r7, r1
 80052b4:	f7fb fbaa 	bl	8000a0c <__aeabi_dcmpgt>
 80052b8:	b9c8      	cbnz	r0, 80052ee <_dtoa_r+0x6ae>
 80052ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fb fb7b 	bl	80009bc <__aeabi_dcmpeq>
 80052c6:	b110      	cbz	r0, 80052ce <_dtoa_r+0x68e>
 80052c8:	f019 0f01 	tst.w	r9, #1
 80052cc:	d10f      	bne.n	80052ee <_dtoa_r+0x6ae>
 80052ce:	4659      	mov	r1, fp
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 fcac 	bl	8005c2e <_Bfree>
 80052d6:	2300      	movs	r3, #0
 80052d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052da:	702b      	strb	r3, [r5, #0]
 80052dc:	f10a 0301 	add.w	r3, sl, #1
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f43f acf3 	beq.w	8004cd0 <_dtoa_r+0x90>
 80052ea:	601d      	str	r5, [r3, #0]
 80052ec:	e4f0      	b.n	8004cd0 <_dtoa_r+0x90>
 80052ee:	4657      	mov	r7, sl
 80052f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052f4:	1e6b      	subs	r3, r5, #1
 80052f6:	2a39      	cmp	r2, #57	; 0x39
 80052f8:	d106      	bne.n	8005308 <_dtoa_r+0x6c8>
 80052fa:	9a06      	ldr	r2, [sp, #24]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d107      	bne.n	8005310 <_dtoa_r+0x6d0>
 8005300:	2330      	movs	r3, #48	; 0x30
 8005302:	7013      	strb	r3, [r2, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	3701      	adds	r7, #1
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	3201      	adds	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e791      	b.n	8005234 <_dtoa_r+0x5f4>
 8005310:	461d      	mov	r5, r3
 8005312:	e7ed      	b.n	80052f0 <_dtoa_r+0x6b0>
 8005314:	2200      	movs	r2, #0
 8005316:	4b99      	ldr	r3, [pc, #612]	; (800557c <_dtoa_r+0x93c>)
 8005318:	f7fb f8e8 	bl	80004ec <__aeabi_dmul>
 800531c:	2200      	movs	r2, #0
 800531e:	2300      	movs	r3, #0
 8005320:	4606      	mov	r6, r0
 8005322:	460f      	mov	r7, r1
 8005324:	f7fb fb4a 	bl	80009bc <__aeabi_dcmpeq>
 8005328:	2800      	cmp	r0, #0
 800532a:	d09e      	beq.n	800526a <_dtoa_r+0x62a>
 800532c:	e7cf      	b.n	80052ce <_dtoa_r+0x68e>
 800532e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005330:	2a00      	cmp	r2, #0
 8005332:	f000 8088 	beq.w	8005446 <_dtoa_r+0x806>
 8005336:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005338:	2a01      	cmp	r2, #1
 800533a:	dc6d      	bgt.n	8005418 <_dtoa_r+0x7d8>
 800533c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800533e:	2a00      	cmp	r2, #0
 8005340:	d066      	beq.n	8005410 <_dtoa_r+0x7d0>
 8005342:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005346:	464d      	mov	r5, r9
 8005348:	9e08      	ldr	r6, [sp, #32]
 800534a:	9a07      	ldr	r2, [sp, #28]
 800534c:	2101      	movs	r1, #1
 800534e:	441a      	add	r2, r3
 8005350:	4620      	mov	r0, r4
 8005352:	4499      	add	r9, r3
 8005354:	9207      	str	r2, [sp, #28]
 8005356:	f000 fd0a 	bl	8005d6e <__i2b>
 800535a:	4607      	mov	r7, r0
 800535c:	2d00      	cmp	r5, #0
 800535e:	dd0b      	ble.n	8005378 <_dtoa_r+0x738>
 8005360:	9b07      	ldr	r3, [sp, #28]
 8005362:	2b00      	cmp	r3, #0
 8005364:	dd08      	ble.n	8005378 <_dtoa_r+0x738>
 8005366:	42ab      	cmp	r3, r5
 8005368:	bfa8      	it	ge
 800536a:	462b      	movge	r3, r5
 800536c:	9a07      	ldr	r2, [sp, #28]
 800536e:	eba9 0903 	sub.w	r9, r9, r3
 8005372:	1aed      	subs	r5, r5, r3
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	9307      	str	r3, [sp, #28]
 8005378:	9b08      	ldr	r3, [sp, #32]
 800537a:	b1eb      	cbz	r3, 80053b8 <_dtoa_r+0x778>
 800537c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d065      	beq.n	800544e <_dtoa_r+0x80e>
 8005382:	b18e      	cbz	r6, 80053a8 <_dtoa_r+0x768>
 8005384:	4639      	mov	r1, r7
 8005386:	4632      	mov	r2, r6
 8005388:	4620      	mov	r0, r4
 800538a:	f000 fd8f 	bl	8005eac <__pow5mult>
 800538e:	465a      	mov	r2, fp
 8005390:	4601      	mov	r1, r0
 8005392:	4607      	mov	r7, r0
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fcf3 	bl	8005d80 <__multiply>
 800539a:	4659      	mov	r1, fp
 800539c:	900a      	str	r0, [sp, #40]	; 0x28
 800539e:	4620      	mov	r0, r4
 80053a0:	f000 fc45 	bl	8005c2e <_Bfree>
 80053a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a6:	469b      	mov	fp, r3
 80053a8:	9b08      	ldr	r3, [sp, #32]
 80053aa:	1b9a      	subs	r2, r3, r6
 80053ac:	d004      	beq.n	80053b8 <_dtoa_r+0x778>
 80053ae:	4659      	mov	r1, fp
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 fd7b 	bl	8005eac <__pow5mult>
 80053b6:	4683      	mov	fp, r0
 80053b8:	2101      	movs	r1, #1
 80053ba:	4620      	mov	r0, r4
 80053bc:	f000 fcd7 	bl	8005d6e <__i2b>
 80053c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053c2:	4606      	mov	r6, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 81c6 	beq.w	8005756 <_dtoa_r+0xb16>
 80053ca:	461a      	mov	r2, r3
 80053cc:	4601      	mov	r1, r0
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 fd6c 	bl	8005eac <__pow5mult>
 80053d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053d6:	4606      	mov	r6, r0
 80053d8:	2b01      	cmp	r3, #1
 80053da:	dc3e      	bgt.n	800545a <_dtoa_r+0x81a>
 80053dc:	9b02      	ldr	r3, [sp, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d137      	bne.n	8005452 <_dtoa_r+0x812>
 80053e2:	9b03      	ldr	r3, [sp, #12]
 80053e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d134      	bne.n	8005456 <_dtoa_r+0x816>
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053f2:	0d1b      	lsrs	r3, r3, #20
 80053f4:	051b      	lsls	r3, r3, #20
 80053f6:	b12b      	cbz	r3, 8005404 <_dtoa_r+0x7c4>
 80053f8:	9b07      	ldr	r3, [sp, #28]
 80053fa:	f109 0901 	add.w	r9, r9, #1
 80053fe:	3301      	adds	r3, #1
 8005400:	9307      	str	r3, [sp, #28]
 8005402:	2301      	movs	r3, #1
 8005404:	9308      	str	r3, [sp, #32]
 8005406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005408:	2b00      	cmp	r3, #0
 800540a:	d128      	bne.n	800545e <_dtoa_r+0x81e>
 800540c:	2001      	movs	r0, #1
 800540e:	e02e      	b.n	800546e <_dtoa_r+0x82e>
 8005410:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005412:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005416:	e796      	b.n	8005346 <_dtoa_r+0x706>
 8005418:	9b08      	ldr	r3, [sp, #32]
 800541a:	f108 36ff 	add.w	r6, r8, #4294967295
 800541e:	42b3      	cmp	r3, r6
 8005420:	bfb7      	itett	lt
 8005422:	9b08      	ldrlt	r3, [sp, #32]
 8005424:	1b9e      	subge	r6, r3, r6
 8005426:	1af2      	sublt	r2, r6, r3
 8005428:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800542a:	bfbf      	itttt	lt
 800542c:	9608      	strlt	r6, [sp, #32]
 800542e:	189b      	addlt	r3, r3, r2
 8005430:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005432:	2600      	movlt	r6, #0
 8005434:	f1b8 0f00 	cmp.w	r8, #0
 8005438:	bfb9      	ittee	lt
 800543a:	eba9 0508 	sublt.w	r5, r9, r8
 800543e:	2300      	movlt	r3, #0
 8005440:	464d      	movge	r5, r9
 8005442:	4643      	movge	r3, r8
 8005444:	e781      	b.n	800534a <_dtoa_r+0x70a>
 8005446:	9e08      	ldr	r6, [sp, #32]
 8005448:	464d      	mov	r5, r9
 800544a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800544c:	e786      	b.n	800535c <_dtoa_r+0x71c>
 800544e:	9a08      	ldr	r2, [sp, #32]
 8005450:	e7ad      	b.n	80053ae <_dtoa_r+0x76e>
 8005452:	2300      	movs	r3, #0
 8005454:	e7d6      	b.n	8005404 <_dtoa_r+0x7c4>
 8005456:	9b02      	ldr	r3, [sp, #8]
 8005458:	e7d4      	b.n	8005404 <_dtoa_r+0x7c4>
 800545a:	2300      	movs	r3, #0
 800545c:	9308      	str	r3, [sp, #32]
 800545e:	6933      	ldr	r3, [r6, #16]
 8005460:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005464:	6918      	ldr	r0, [r3, #16]
 8005466:	f000 fc34 	bl	8005cd2 <__hi0bits>
 800546a:	f1c0 0020 	rsb	r0, r0, #32
 800546e:	9b07      	ldr	r3, [sp, #28]
 8005470:	4418      	add	r0, r3
 8005472:	f010 001f 	ands.w	r0, r0, #31
 8005476:	d047      	beq.n	8005508 <_dtoa_r+0x8c8>
 8005478:	f1c0 0320 	rsb	r3, r0, #32
 800547c:	2b04      	cmp	r3, #4
 800547e:	dd3b      	ble.n	80054f8 <_dtoa_r+0x8b8>
 8005480:	9b07      	ldr	r3, [sp, #28]
 8005482:	f1c0 001c 	rsb	r0, r0, #28
 8005486:	4481      	add	r9, r0
 8005488:	4405      	add	r5, r0
 800548a:	4403      	add	r3, r0
 800548c:	9307      	str	r3, [sp, #28]
 800548e:	f1b9 0f00 	cmp.w	r9, #0
 8005492:	dd05      	ble.n	80054a0 <_dtoa_r+0x860>
 8005494:	4659      	mov	r1, fp
 8005496:	464a      	mov	r2, r9
 8005498:	4620      	mov	r0, r4
 800549a:	f000 fd55 	bl	8005f48 <__lshift>
 800549e:	4683      	mov	fp, r0
 80054a0:	9b07      	ldr	r3, [sp, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	dd05      	ble.n	80054b2 <_dtoa_r+0x872>
 80054a6:	4631      	mov	r1, r6
 80054a8:	461a      	mov	r2, r3
 80054aa:	4620      	mov	r0, r4
 80054ac:	f000 fd4c 	bl	8005f48 <__lshift>
 80054b0:	4606      	mov	r6, r0
 80054b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054b4:	b353      	cbz	r3, 800550c <_dtoa_r+0x8cc>
 80054b6:	4631      	mov	r1, r6
 80054b8:	4658      	mov	r0, fp
 80054ba:	f000 fd99 	bl	8005ff0 <__mcmp>
 80054be:	2800      	cmp	r0, #0
 80054c0:	da24      	bge.n	800550c <_dtoa_r+0x8cc>
 80054c2:	2300      	movs	r3, #0
 80054c4:	4659      	mov	r1, fp
 80054c6:	220a      	movs	r2, #10
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 fbc7 	bl	8005c5c <__multadd>
 80054ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054d4:	4683      	mov	fp, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8144 	beq.w	8005764 <_dtoa_r+0xb24>
 80054dc:	2300      	movs	r3, #0
 80054de:	4639      	mov	r1, r7
 80054e0:	220a      	movs	r2, #10
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fbba 	bl	8005c5c <__multadd>
 80054e8:	9b04      	ldr	r3, [sp, #16]
 80054ea:	4607      	mov	r7, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dc4d      	bgt.n	800558c <_dtoa_r+0x94c>
 80054f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	dd4a      	ble.n	800558c <_dtoa_r+0x94c>
 80054f6:	e011      	b.n	800551c <_dtoa_r+0x8dc>
 80054f8:	d0c9      	beq.n	800548e <_dtoa_r+0x84e>
 80054fa:	9a07      	ldr	r2, [sp, #28]
 80054fc:	331c      	adds	r3, #28
 80054fe:	441a      	add	r2, r3
 8005500:	4499      	add	r9, r3
 8005502:	441d      	add	r5, r3
 8005504:	4613      	mov	r3, r2
 8005506:	e7c1      	b.n	800548c <_dtoa_r+0x84c>
 8005508:	4603      	mov	r3, r0
 800550a:	e7f6      	b.n	80054fa <_dtoa_r+0x8ba>
 800550c:	f1b8 0f00 	cmp.w	r8, #0
 8005510:	dc36      	bgt.n	8005580 <_dtoa_r+0x940>
 8005512:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005514:	2b02      	cmp	r3, #2
 8005516:	dd33      	ble.n	8005580 <_dtoa_r+0x940>
 8005518:	f8cd 8010 	str.w	r8, [sp, #16]
 800551c:	9b04      	ldr	r3, [sp, #16]
 800551e:	b963      	cbnz	r3, 800553a <_dtoa_r+0x8fa>
 8005520:	4631      	mov	r1, r6
 8005522:	2205      	movs	r2, #5
 8005524:	4620      	mov	r0, r4
 8005526:	f000 fb99 	bl	8005c5c <__multadd>
 800552a:	4601      	mov	r1, r0
 800552c:	4606      	mov	r6, r0
 800552e:	4658      	mov	r0, fp
 8005530:	f000 fd5e 	bl	8005ff0 <__mcmp>
 8005534:	2800      	cmp	r0, #0
 8005536:	f73f add3 	bgt.w	80050e0 <_dtoa_r+0x4a0>
 800553a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800553c:	9d06      	ldr	r5, [sp, #24]
 800553e:	ea6f 0a03 	mvn.w	sl, r3
 8005542:	f04f 0900 	mov.w	r9, #0
 8005546:	4631      	mov	r1, r6
 8005548:	4620      	mov	r0, r4
 800554a:	f000 fb70 	bl	8005c2e <_Bfree>
 800554e:	2f00      	cmp	r7, #0
 8005550:	f43f aebd 	beq.w	80052ce <_dtoa_r+0x68e>
 8005554:	f1b9 0f00 	cmp.w	r9, #0
 8005558:	d005      	beq.n	8005566 <_dtoa_r+0x926>
 800555a:	45b9      	cmp	r9, r7
 800555c:	d003      	beq.n	8005566 <_dtoa_r+0x926>
 800555e:	4649      	mov	r1, r9
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fb64 	bl	8005c2e <_Bfree>
 8005566:	4639      	mov	r1, r7
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fb60 	bl	8005c2e <_Bfree>
 800556e:	e6ae      	b.n	80052ce <_dtoa_r+0x68e>
 8005570:	2600      	movs	r6, #0
 8005572:	4637      	mov	r7, r6
 8005574:	e7e1      	b.n	800553a <_dtoa_r+0x8fa>
 8005576:	46ba      	mov	sl, r7
 8005578:	4637      	mov	r7, r6
 800557a:	e5b1      	b.n	80050e0 <_dtoa_r+0x4a0>
 800557c:	40240000 	.word	0x40240000
 8005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005582:	f8cd 8010 	str.w	r8, [sp, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 80f3 	beq.w	8005772 <_dtoa_r+0xb32>
 800558c:	2d00      	cmp	r5, #0
 800558e:	dd05      	ble.n	800559c <_dtoa_r+0x95c>
 8005590:	4639      	mov	r1, r7
 8005592:	462a      	mov	r2, r5
 8005594:	4620      	mov	r0, r4
 8005596:	f000 fcd7 	bl	8005f48 <__lshift>
 800559a:	4607      	mov	r7, r0
 800559c:	9b08      	ldr	r3, [sp, #32]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04c      	beq.n	800563c <_dtoa_r+0x9fc>
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 fb0e 	bl	8005bc6 <_Balloc>
 80055aa:	4605      	mov	r5, r0
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	f107 010c 	add.w	r1, r7, #12
 80055b2:	3202      	adds	r2, #2
 80055b4:	0092      	lsls	r2, r2, #2
 80055b6:	300c      	adds	r0, #12
 80055b8:	f000 faf8 	bl	8005bac <memcpy>
 80055bc:	2201      	movs	r2, #1
 80055be:	4629      	mov	r1, r5
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fcc1 	bl	8005f48 <__lshift>
 80055c6:	46b9      	mov	r9, r7
 80055c8:	4607      	mov	r7, r0
 80055ca:	9b06      	ldr	r3, [sp, #24]
 80055cc:	9307      	str	r3, [sp, #28]
 80055ce:	9b02      	ldr	r3, [sp, #8]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	9308      	str	r3, [sp, #32]
 80055d6:	4631      	mov	r1, r6
 80055d8:	4658      	mov	r0, fp
 80055da:	f7ff faa1 	bl	8004b20 <quorem>
 80055de:	4649      	mov	r1, r9
 80055e0:	4605      	mov	r5, r0
 80055e2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055e6:	4658      	mov	r0, fp
 80055e8:	f000 fd02 	bl	8005ff0 <__mcmp>
 80055ec:	463a      	mov	r2, r7
 80055ee:	9002      	str	r0, [sp, #8]
 80055f0:	4631      	mov	r1, r6
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 fd16 	bl	8006024 <__mdiff>
 80055f8:	68c3      	ldr	r3, [r0, #12]
 80055fa:	4602      	mov	r2, r0
 80055fc:	bb03      	cbnz	r3, 8005640 <_dtoa_r+0xa00>
 80055fe:	4601      	mov	r1, r0
 8005600:	9009      	str	r0, [sp, #36]	; 0x24
 8005602:	4658      	mov	r0, fp
 8005604:	f000 fcf4 	bl	8005ff0 <__mcmp>
 8005608:	4603      	mov	r3, r0
 800560a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800560c:	4611      	mov	r1, r2
 800560e:	4620      	mov	r0, r4
 8005610:	9309      	str	r3, [sp, #36]	; 0x24
 8005612:	f000 fb0c 	bl	8005c2e <_Bfree>
 8005616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005618:	b9a3      	cbnz	r3, 8005644 <_dtoa_r+0xa04>
 800561a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800561c:	b992      	cbnz	r2, 8005644 <_dtoa_r+0xa04>
 800561e:	9a08      	ldr	r2, [sp, #32]
 8005620:	b982      	cbnz	r2, 8005644 <_dtoa_r+0xa04>
 8005622:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005626:	d029      	beq.n	800567c <_dtoa_r+0xa3c>
 8005628:	9b02      	ldr	r3, [sp, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	dd01      	ble.n	8005632 <_dtoa_r+0x9f2>
 800562e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005632:	9b07      	ldr	r3, [sp, #28]
 8005634:	1c5d      	adds	r5, r3, #1
 8005636:	f883 8000 	strb.w	r8, [r3]
 800563a:	e784      	b.n	8005546 <_dtoa_r+0x906>
 800563c:	4638      	mov	r0, r7
 800563e:	e7c2      	b.n	80055c6 <_dtoa_r+0x986>
 8005640:	2301      	movs	r3, #1
 8005642:	e7e3      	b.n	800560c <_dtoa_r+0x9cc>
 8005644:	9a02      	ldr	r2, [sp, #8]
 8005646:	2a00      	cmp	r2, #0
 8005648:	db04      	blt.n	8005654 <_dtoa_r+0xa14>
 800564a:	d123      	bne.n	8005694 <_dtoa_r+0xa54>
 800564c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800564e:	bb0a      	cbnz	r2, 8005694 <_dtoa_r+0xa54>
 8005650:	9a08      	ldr	r2, [sp, #32]
 8005652:	b9fa      	cbnz	r2, 8005694 <_dtoa_r+0xa54>
 8005654:	2b00      	cmp	r3, #0
 8005656:	ddec      	ble.n	8005632 <_dtoa_r+0x9f2>
 8005658:	4659      	mov	r1, fp
 800565a:	2201      	movs	r2, #1
 800565c:	4620      	mov	r0, r4
 800565e:	f000 fc73 	bl	8005f48 <__lshift>
 8005662:	4631      	mov	r1, r6
 8005664:	4683      	mov	fp, r0
 8005666:	f000 fcc3 	bl	8005ff0 <__mcmp>
 800566a:	2800      	cmp	r0, #0
 800566c:	dc03      	bgt.n	8005676 <_dtoa_r+0xa36>
 800566e:	d1e0      	bne.n	8005632 <_dtoa_r+0x9f2>
 8005670:	f018 0f01 	tst.w	r8, #1
 8005674:	d0dd      	beq.n	8005632 <_dtoa_r+0x9f2>
 8005676:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800567a:	d1d8      	bne.n	800562e <_dtoa_r+0x9ee>
 800567c:	9b07      	ldr	r3, [sp, #28]
 800567e:	9a07      	ldr	r2, [sp, #28]
 8005680:	1c5d      	adds	r5, r3, #1
 8005682:	2339      	movs	r3, #57	; 0x39
 8005684:	7013      	strb	r3, [r2, #0]
 8005686:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800568a:	1e6a      	subs	r2, r5, #1
 800568c:	2b39      	cmp	r3, #57	; 0x39
 800568e:	d04d      	beq.n	800572c <_dtoa_r+0xaec>
 8005690:	3301      	adds	r3, #1
 8005692:	e052      	b.n	800573a <_dtoa_r+0xafa>
 8005694:	9a07      	ldr	r2, [sp, #28]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f102 0501 	add.w	r5, r2, #1
 800569c:	dd06      	ble.n	80056ac <_dtoa_r+0xa6c>
 800569e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056a2:	d0eb      	beq.n	800567c <_dtoa_r+0xa3c>
 80056a4:	f108 0801 	add.w	r8, r8, #1
 80056a8:	9b07      	ldr	r3, [sp, #28]
 80056aa:	e7c4      	b.n	8005636 <_dtoa_r+0x9f6>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	9a04      	ldr	r2, [sp, #16]
 80056b0:	1aeb      	subs	r3, r5, r3
 80056b2:	4293      	cmp	r3, r2
 80056b4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80056b8:	d021      	beq.n	80056fe <_dtoa_r+0xabe>
 80056ba:	4659      	mov	r1, fp
 80056bc:	2300      	movs	r3, #0
 80056be:	220a      	movs	r2, #10
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 facb 	bl	8005c5c <__multadd>
 80056c6:	45b9      	cmp	r9, r7
 80056c8:	4683      	mov	fp, r0
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	f04f 020a 	mov.w	r2, #10
 80056d2:	4649      	mov	r1, r9
 80056d4:	4620      	mov	r0, r4
 80056d6:	d105      	bne.n	80056e4 <_dtoa_r+0xaa4>
 80056d8:	f000 fac0 	bl	8005c5c <__multadd>
 80056dc:	4681      	mov	r9, r0
 80056de:	4607      	mov	r7, r0
 80056e0:	9507      	str	r5, [sp, #28]
 80056e2:	e778      	b.n	80055d6 <_dtoa_r+0x996>
 80056e4:	f000 faba 	bl	8005c5c <__multadd>
 80056e8:	4639      	mov	r1, r7
 80056ea:	4681      	mov	r9, r0
 80056ec:	2300      	movs	r3, #0
 80056ee:	220a      	movs	r2, #10
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fab3 	bl	8005c5c <__multadd>
 80056f6:	4607      	mov	r7, r0
 80056f8:	e7f2      	b.n	80056e0 <_dtoa_r+0xaa0>
 80056fa:	f04f 0900 	mov.w	r9, #0
 80056fe:	4659      	mov	r1, fp
 8005700:	2201      	movs	r2, #1
 8005702:	4620      	mov	r0, r4
 8005704:	f000 fc20 	bl	8005f48 <__lshift>
 8005708:	4631      	mov	r1, r6
 800570a:	4683      	mov	fp, r0
 800570c:	f000 fc70 	bl	8005ff0 <__mcmp>
 8005710:	2800      	cmp	r0, #0
 8005712:	dcb8      	bgt.n	8005686 <_dtoa_r+0xa46>
 8005714:	d102      	bne.n	800571c <_dtoa_r+0xadc>
 8005716:	f018 0f01 	tst.w	r8, #1
 800571a:	d1b4      	bne.n	8005686 <_dtoa_r+0xa46>
 800571c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005720:	1e6a      	subs	r2, r5, #1
 8005722:	2b30      	cmp	r3, #48	; 0x30
 8005724:	f47f af0f 	bne.w	8005546 <_dtoa_r+0x906>
 8005728:	4615      	mov	r5, r2
 800572a:	e7f7      	b.n	800571c <_dtoa_r+0xadc>
 800572c:	9b06      	ldr	r3, [sp, #24]
 800572e:	4293      	cmp	r3, r2
 8005730:	d105      	bne.n	800573e <_dtoa_r+0xafe>
 8005732:	2331      	movs	r3, #49	; 0x31
 8005734:	9a06      	ldr	r2, [sp, #24]
 8005736:	f10a 0a01 	add.w	sl, sl, #1
 800573a:	7013      	strb	r3, [r2, #0]
 800573c:	e703      	b.n	8005546 <_dtoa_r+0x906>
 800573e:	4615      	mov	r5, r2
 8005740:	e7a1      	b.n	8005686 <_dtoa_r+0xa46>
 8005742:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <_dtoa_r+0xb60>)
 8005744:	f7ff bae1 	b.w	8004d0a <_dtoa_r+0xca>
 8005748:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800574a:	2b00      	cmp	r3, #0
 800574c:	f47f aabb 	bne.w	8004cc6 <_dtoa_r+0x86>
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <_dtoa_r+0xb64>)
 8005752:	f7ff bada 	b.w	8004d0a <_dtoa_r+0xca>
 8005756:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005758:	2b01      	cmp	r3, #1
 800575a:	f77f ae3f 	ble.w	80053dc <_dtoa_r+0x79c>
 800575e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005760:	9308      	str	r3, [sp, #32]
 8005762:	e653      	b.n	800540c <_dtoa_r+0x7cc>
 8005764:	9b04      	ldr	r3, [sp, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	dc03      	bgt.n	8005772 <_dtoa_r+0xb32>
 800576a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800576c:	2b02      	cmp	r3, #2
 800576e:	f73f aed5 	bgt.w	800551c <_dtoa_r+0x8dc>
 8005772:	9d06      	ldr	r5, [sp, #24]
 8005774:	4631      	mov	r1, r6
 8005776:	4658      	mov	r0, fp
 8005778:	f7ff f9d2 	bl	8004b20 <quorem>
 800577c:	9b06      	ldr	r3, [sp, #24]
 800577e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005782:	f805 8b01 	strb.w	r8, [r5], #1
 8005786:	9a04      	ldr	r2, [sp, #16]
 8005788:	1aeb      	subs	r3, r5, r3
 800578a:	429a      	cmp	r2, r3
 800578c:	ddb5      	ble.n	80056fa <_dtoa_r+0xaba>
 800578e:	4659      	mov	r1, fp
 8005790:	2300      	movs	r3, #0
 8005792:	220a      	movs	r2, #10
 8005794:	4620      	mov	r0, r4
 8005796:	f000 fa61 	bl	8005c5c <__multadd>
 800579a:	4683      	mov	fp, r0
 800579c:	e7ea      	b.n	8005774 <_dtoa_r+0xb34>
 800579e:	bf00      	nop
 80057a0:	08006914 	.word	0x08006914
 80057a4:	08006938 	.word	0x08006938

080057a8 <__sflush_r>:
 80057a8:	898a      	ldrh	r2, [r1, #12]
 80057aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ae:	4605      	mov	r5, r0
 80057b0:	0710      	lsls	r0, r2, #28
 80057b2:	460c      	mov	r4, r1
 80057b4:	d458      	bmi.n	8005868 <__sflush_r+0xc0>
 80057b6:	684b      	ldr	r3, [r1, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	dc05      	bgt.n	80057c8 <__sflush_r+0x20>
 80057bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	dc02      	bgt.n	80057c8 <__sflush_r+0x20>
 80057c2:	2000      	movs	r0, #0
 80057c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057ca:	2e00      	cmp	r6, #0
 80057cc:	d0f9      	beq.n	80057c2 <__sflush_r+0x1a>
 80057ce:	2300      	movs	r3, #0
 80057d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057d4:	682f      	ldr	r7, [r5, #0]
 80057d6:	6a21      	ldr	r1, [r4, #32]
 80057d8:	602b      	str	r3, [r5, #0]
 80057da:	d032      	beq.n	8005842 <__sflush_r+0x9a>
 80057dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	075a      	lsls	r2, r3, #29
 80057e2:	d505      	bpl.n	80057f0 <__sflush_r+0x48>
 80057e4:	6863      	ldr	r3, [r4, #4]
 80057e6:	1ac0      	subs	r0, r0, r3
 80057e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057ea:	b10b      	cbz	r3, 80057f0 <__sflush_r+0x48>
 80057ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ee:	1ac0      	subs	r0, r0, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	4602      	mov	r2, r0
 80057f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057f6:	6a21      	ldr	r1, [r4, #32]
 80057f8:	4628      	mov	r0, r5
 80057fa:	47b0      	blx	r6
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	89a3      	ldrh	r3, [r4, #12]
 8005800:	d106      	bne.n	8005810 <__sflush_r+0x68>
 8005802:	6829      	ldr	r1, [r5, #0]
 8005804:	291d      	cmp	r1, #29
 8005806:	d848      	bhi.n	800589a <__sflush_r+0xf2>
 8005808:	4a29      	ldr	r2, [pc, #164]	; (80058b0 <__sflush_r+0x108>)
 800580a:	40ca      	lsrs	r2, r1
 800580c:	07d6      	lsls	r6, r2, #31
 800580e:	d544      	bpl.n	800589a <__sflush_r+0xf2>
 8005810:	2200      	movs	r2, #0
 8005812:	6062      	str	r2, [r4, #4]
 8005814:	6922      	ldr	r2, [r4, #16]
 8005816:	04d9      	lsls	r1, r3, #19
 8005818:	6022      	str	r2, [r4, #0]
 800581a:	d504      	bpl.n	8005826 <__sflush_r+0x7e>
 800581c:	1c42      	adds	r2, r0, #1
 800581e:	d101      	bne.n	8005824 <__sflush_r+0x7c>
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	b903      	cbnz	r3, 8005826 <__sflush_r+0x7e>
 8005824:	6560      	str	r0, [r4, #84]	; 0x54
 8005826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005828:	602f      	str	r7, [r5, #0]
 800582a:	2900      	cmp	r1, #0
 800582c:	d0c9      	beq.n	80057c2 <__sflush_r+0x1a>
 800582e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005832:	4299      	cmp	r1, r3
 8005834:	d002      	beq.n	800583c <__sflush_r+0x94>
 8005836:	4628      	mov	r0, r5
 8005838:	f000 fca2 	bl	8006180 <_free_r>
 800583c:	2000      	movs	r0, #0
 800583e:	6360      	str	r0, [r4, #52]	; 0x34
 8005840:	e7c0      	b.n	80057c4 <__sflush_r+0x1c>
 8005842:	2301      	movs	r3, #1
 8005844:	4628      	mov	r0, r5
 8005846:	47b0      	blx	r6
 8005848:	1c41      	adds	r1, r0, #1
 800584a:	d1c8      	bne.n	80057de <__sflush_r+0x36>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0c5      	beq.n	80057de <__sflush_r+0x36>
 8005852:	2b1d      	cmp	r3, #29
 8005854:	d001      	beq.n	800585a <__sflush_r+0xb2>
 8005856:	2b16      	cmp	r3, #22
 8005858:	d101      	bne.n	800585e <__sflush_r+0xb6>
 800585a:	602f      	str	r7, [r5, #0]
 800585c:	e7b1      	b.n	80057c2 <__sflush_r+0x1a>
 800585e:	89a3      	ldrh	r3, [r4, #12]
 8005860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005864:	81a3      	strh	r3, [r4, #12]
 8005866:	e7ad      	b.n	80057c4 <__sflush_r+0x1c>
 8005868:	690f      	ldr	r7, [r1, #16]
 800586a:	2f00      	cmp	r7, #0
 800586c:	d0a9      	beq.n	80057c2 <__sflush_r+0x1a>
 800586e:	0793      	lsls	r3, r2, #30
 8005870:	bf18      	it	ne
 8005872:	2300      	movne	r3, #0
 8005874:	680e      	ldr	r6, [r1, #0]
 8005876:	bf08      	it	eq
 8005878:	694b      	ldreq	r3, [r1, #20]
 800587a:	eba6 0807 	sub.w	r8, r6, r7
 800587e:	600f      	str	r7, [r1, #0]
 8005880:	608b      	str	r3, [r1, #8]
 8005882:	f1b8 0f00 	cmp.w	r8, #0
 8005886:	dd9c      	ble.n	80057c2 <__sflush_r+0x1a>
 8005888:	4643      	mov	r3, r8
 800588a:	463a      	mov	r2, r7
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	4628      	mov	r0, r5
 8005890:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005892:	47b0      	blx	r6
 8005894:	2800      	cmp	r0, #0
 8005896:	dc06      	bgt.n	80058a6 <__sflush_r+0xfe>
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800589e:	81a3      	strh	r3, [r4, #12]
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	e78e      	b.n	80057c4 <__sflush_r+0x1c>
 80058a6:	4407      	add	r7, r0
 80058a8:	eba8 0800 	sub.w	r8, r8, r0
 80058ac:	e7e9      	b.n	8005882 <__sflush_r+0xda>
 80058ae:	bf00      	nop
 80058b0:	20400001 	.word	0x20400001

080058b4 <_fflush_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	4605      	mov	r5, r0
 80058ba:	460c      	mov	r4, r1
 80058bc:	b1db      	cbz	r3, 80058f6 <_fflush_r+0x42>
 80058be:	b118      	cbz	r0, 80058c8 <_fflush_r+0x14>
 80058c0:	6983      	ldr	r3, [r0, #24]
 80058c2:	b90b      	cbnz	r3, 80058c8 <_fflush_r+0x14>
 80058c4:	f000 f860 	bl	8005988 <__sinit>
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <_fflush_r+0x48>)
 80058ca:	429c      	cmp	r4, r3
 80058cc:	d109      	bne.n	80058e2 <_fflush_r+0x2e>
 80058ce:	686c      	ldr	r4, [r5, #4]
 80058d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058d4:	b17b      	cbz	r3, 80058f6 <_fflush_r+0x42>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4628      	mov	r0, r5
 80058da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058de:	f7ff bf63 	b.w	80057a8 <__sflush_r>
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <_fflush_r+0x4c>)
 80058e4:	429c      	cmp	r4, r3
 80058e6:	d101      	bne.n	80058ec <_fflush_r+0x38>
 80058e8:	68ac      	ldr	r4, [r5, #8]
 80058ea:	e7f1      	b.n	80058d0 <_fflush_r+0x1c>
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <_fflush_r+0x50>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	bf08      	it	eq
 80058f2:	68ec      	ldreq	r4, [r5, #12]
 80058f4:	e7ec      	b.n	80058d0 <_fflush_r+0x1c>
 80058f6:	2000      	movs	r0, #0
 80058f8:	bd38      	pop	{r3, r4, r5, pc}
 80058fa:	bf00      	nop
 80058fc:	08006968 	.word	0x08006968
 8005900:	08006988 	.word	0x08006988
 8005904:	08006948 	.word	0x08006948

08005908 <std>:
 8005908:	2300      	movs	r3, #0
 800590a:	b510      	push	{r4, lr}
 800590c:	4604      	mov	r4, r0
 800590e:	e9c0 3300 	strd	r3, r3, [r0]
 8005912:	6083      	str	r3, [r0, #8]
 8005914:	8181      	strh	r1, [r0, #12]
 8005916:	6643      	str	r3, [r0, #100]	; 0x64
 8005918:	81c2      	strh	r2, [r0, #14]
 800591a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800591e:	6183      	str	r3, [r0, #24]
 8005920:	4619      	mov	r1, r3
 8005922:	2208      	movs	r2, #8
 8005924:	305c      	adds	r0, #92	; 0x5c
 8005926:	f7fe fa41 	bl	8003dac <memset>
 800592a:	4b05      	ldr	r3, [pc, #20]	; (8005940 <std+0x38>)
 800592c:	6224      	str	r4, [r4, #32]
 800592e:	6263      	str	r3, [r4, #36]	; 0x24
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <std+0x3c>)
 8005932:	62a3      	str	r3, [r4, #40]	; 0x28
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <std+0x40>)
 8005936:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <std+0x44>)
 800593a:	6323      	str	r3, [r4, #48]	; 0x30
 800593c:	bd10      	pop	{r4, pc}
 800593e:	bf00      	nop
 8005940:	08006495 	.word	0x08006495
 8005944:	080064b7 	.word	0x080064b7
 8005948:	080064ef 	.word	0x080064ef
 800594c:	08006513 	.word	0x08006513

08005950 <_cleanup_r>:
 8005950:	4901      	ldr	r1, [pc, #4]	; (8005958 <_cleanup_r+0x8>)
 8005952:	f000 b885 	b.w	8005a60 <_fwalk_reent>
 8005956:	bf00      	nop
 8005958:	080058b5 	.word	0x080058b5

0800595c <__sfmoreglue>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	2568      	movs	r5, #104	; 0x68
 8005960:	1e4a      	subs	r2, r1, #1
 8005962:	4355      	muls	r5, r2
 8005964:	460e      	mov	r6, r1
 8005966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800596a:	f7fe fa35 	bl	8003dd8 <_malloc_r>
 800596e:	4604      	mov	r4, r0
 8005970:	b140      	cbz	r0, 8005984 <__sfmoreglue+0x28>
 8005972:	2100      	movs	r1, #0
 8005974:	e9c0 1600 	strd	r1, r6, [r0]
 8005978:	300c      	adds	r0, #12
 800597a:	60a0      	str	r0, [r4, #8]
 800597c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005980:	f7fe fa14 	bl	8003dac <memset>
 8005984:	4620      	mov	r0, r4
 8005986:	bd70      	pop	{r4, r5, r6, pc}

08005988 <__sinit>:
 8005988:	6983      	ldr	r3, [r0, #24]
 800598a:	b510      	push	{r4, lr}
 800598c:	4604      	mov	r4, r0
 800598e:	bb33      	cbnz	r3, 80059de <__sinit+0x56>
 8005990:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005994:	6503      	str	r3, [r0, #80]	; 0x50
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <__sinit+0x58>)
 8005998:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <__sinit+0x5c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6282      	str	r2, [r0, #40]	; 0x28
 800599e:	4298      	cmp	r0, r3
 80059a0:	bf04      	itt	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	6183      	streq	r3, [r0, #24]
 80059a6:	f000 f81f 	bl	80059e8 <__sfp>
 80059aa:	6060      	str	r0, [r4, #4]
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 f81b 	bl	80059e8 <__sfp>
 80059b2:	60a0      	str	r0, [r4, #8]
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 f817 	bl	80059e8 <__sfp>
 80059ba:	2200      	movs	r2, #0
 80059bc:	60e0      	str	r0, [r4, #12]
 80059be:	2104      	movs	r1, #4
 80059c0:	6860      	ldr	r0, [r4, #4]
 80059c2:	f7ff ffa1 	bl	8005908 <std>
 80059c6:	2201      	movs	r2, #1
 80059c8:	2109      	movs	r1, #9
 80059ca:	68a0      	ldr	r0, [r4, #8]
 80059cc:	f7ff ff9c 	bl	8005908 <std>
 80059d0:	2202      	movs	r2, #2
 80059d2:	2112      	movs	r1, #18
 80059d4:	68e0      	ldr	r0, [r4, #12]
 80059d6:	f7ff ff97 	bl	8005908 <std>
 80059da:	2301      	movs	r3, #1
 80059dc:	61a3      	str	r3, [r4, #24]
 80059de:	bd10      	pop	{r4, pc}
 80059e0:	08006900 	.word	0x08006900
 80059e4:	08005951 	.word	0x08005951

080059e8 <__sfp>:
 80059e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ea:	4b1b      	ldr	r3, [pc, #108]	; (8005a58 <__sfp+0x70>)
 80059ec:	4607      	mov	r7, r0
 80059ee:	681e      	ldr	r6, [r3, #0]
 80059f0:	69b3      	ldr	r3, [r6, #24]
 80059f2:	b913      	cbnz	r3, 80059fa <__sfp+0x12>
 80059f4:	4630      	mov	r0, r6
 80059f6:	f7ff ffc7 	bl	8005988 <__sinit>
 80059fa:	3648      	adds	r6, #72	; 0x48
 80059fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	d503      	bpl.n	8005a0c <__sfp+0x24>
 8005a04:	6833      	ldr	r3, [r6, #0]
 8005a06:	b133      	cbz	r3, 8005a16 <__sfp+0x2e>
 8005a08:	6836      	ldr	r6, [r6, #0]
 8005a0a:	e7f7      	b.n	80059fc <__sfp+0x14>
 8005a0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a10:	b16d      	cbz	r5, 8005a2e <__sfp+0x46>
 8005a12:	3468      	adds	r4, #104	; 0x68
 8005a14:	e7f4      	b.n	8005a00 <__sfp+0x18>
 8005a16:	2104      	movs	r1, #4
 8005a18:	4638      	mov	r0, r7
 8005a1a:	f7ff ff9f 	bl	800595c <__sfmoreglue>
 8005a1e:	6030      	str	r0, [r6, #0]
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d1f1      	bne.n	8005a08 <__sfp+0x20>
 8005a24:	230c      	movs	r3, #12
 8005a26:	4604      	mov	r4, r0
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <__sfp+0x74>)
 8005a30:	6665      	str	r5, [r4, #100]	; 0x64
 8005a32:	e9c4 5500 	strd	r5, r5, [r4]
 8005a36:	60a5      	str	r5, [r4, #8]
 8005a38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005a3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005a40:	2208      	movs	r2, #8
 8005a42:	4629      	mov	r1, r5
 8005a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a48:	f7fe f9b0 	bl	8003dac <memset>
 8005a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a54:	e7e9      	b.n	8005a2a <__sfp+0x42>
 8005a56:	bf00      	nop
 8005a58:	08006900 	.word	0x08006900
 8005a5c:	ffff0001 	.word	0xffff0001

08005a60 <_fwalk_reent>:
 8005a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a64:	4680      	mov	r8, r0
 8005a66:	4689      	mov	r9, r1
 8005a68:	2600      	movs	r6, #0
 8005a6a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a6e:	b914      	cbnz	r4, 8005a76 <_fwalk_reent+0x16>
 8005a70:	4630      	mov	r0, r6
 8005a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005a7a:	3f01      	subs	r7, #1
 8005a7c:	d501      	bpl.n	8005a82 <_fwalk_reent+0x22>
 8005a7e:	6824      	ldr	r4, [r4, #0]
 8005a80:	e7f5      	b.n	8005a6e <_fwalk_reent+0xe>
 8005a82:	89ab      	ldrh	r3, [r5, #12]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d907      	bls.n	8005a98 <_fwalk_reent+0x38>
 8005a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	d003      	beq.n	8005a98 <_fwalk_reent+0x38>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4640      	mov	r0, r8
 8005a94:	47c8      	blx	r9
 8005a96:	4306      	orrs	r6, r0
 8005a98:	3568      	adds	r5, #104	; 0x68
 8005a9a:	e7ee      	b.n	8005a7a <_fwalk_reent+0x1a>

08005a9c <_localeconv_r>:
 8005a9c:	4b04      	ldr	r3, [pc, #16]	; (8005ab0 <_localeconv_r+0x14>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6a18      	ldr	r0, [r3, #32]
 8005aa2:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <_localeconv_r+0x18>)
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	bf08      	it	eq
 8005aa8:	4618      	moveq	r0, r3
 8005aaa:	30f0      	adds	r0, #240	; 0xf0
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	2000000c 	.word	0x2000000c
 8005ab4:	20000070 	.word	0x20000070

08005ab8 <__swhatbuf_r>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	460e      	mov	r6, r1
 8005abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ac0:	b096      	sub	sp, #88	; 0x58
 8005ac2:	2900      	cmp	r1, #0
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	da07      	bge.n	8005ada <__swhatbuf_r+0x22>
 8005aca:	2300      	movs	r3, #0
 8005acc:	602b      	str	r3, [r5, #0]
 8005ace:	89b3      	ldrh	r3, [r6, #12]
 8005ad0:	061a      	lsls	r2, r3, #24
 8005ad2:	d410      	bmi.n	8005af6 <__swhatbuf_r+0x3e>
 8005ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ad8:	e00e      	b.n	8005af8 <__swhatbuf_r+0x40>
 8005ada:	466a      	mov	r2, sp
 8005adc:	f000 fd40 	bl	8006560 <_fstat_r>
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	dbf2      	blt.n	8005aca <__swhatbuf_r+0x12>
 8005ae4:	9a01      	ldr	r2, [sp, #4]
 8005ae6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005aea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005aee:	425a      	negs	r2, r3
 8005af0:	415a      	adcs	r2, r3
 8005af2:	602a      	str	r2, [r5, #0]
 8005af4:	e7ee      	b.n	8005ad4 <__swhatbuf_r+0x1c>
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	2000      	movs	r0, #0
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	b016      	add	sp, #88	; 0x58
 8005afe:	bd70      	pop	{r4, r5, r6, pc}

08005b00 <__smakebuf_r>:
 8005b00:	898b      	ldrh	r3, [r1, #12]
 8005b02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b04:	079d      	lsls	r5, r3, #30
 8005b06:	4606      	mov	r6, r0
 8005b08:	460c      	mov	r4, r1
 8005b0a:	d507      	bpl.n	8005b1c <__smakebuf_r+0x1c>
 8005b0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	6123      	str	r3, [r4, #16]
 8005b14:	2301      	movs	r3, #1
 8005b16:	6163      	str	r3, [r4, #20]
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	ab01      	add	r3, sp, #4
 8005b1e:	466a      	mov	r2, sp
 8005b20:	f7ff ffca 	bl	8005ab8 <__swhatbuf_r>
 8005b24:	9900      	ldr	r1, [sp, #0]
 8005b26:	4605      	mov	r5, r0
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f7fe f955 	bl	8003dd8 <_malloc_r>
 8005b2e:	b948      	cbnz	r0, 8005b44 <__smakebuf_r+0x44>
 8005b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b34:	059a      	lsls	r2, r3, #22
 8005b36:	d4ef      	bmi.n	8005b18 <__smakebuf_r+0x18>
 8005b38:	f023 0303 	bic.w	r3, r3, #3
 8005b3c:	f043 0302 	orr.w	r3, r3, #2
 8005b40:	81a3      	strh	r3, [r4, #12]
 8005b42:	e7e3      	b.n	8005b0c <__smakebuf_r+0xc>
 8005b44:	4b0d      	ldr	r3, [pc, #52]	; (8005b7c <__smakebuf_r+0x7c>)
 8005b46:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	6020      	str	r0, [r4, #0]
 8005b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	9b00      	ldr	r3, [sp, #0]
 8005b54:	6120      	str	r0, [r4, #16]
 8005b56:	6163      	str	r3, [r4, #20]
 8005b58:	9b01      	ldr	r3, [sp, #4]
 8005b5a:	b15b      	cbz	r3, 8005b74 <__smakebuf_r+0x74>
 8005b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 fd0f 	bl	8006584 <_isatty_r>
 8005b66:	b128      	cbz	r0, 8005b74 <__smakebuf_r+0x74>
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	81a3      	strh	r3, [r4, #12]
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	431d      	orrs	r5, r3
 8005b78:	81a5      	strh	r5, [r4, #12]
 8005b7a:	e7cd      	b.n	8005b18 <__smakebuf_r+0x18>
 8005b7c:	08005951 	.word	0x08005951

08005b80 <malloc>:
 8005b80:	4b02      	ldr	r3, [pc, #8]	; (8005b8c <malloc+0xc>)
 8005b82:	4601      	mov	r1, r0
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	f7fe b927 	b.w	8003dd8 <_malloc_r>
 8005b8a:	bf00      	nop
 8005b8c:	2000000c 	.word	0x2000000c

08005b90 <memchr>:
 8005b90:	b510      	push	{r4, lr}
 8005b92:	b2c9      	uxtb	r1, r1
 8005b94:	4402      	add	r2, r0
 8005b96:	4290      	cmp	r0, r2
 8005b98:	4603      	mov	r3, r0
 8005b9a:	d101      	bne.n	8005ba0 <memchr+0x10>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	e003      	b.n	8005ba8 <memchr+0x18>
 8005ba0:	781c      	ldrb	r4, [r3, #0]
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	428c      	cmp	r4, r1
 8005ba6:	d1f6      	bne.n	8005b96 <memchr+0x6>
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd10      	pop	{r4, pc}

08005bac <memcpy>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	1e43      	subs	r3, r0, #1
 8005bb0:	440a      	add	r2, r1
 8005bb2:	4291      	cmp	r1, r2
 8005bb4:	d100      	bne.n	8005bb8 <memcpy+0xc>
 8005bb6:	bd10      	pop	{r4, pc}
 8005bb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc0:	e7f7      	b.n	8005bb2 <memcpy+0x6>

08005bc2 <__malloc_lock>:
 8005bc2:	4770      	bx	lr

08005bc4 <__malloc_unlock>:
 8005bc4:	4770      	bx	lr

08005bc6 <_Balloc>:
 8005bc6:	b570      	push	{r4, r5, r6, lr}
 8005bc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460e      	mov	r6, r1
 8005bce:	b93d      	cbnz	r5, 8005be0 <_Balloc+0x1a>
 8005bd0:	2010      	movs	r0, #16
 8005bd2:	f7ff ffd5 	bl	8005b80 <malloc>
 8005bd6:	6260      	str	r0, [r4, #36]	; 0x24
 8005bd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bdc:	6005      	str	r5, [r0, #0]
 8005bde:	60c5      	str	r5, [r0, #12]
 8005be0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005be2:	68eb      	ldr	r3, [r5, #12]
 8005be4:	b183      	cbz	r3, 8005c08 <_Balloc+0x42>
 8005be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005bee:	b9b8      	cbnz	r0, 8005c20 <_Balloc+0x5a>
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	fa01 f506 	lsl.w	r5, r1, r6
 8005bf6:	1d6a      	adds	r2, r5, #5
 8005bf8:	0092      	lsls	r2, r2, #2
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	f7fe f8de 	bl	8003dbc <_calloc_r>
 8005c00:	b160      	cbz	r0, 8005c1c <_Balloc+0x56>
 8005c02:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005c06:	e00e      	b.n	8005c26 <_Balloc+0x60>
 8005c08:	2221      	movs	r2, #33	; 0x21
 8005c0a:	2104      	movs	r1, #4
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	f7fe f8d5 	bl	8003dbc <_calloc_r>
 8005c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c14:	60e8      	str	r0, [r5, #12]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e4      	bne.n	8005be6 <_Balloc+0x20>
 8005c1c:	2000      	movs	r0, #0
 8005c1e:	bd70      	pop	{r4, r5, r6, pc}
 8005c20:	6802      	ldr	r2, [r0, #0]
 8005c22:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005c26:	2300      	movs	r3, #0
 8005c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c2c:	e7f7      	b.n	8005c1e <_Balloc+0x58>

08005c2e <_Bfree>:
 8005c2e:	b570      	push	{r4, r5, r6, lr}
 8005c30:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005c32:	4606      	mov	r6, r0
 8005c34:	460d      	mov	r5, r1
 8005c36:	b93c      	cbnz	r4, 8005c48 <_Bfree+0x1a>
 8005c38:	2010      	movs	r0, #16
 8005c3a:	f7ff ffa1 	bl	8005b80 <malloc>
 8005c3e:	6270      	str	r0, [r6, #36]	; 0x24
 8005c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c44:	6004      	str	r4, [r0, #0]
 8005c46:	60c4      	str	r4, [r0, #12]
 8005c48:	b13d      	cbz	r5, 8005c5a <_Bfree+0x2c>
 8005c4a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c4c:	686a      	ldr	r2, [r5, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c54:	6029      	str	r1, [r5, #0]
 8005c56:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}

08005c5c <__multadd>:
 8005c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c60:	461f      	mov	r7, r3
 8005c62:	4606      	mov	r6, r0
 8005c64:	460c      	mov	r4, r1
 8005c66:	2300      	movs	r3, #0
 8005c68:	690d      	ldr	r5, [r1, #16]
 8005c6a:	f101 0c14 	add.w	ip, r1, #20
 8005c6e:	f8dc 0000 	ldr.w	r0, [ip]
 8005c72:	3301      	adds	r3, #1
 8005c74:	b281      	uxth	r1, r0
 8005c76:	fb02 7101 	mla	r1, r2, r1, r7
 8005c7a:	0c00      	lsrs	r0, r0, #16
 8005c7c:	0c0f      	lsrs	r7, r1, #16
 8005c7e:	fb02 7000 	mla	r0, r2, r0, r7
 8005c82:	b289      	uxth	r1, r1
 8005c84:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c88:	429d      	cmp	r5, r3
 8005c8a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c8e:	f84c 1b04 	str.w	r1, [ip], #4
 8005c92:	dcec      	bgt.n	8005c6e <__multadd+0x12>
 8005c94:	b1d7      	cbz	r7, 8005ccc <__multadd+0x70>
 8005c96:	68a3      	ldr	r3, [r4, #8]
 8005c98:	42ab      	cmp	r3, r5
 8005c9a:	dc12      	bgt.n	8005cc2 <__multadd+0x66>
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	3101      	adds	r1, #1
 8005ca2:	f7ff ff90 	bl	8005bc6 <_Balloc>
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	6922      	ldr	r2, [r4, #16]
 8005caa:	f104 010c 	add.w	r1, r4, #12
 8005cae:	3202      	adds	r2, #2
 8005cb0:	0092      	lsls	r2, r2, #2
 8005cb2:	300c      	adds	r0, #12
 8005cb4:	f7ff ff7a 	bl	8005bac <memcpy>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4630      	mov	r0, r6
 8005cbc:	f7ff ffb7 	bl	8005c2e <_Bfree>
 8005cc0:	4644      	mov	r4, r8
 8005cc2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cc6:	3501      	adds	r5, #1
 8005cc8:	615f      	str	r7, [r3, #20]
 8005cca:	6125      	str	r5, [r4, #16]
 8005ccc:	4620      	mov	r0, r4
 8005cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005cd2 <__hi0bits>:
 8005cd2:	0c02      	lsrs	r2, r0, #16
 8005cd4:	0412      	lsls	r2, r2, #16
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	b9b2      	cbnz	r2, 8005d08 <__hi0bits+0x36>
 8005cda:	0403      	lsls	r3, r0, #16
 8005cdc:	2010      	movs	r0, #16
 8005cde:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ce2:	bf04      	itt	eq
 8005ce4:	021b      	lsleq	r3, r3, #8
 8005ce6:	3008      	addeq	r0, #8
 8005ce8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005cec:	bf04      	itt	eq
 8005cee:	011b      	lsleq	r3, r3, #4
 8005cf0:	3004      	addeq	r0, #4
 8005cf2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005cf6:	bf04      	itt	eq
 8005cf8:	009b      	lsleq	r3, r3, #2
 8005cfa:	3002      	addeq	r0, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db06      	blt.n	8005d0e <__hi0bits+0x3c>
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	d503      	bpl.n	8005d0c <__hi0bits+0x3a>
 8005d04:	3001      	adds	r0, #1
 8005d06:	4770      	bx	lr
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e7e8      	b.n	8005cde <__hi0bits+0xc>
 8005d0c:	2020      	movs	r0, #32
 8005d0e:	4770      	bx	lr

08005d10 <__lo0bits>:
 8005d10:	6803      	ldr	r3, [r0, #0]
 8005d12:	4601      	mov	r1, r0
 8005d14:	f013 0207 	ands.w	r2, r3, #7
 8005d18:	d00b      	beq.n	8005d32 <__lo0bits+0x22>
 8005d1a:	07da      	lsls	r2, r3, #31
 8005d1c:	d423      	bmi.n	8005d66 <__lo0bits+0x56>
 8005d1e:	0798      	lsls	r0, r3, #30
 8005d20:	bf49      	itett	mi
 8005d22:	085b      	lsrmi	r3, r3, #1
 8005d24:	089b      	lsrpl	r3, r3, #2
 8005d26:	2001      	movmi	r0, #1
 8005d28:	600b      	strmi	r3, [r1, #0]
 8005d2a:	bf5c      	itt	pl
 8005d2c:	600b      	strpl	r3, [r1, #0]
 8005d2e:	2002      	movpl	r0, #2
 8005d30:	4770      	bx	lr
 8005d32:	b298      	uxth	r0, r3
 8005d34:	b9a8      	cbnz	r0, 8005d62 <__lo0bits+0x52>
 8005d36:	2010      	movs	r0, #16
 8005d38:	0c1b      	lsrs	r3, r3, #16
 8005d3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d3e:	bf04      	itt	eq
 8005d40:	0a1b      	lsreq	r3, r3, #8
 8005d42:	3008      	addeq	r0, #8
 8005d44:	071a      	lsls	r2, r3, #28
 8005d46:	bf04      	itt	eq
 8005d48:	091b      	lsreq	r3, r3, #4
 8005d4a:	3004      	addeq	r0, #4
 8005d4c:	079a      	lsls	r2, r3, #30
 8005d4e:	bf04      	itt	eq
 8005d50:	089b      	lsreq	r3, r3, #2
 8005d52:	3002      	addeq	r0, #2
 8005d54:	07da      	lsls	r2, r3, #31
 8005d56:	d402      	bmi.n	8005d5e <__lo0bits+0x4e>
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	d006      	beq.n	8005d6a <__lo0bits+0x5a>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	600b      	str	r3, [r1, #0]
 8005d60:	4770      	bx	lr
 8005d62:	4610      	mov	r0, r2
 8005d64:	e7e9      	b.n	8005d3a <__lo0bits+0x2a>
 8005d66:	2000      	movs	r0, #0
 8005d68:	4770      	bx	lr
 8005d6a:	2020      	movs	r0, #32
 8005d6c:	4770      	bx	lr

08005d6e <__i2b>:
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	460c      	mov	r4, r1
 8005d72:	2101      	movs	r1, #1
 8005d74:	f7ff ff27 	bl	8005bc6 <_Balloc>
 8005d78:	2201      	movs	r2, #1
 8005d7a:	6144      	str	r4, [r0, #20]
 8005d7c:	6102      	str	r2, [r0, #16]
 8005d7e:	bd10      	pop	{r4, pc}

08005d80 <__multiply>:
 8005d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	4614      	mov	r4, r2
 8005d86:	690a      	ldr	r2, [r1, #16]
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	4688      	mov	r8, r1
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	bfbe      	ittt	lt
 8005d90:	460b      	movlt	r3, r1
 8005d92:	46a0      	movlt	r8, r4
 8005d94:	461c      	movlt	r4, r3
 8005d96:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d9a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005da2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005da6:	eb07 0609 	add.w	r6, r7, r9
 8005daa:	42b3      	cmp	r3, r6
 8005dac:	bfb8      	it	lt
 8005dae:	3101      	addlt	r1, #1
 8005db0:	f7ff ff09 	bl	8005bc6 <_Balloc>
 8005db4:	f100 0514 	add.w	r5, r0, #20
 8005db8:	462b      	mov	r3, r5
 8005dba:	2200      	movs	r2, #0
 8005dbc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005dc0:	4573      	cmp	r3, lr
 8005dc2:	d316      	bcc.n	8005df2 <__multiply+0x72>
 8005dc4:	f104 0214 	add.w	r2, r4, #20
 8005dc8:	f108 0114 	add.w	r1, r8, #20
 8005dcc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005dd0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	9b00      	ldr	r3, [sp, #0]
 8005dd8:	9201      	str	r2, [sp, #4]
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d80c      	bhi.n	8005df8 <__multiply+0x78>
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	dd03      	ble.n	8005dea <__multiply+0x6a>
 8005de2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d05d      	beq.n	8005ea6 <__multiply+0x126>
 8005dea:	6106      	str	r6, [r0, #16]
 8005dec:	b003      	add	sp, #12
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	f843 2b04 	str.w	r2, [r3], #4
 8005df6:	e7e3      	b.n	8005dc0 <__multiply+0x40>
 8005df8:	f8b2 b000 	ldrh.w	fp, [r2]
 8005dfc:	f1bb 0f00 	cmp.w	fp, #0
 8005e00:	d023      	beq.n	8005e4a <__multiply+0xca>
 8005e02:	4689      	mov	r9, r1
 8005e04:	46ac      	mov	ip, r5
 8005e06:	f04f 0800 	mov.w	r8, #0
 8005e0a:	f859 4b04 	ldr.w	r4, [r9], #4
 8005e0e:	f8dc a000 	ldr.w	sl, [ip]
 8005e12:	b2a3      	uxth	r3, r4
 8005e14:	fa1f fa8a 	uxth.w	sl, sl
 8005e18:	fb0b a303 	mla	r3, fp, r3, sl
 8005e1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e20:	f8dc 4000 	ldr.w	r4, [ip]
 8005e24:	4443      	add	r3, r8
 8005e26:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e2a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005e2e:	46e2      	mov	sl, ip
 8005e30:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e3a:	454f      	cmp	r7, r9
 8005e3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e40:	f84a 3b04 	str.w	r3, [sl], #4
 8005e44:	d82b      	bhi.n	8005e9e <__multiply+0x11e>
 8005e46:	f8cc 8004 	str.w	r8, [ip, #4]
 8005e4a:	9b01      	ldr	r3, [sp, #4]
 8005e4c:	3204      	adds	r2, #4
 8005e4e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005e52:	f1ba 0f00 	cmp.w	sl, #0
 8005e56:	d020      	beq.n	8005e9a <__multiply+0x11a>
 8005e58:	4689      	mov	r9, r1
 8005e5a:	46a8      	mov	r8, r5
 8005e5c:	f04f 0b00 	mov.w	fp, #0
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	f8b9 c000 	ldrh.w	ip, [r9]
 8005e66:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	fb0a 440c 	mla	r4, sl, ip, r4
 8005e70:	46c4      	mov	ip, r8
 8005e72:	445c      	add	r4, fp
 8005e74:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e78:	f84c 3b04 	str.w	r3, [ip], #4
 8005e7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e80:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005e84:	0c1b      	lsrs	r3, r3, #16
 8005e86:	fb0a b303 	mla	r3, sl, r3, fp
 8005e8a:	454f      	cmp	r7, r9
 8005e8c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e90:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e94:	d805      	bhi.n	8005ea2 <__multiply+0x122>
 8005e96:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e9a:	3504      	adds	r5, #4
 8005e9c:	e79b      	b.n	8005dd6 <__multiply+0x56>
 8005e9e:	46d4      	mov	ip, sl
 8005ea0:	e7b3      	b.n	8005e0a <__multiply+0x8a>
 8005ea2:	46e0      	mov	r8, ip
 8005ea4:	e7dd      	b.n	8005e62 <__multiply+0xe2>
 8005ea6:	3e01      	subs	r6, #1
 8005ea8:	e799      	b.n	8005dde <__multiply+0x5e>
	...

08005eac <__pow5mult>:
 8005eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb0:	4615      	mov	r5, r2
 8005eb2:	f012 0203 	ands.w	r2, r2, #3
 8005eb6:	4606      	mov	r6, r0
 8005eb8:	460f      	mov	r7, r1
 8005eba:	d007      	beq.n	8005ecc <__pow5mult+0x20>
 8005ebc:	4c21      	ldr	r4, [pc, #132]	; (8005f44 <__pow5mult+0x98>)
 8005ebe:	3a01      	subs	r2, #1
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ec6:	f7ff fec9 	bl	8005c5c <__multadd>
 8005eca:	4607      	mov	r7, r0
 8005ecc:	10ad      	asrs	r5, r5, #2
 8005ece:	d035      	beq.n	8005f3c <__pow5mult+0x90>
 8005ed0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005ed2:	b93c      	cbnz	r4, 8005ee4 <__pow5mult+0x38>
 8005ed4:	2010      	movs	r0, #16
 8005ed6:	f7ff fe53 	bl	8005b80 <malloc>
 8005eda:	6270      	str	r0, [r6, #36]	; 0x24
 8005edc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ee0:	6004      	str	r4, [r0, #0]
 8005ee2:	60c4      	str	r4, [r0, #12]
 8005ee4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005eec:	b94c      	cbnz	r4, 8005f02 <__pow5mult+0x56>
 8005eee:	f240 2171 	movw	r1, #625	; 0x271
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	f7ff ff3b 	bl	8005d6e <__i2b>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	4604      	mov	r4, r0
 8005efc:	f8c8 0008 	str.w	r0, [r8, #8]
 8005f00:	6003      	str	r3, [r0, #0]
 8005f02:	f04f 0800 	mov.w	r8, #0
 8005f06:	07eb      	lsls	r3, r5, #31
 8005f08:	d50a      	bpl.n	8005f20 <__pow5mult+0x74>
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff ff36 	bl	8005d80 <__multiply>
 8005f14:	4681      	mov	r9, r0
 8005f16:	4639      	mov	r1, r7
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f7ff fe88 	bl	8005c2e <_Bfree>
 8005f1e:	464f      	mov	r7, r9
 8005f20:	106d      	asrs	r5, r5, #1
 8005f22:	d00b      	beq.n	8005f3c <__pow5mult+0x90>
 8005f24:	6820      	ldr	r0, [r4, #0]
 8005f26:	b938      	cbnz	r0, 8005f38 <__pow5mult+0x8c>
 8005f28:	4622      	mov	r2, r4
 8005f2a:	4621      	mov	r1, r4
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7ff ff27 	bl	8005d80 <__multiply>
 8005f32:	6020      	str	r0, [r4, #0]
 8005f34:	f8c0 8000 	str.w	r8, [r0]
 8005f38:	4604      	mov	r4, r0
 8005f3a:	e7e4      	b.n	8005f06 <__pow5mult+0x5a>
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f42:	bf00      	nop
 8005f44:	08006a98 	.word	0x08006a98

08005f48 <__lshift>:
 8005f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	4607      	mov	r7, r0
 8005f50:	4616      	mov	r6, r2
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f58:	eb0a 0903 	add.w	r9, sl, r3
 8005f5c:	6849      	ldr	r1, [r1, #4]
 8005f5e:	68a3      	ldr	r3, [r4, #8]
 8005f60:	f109 0501 	add.w	r5, r9, #1
 8005f64:	42ab      	cmp	r3, r5
 8005f66:	db32      	blt.n	8005fce <__lshift+0x86>
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f7ff fe2c 	bl	8005bc6 <_Balloc>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4680      	mov	r8, r0
 8005f72:	461a      	mov	r2, r3
 8005f74:	f100 0114 	add.w	r1, r0, #20
 8005f78:	4553      	cmp	r3, sl
 8005f7a:	db2b      	blt.n	8005fd4 <__lshift+0x8c>
 8005f7c:	6920      	ldr	r0, [r4, #16]
 8005f7e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f82:	f104 0314 	add.w	r3, r4, #20
 8005f86:	f016 021f 	ands.w	r2, r6, #31
 8005f8a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f8e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f92:	d025      	beq.n	8005fe0 <__lshift+0x98>
 8005f94:	2000      	movs	r0, #0
 8005f96:	f1c2 0e20 	rsb	lr, r2, #32
 8005f9a:	468a      	mov	sl, r1
 8005f9c:	681e      	ldr	r6, [r3, #0]
 8005f9e:	4096      	lsls	r6, r2
 8005fa0:	4330      	orrs	r0, r6
 8005fa2:	f84a 0b04 	str.w	r0, [sl], #4
 8005fa6:	f853 0b04 	ldr.w	r0, [r3], #4
 8005faa:	459c      	cmp	ip, r3
 8005fac:	fa20 f00e 	lsr.w	r0, r0, lr
 8005fb0:	d814      	bhi.n	8005fdc <__lshift+0x94>
 8005fb2:	6048      	str	r0, [r1, #4]
 8005fb4:	b108      	cbz	r0, 8005fba <__lshift+0x72>
 8005fb6:	f109 0502 	add.w	r5, r9, #2
 8005fba:	3d01      	subs	r5, #1
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f8c8 5010 	str.w	r5, [r8, #16]
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f7ff fe33 	bl	8005c2e <_Bfree>
 8005fc8:	4640      	mov	r0, r8
 8005fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fce:	3101      	adds	r1, #1
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	e7c7      	b.n	8005f64 <__lshift+0x1c>
 8005fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	e7cd      	b.n	8005f78 <__lshift+0x30>
 8005fdc:	4651      	mov	r1, sl
 8005fde:	e7dc      	b.n	8005f9a <__lshift+0x52>
 8005fe0:	3904      	subs	r1, #4
 8005fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fe6:	459c      	cmp	ip, r3
 8005fe8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fec:	d8f9      	bhi.n	8005fe2 <__lshift+0x9a>
 8005fee:	e7e4      	b.n	8005fba <__lshift+0x72>

08005ff0 <__mcmp>:
 8005ff0:	6903      	ldr	r3, [r0, #16]
 8005ff2:	690a      	ldr	r2, [r1, #16]
 8005ff4:	b530      	push	{r4, r5, lr}
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	d10c      	bne.n	8006014 <__mcmp+0x24>
 8005ffa:	0092      	lsls	r2, r2, #2
 8005ffc:	3014      	adds	r0, #20
 8005ffe:	3114      	adds	r1, #20
 8006000:	1884      	adds	r4, r0, r2
 8006002:	4411      	add	r1, r2
 8006004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800600c:	4295      	cmp	r5, r2
 800600e:	d003      	beq.n	8006018 <__mcmp+0x28>
 8006010:	d305      	bcc.n	800601e <__mcmp+0x2e>
 8006012:	2301      	movs	r3, #1
 8006014:	4618      	mov	r0, r3
 8006016:	bd30      	pop	{r4, r5, pc}
 8006018:	42a0      	cmp	r0, r4
 800601a:	d3f3      	bcc.n	8006004 <__mcmp+0x14>
 800601c:	e7fa      	b.n	8006014 <__mcmp+0x24>
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	e7f7      	b.n	8006014 <__mcmp+0x24>

08006024 <__mdiff>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	460d      	mov	r5, r1
 800602a:	4607      	mov	r7, r0
 800602c:	4611      	mov	r1, r2
 800602e:	4628      	mov	r0, r5
 8006030:	4614      	mov	r4, r2
 8006032:	f7ff ffdd 	bl	8005ff0 <__mcmp>
 8006036:	1e06      	subs	r6, r0, #0
 8006038:	d108      	bne.n	800604c <__mdiff+0x28>
 800603a:	4631      	mov	r1, r6
 800603c:	4638      	mov	r0, r7
 800603e:	f7ff fdc2 	bl	8005bc6 <_Balloc>
 8006042:	2301      	movs	r3, #1
 8006044:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800604c:	bfa4      	itt	ge
 800604e:	4623      	movge	r3, r4
 8006050:	462c      	movge	r4, r5
 8006052:	4638      	mov	r0, r7
 8006054:	6861      	ldr	r1, [r4, #4]
 8006056:	bfa6      	itte	ge
 8006058:	461d      	movge	r5, r3
 800605a:	2600      	movge	r6, #0
 800605c:	2601      	movlt	r6, #1
 800605e:	f7ff fdb2 	bl	8005bc6 <_Balloc>
 8006062:	f04f 0e00 	mov.w	lr, #0
 8006066:	60c6      	str	r6, [r0, #12]
 8006068:	692b      	ldr	r3, [r5, #16]
 800606a:	6926      	ldr	r6, [r4, #16]
 800606c:	f104 0214 	add.w	r2, r4, #20
 8006070:	f105 0914 	add.w	r9, r5, #20
 8006074:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006078:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800607c:	f100 0114 	add.w	r1, r0, #20
 8006080:	f852 ab04 	ldr.w	sl, [r2], #4
 8006084:	f859 5b04 	ldr.w	r5, [r9], #4
 8006088:	fa1f f38a 	uxth.w	r3, sl
 800608c:	4473      	add	r3, lr
 800608e:	b2ac      	uxth	r4, r5
 8006090:	1b1b      	subs	r3, r3, r4
 8006092:	0c2c      	lsrs	r4, r5, #16
 8006094:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006098:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80060a2:	45c8      	cmp	r8, r9
 80060a4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80060a8:	4694      	mov	ip, r2
 80060aa:	f841 4b04 	str.w	r4, [r1], #4
 80060ae:	d8e7      	bhi.n	8006080 <__mdiff+0x5c>
 80060b0:	45bc      	cmp	ip, r7
 80060b2:	d304      	bcc.n	80060be <__mdiff+0x9a>
 80060b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80060b8:	b183      	cbz	r3, 80060dc <__mdiff+0xb8>
 80060ba:	6106      	str	r6, [r0, #16]
 80060bc:	e7c4      	b.n	8006048 <__mdiff+0x24>
 80060be:	f85c 4b04 	ldr.w	r4, [ip], #4
 80060c2:	b2a2      	uxth	r2, r4
 80060c4:	4472      	add	r2, lr
 80060c6:	1413      	asrs	r3, r2, #16
 80060c8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80060cc:	b292      	uxth	r2, r2
 80060ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060d2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80060d6:	f841 2b04 	str.w	r2, [r1], #4
 80060da:	e7e9      	b.n	80060b0 <__mdiff+0x8c>
 80060dc:	3e01      	subs	r6, #1
 80060de:	e7e9      	b.n	80060b4 <__mdiff+0x90>

080060e0 <__d2b>:
 80060e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060e4:	461c      	mov	r4, r3
 80060e6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80060ea:	2101      	movs	r1, #1
 80060ec:	4690      	mov	r8, r2
 80060ee:	f7ff fd6a 	bl	8005bc6 <_Balloc>
 80060f2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80060f6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80060fa:	4607      	mov	r7, r0
 80060fc:	bb34      	cbnz	r4, 800614c <__d2b+0x6c>
 80060fe:	9201      	str	r2, [sp, #4]
 8006100:	f1b8 0200 	subs.w	r2, r8, #0
 8006104:	d027      	beq.n	8006156 <__d2b+0x76>
 8006106:	a802      	add	r0, sp, #8
 8006108:	f840 2d08 	str.w	r2, [r0, #-8]!
 800610c:	f7ff fe00 	bl	8005d10 <__lo0bits>
 8006110:	9900      	ldr	r1, [sp, #0]
 8006112:	b1f0      	cbz	r0, 8006152 <__d2b+0x72>
 8006114:	9a01      	ldr	r2, [sp, #4]
 8006116:	f1c0 0320 	rsb	r3, r0, #32
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	430b      	orrs	r3, r1
 8006120:	40c2      	lsrs	r2, r0
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	9201      	str	r2, [sp, #4]
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf14      	ite	ne
 800612c:	2102      	movne	r1, #2
 800612e:	2101      	moveq	r1, #1
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	6139      	str	r1, [r7, #16]
 8006134:	b1c4      	cbz	r4, 8006168 <__d2b+0x88>
 8006136:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800613a:	4404      	add	r4, r0
 800613c:	6034      	str	r4, [r6, #0]
 800613e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006142:	6028      	str	r0, [r5, #0]
 8006144:	4638      	mov	r0, r7
 8006146:	b002      	add	sp, #8
 8006148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800614c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006150:	e7d5      	b.n	80060fe <__d2b+0x1e>
 8006152:	6179      	str	r1, [r7, #20]
 8006154:	e7e7      	b.n	8006126 <__d2b+0x46>
 8006156:	a801      	add	r0, sp, #4
 8006158:	f7ff fdda 	bl	8005d10 <__lo0bits>
 800615c:	2101      	movs	r1, #1
 800615e:	9b01      	ldr	r3, [sp, #4]
 8006160:	6139      	str	r1, [r7, #16]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	3020      	adds	r0, #32
 8006166:	e7e5      	b.n	8006134 <__d2b+0x54>
 8006168:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800616c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006170:	6030      	str	r0, [r6, #0]
 8006172:	6918      	ldr	r0, [r3, #16]
 8006174:	f7ff fdad 	bl	8005cd2 <__hi0bits>
 8006178:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800617c:	e7e1      	b.n	8006142 <__d2b+0x62>
	...

08006180 <_free_r>:
 8006180:	b538      	push	{r3, r4, r5, lr}
 8006182:	4605      	mov	r5, r0
 8006184:	2900      	cmp	r1, #0
 8006186:	d043      	beq.n	8006210 <_free_r+0x90>
 8006188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618c:	1f0c      	subs	r4, r1, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfb8      	it	lt
 8006192:	18e4      	addlt	r4, r4, r3
 8006194:	f7ff fd15 	bl	8005bc2 <__malloc_lock>
 8006198:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <_free_r+0x94>)
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	4610      	mov	r0, r2
 800619e:	b933      	cbnz	r3, 80061ae <_free_r+0x2e>
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	6014      	str	r4, [r2, #0]
 80061a4:	4628      	mov	r0, r5
 80061a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061aa:	f7ff bd0b 	b.w	8005bc4 <__malloc_unlock>
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	d90b      	bls.n	80061ca <_free_r+0x4a>
 80061b2:	6821      	ldr	r1, [r4, #0]
 80061b4:	1862      	adds	r2, r4, r1
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bf01      	itttt	eq
 80061ba:	681a      	ldreq	r2, [r3, #0]
 80061bc:	685b      	ldreq	r3, [r3, #4]
 80061be:	1852      	addeq	r2, r2, r1
 80061c0:	6022      	streq	r2, [r4, #0]
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	6004      	str	r4, [r0, #0]
 80061c6:	e7ed      	b.n	80061a4 <_free_r+0x24>
 80061c8:	4613      	mov	r3, r2
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	b10a      	cbz	r2, 80061d2 <_free_r+0x52>
 80061ce:	42a2      	cmp	r2, r4
 80061d0:	d9fa      	bls.n	80061c8 <_free_r+0x48>
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	1858      	adds	r0, r3, r1
 80061d6:	42a0      	cmp	r0, r4
 80061d8:	d10b      	bne.n	80061f2 <_free_r+0x72>
 80061da:	6820      	ldr	r0, [r4, #0]
 80061dc:	4401      	add	r1, r0
 80061de:	1858      	adds	r0, r3, r1
 80061e0:	4282      	cmp	r2, r0
 80061e2:	6019      	str	r1, [r3, #0]
 80061e4:	d1de      	bne.n	80061a4 <_free_r+0x24>
 80061e6:	6810      	ldr	r0, [r2, #0]
 80061e8:	6852      	ldr	r2, [r2, #4]
 80061ea:	4401      	add	r1, r0
 80061ec:	6019      	str	r1, [r3, #0]
 80061ee:	605a      	str	r2, [r3, #4]
 80061f0:	e7d8      	b.n	80061a4 <_free_r+0x24>
 80061f2:	d902      	bls.n	80061fa <_free_r+0x7a>
 80061f4:	230c      	movs	r3, #12
 80061f6:	602b      	str	r3, [r5, #0]
 80061f8:	e7d4      	b.n	80061a4 <_free_r+0x24>
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	1821      	adds	r1, r4, r0
 80061fe:	428a      	cmp	r2, r1
 8006200:	bf01      	itttt	eq
 8006202:	6811      	ldreq	r1, [r2, #0]
 8006204:	6852      	ldreq	r2, [r2, #4]
 8006206:	1809      	addeq	r1, r1, r0
 8006208:	6021      	streq	r1, [r4, #0]
 800620a:	6062      	str	r2, [r4, #4]
 800620c:	605c      	str	r4, [r3, #4]
 800620e:	e7c9      	b.n	80061a4 <_free_r+0x24>
 8006210:	bd38      	pop	{r3, r4, r5, pc}
 8006212:	bf00      	nop
 8006214:	20000280 	.word	0x20000280

08006218 <__sfputc_r>:
 8006218:	6893      	ldr	r3, [r2, #8]
 800621a:	b410      	push	{r4}
 800621c:	3b01      	subs	r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	6093      	str	r3, [r2, #8]
 8006222:	da07      	bge.n	8006234 <__sfputc_r+0x1c>
 8006224:	6994      	ldr	r4, [r2, #24]
 8006226:	42a3      	cmp	r3, r4
 8006228:	db01      	blt.n	800622e <__sfputc_r+0x16>
 800622a:	290a      	cmp	r1, #10
 800622c:	d102      	bne.n	8006234 <__sfputc_r+0x1c>
 800622e:	bc10      	pop	{r4}
 8006230:	f7fe bbb6 	b.w	80049a0 <__swbuf_r>
 8006234:	6813      	ldr	r3, [r2, #0]
 8006236:	1c58      	adds	r0, r3, #1
 8006238:	6010      	str	r0, [r2, #0]
 800623a:	7019      	strb	r1, [r3, #0]
 800623c:	4608      	mov	r0, r1
 800623e:	bc10      	pop	{r4}
 8006240:	4770      	bx	lr

08006242 <__sfputs_r>:
 8006242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006244:	4606      	mov	r6, r0
 8006246:	460f      	mov	r7, r1
 8006248:	4614      	mov	r4, r2
 800624a:	18d5      	adds	r5, r2, r3
 800624c:	42ac      	cmp	r4, r5
 800624e:	d101      	bne.n	8006254 <__sfputs_r+0x12>
 8006250:	2000      	movs	r0, #0
 8006252:	e007      	b.n	8006264 <__sfputs_r+0x22>
 8006254:	463a      	mov	r2, r7
 8006256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ffdc 	bl	8006218 <__sfputc_r>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d1f3      	bne.n	800624c <__sfputs_r+0xa>
 8006264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006268 <_vfiprintf_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	460c      	mov	r4, r1
 800626e:	b09d      	sub	sp, #116	; 0x74
 8006270:	4617      	mov	r7, r2
 8006272:	461d      	mov	r5, r3
 8006274:	4606      	mov	r6, r0
 8006276:	b118      	cbz	r0, 8006280 <_vfiprintf_r+0x18>
 8006278:	6983      	ldr	r3, [r0, #24]
 800627a:	b90b      	cbnz	r3, 8006280 <_vfiprintf_r+0x18>
 800627c:	f7ff fb84 	bl	8005988 <__sinit>
 8006280:	4b7c      	ldr	r3, [pc, #496]	; (8006474 <_vfiprintf_r+0x20c>)
 8006282:	429c      	cmp	r4, r3
 8006284:	d158      	bne.n	8006338 <_vfiprintf_r+0xd0>
 8006286:	6874      	ldr	r4, [r6, #4]
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	0718      	lsls	r0, r3, #28
 800628c:	d55e      	bpl.n	800634c <_vfiprintf_r+0xe4>
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d05b      	beq.n	800634c <_vfiprintf_r+0xe4>
 8006294:	2300      	movs	r3, #0
 8006296:	9309      	str	r3, [sp, #36]	; 0x24
 8006298:	2320      	movs	r3, #32
 800629a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800629e:	2330      	movs	r3, #48	; 0x30
 80062a0:	f04f 0b01 	mov.w	fp, #1
 80062a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062a8:	9503      	str	r5, [sp, #12]
 80062aa:	46b8      	mov	r8, r7
 80062ac:	4645      	mov	r5, r8
 80062ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062b2:	b10b      	cbz	r3, 80062b8 <_vfiprintf_r+0x50>
 80062b4:	2b25      	cmp	r3, #37	; 0x25
 80062b6:	d154      	bne.n	8006362 <_vfiprintf_r+0xfa>
 80062b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80062bc:	d00b      	beq.n	80062d6 <_vfiprintf_r+0x6e>
 80062be:	4653      	mov	r3, sl
 80062c0:	463a      	mov	r2, r7
 80062c2:	4621      	mov	r1, r4
 80062c4:	4630      	mov	r0, r6
 80062c6:	f7ff ffbc 	bl	8006242 <__sfputs_r>
 80062ca:	3001      	adds	r0, #1
 80062cc:	f000 80c2 	beq.w	8006454 <_vfiprintf_r+0x1ec>
 80062d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d2:	4453      	add	r3, sl
 80062d4:	9309      	str	r3, [sp, #36]	; 0x24
 80062d6:	f898 3000 	ldrb.w	r3, [r8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80ba 	beq.w	8006454 <_vfiprintf_r+0x1ec>
 80062e0:	2300      	movs	r3, #0
 80062e2:	f04f 32ff 	mov.w	r2, #4294967295
 80062e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	9307      	str	r3, [sp, #28]
 80062ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062f2:	931a      	str	r3, [sp, #104]	; 0x68
 80062f4:	46a8      	mov	r8, r5
 80062f6:	2205      	movs	r2, #5
 80062f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80062fc:	485e      	ldr	r0, [pc, #376]	; (8006478 <_vfiprintf_r+0x210>)
 80062fe:	f7ff fc47 	bl	8005b90 <memchr>
 8006302:	9b04      	ldr	r3, [sp, #16]
 8006304:	bb78      	cbnz	r0, 8006366 <_vfiprintf_r+0xfe>
 8006306:	06d9      	lsls	r1, r3, #27
 8006308:	bf44      	itt	mi
 800630a:	2220      	movmi	r2, #32
 800630c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006310:	071a      	lsls	r2, r3, #28
 8006312:	bf44      	itt	mi
 8006314:	222b      	movmi	r2, #43	; 0x2b
 8006316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800631a:	782a      	ldrb	r2, [r5, #0]
 800631c:	2a2a      	cmp	r2, #42	; 0x2a
 800631e:	d02a      	beq.n	8006376 <_vfiprintf_r+0x10e>
 8006320:	46a8      	mov	r8, r5
 8006322:	2000      	movs	r0, #0
 8006324:	250a      	movs	r5, #10
 8006326:	9a07      	ldr	r2, [sp, #28]
 8006328:	4641      	mov	r1, r8
 800632a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800632e:	3b30      	subs	r3, #48	; 0x30
 8006330:	2b09      	cmp	r3, #9
 8006332:	d969      	bls.n	8006408 <_vfiprintf_r+0x1a0>
 8006334:	b360      	cbz	r0, 8006390 <_vfiprintf_r+0x128>
 8006336:	e024      	b.n	8006382 <_vfiprintf_r+0x11a>
 8006338:	4b50      	ldr	r3, [pc, #320]	; (800647c <_vfiprintf_r+0x214>)
 800633a:	429c      	cmp	r4, r3
 800633c:	d101      	bne.n	8006342 <_vfiprintf_r+0xda>
 800633e:	68b4      	ldr	r4, [r6, #8]
 8006340:	e7a2      	b.n	8006288 <_vfiprintf_r+0x20>
 8006342:	4b4f      	ldr	r3, [pc, #316]	; (8006480 <_vfiprintf_r+0x218>)
 8006344:	429c      	cmp	r4, r3
 8006346:	bf08      	it	eq
 8006348:	68f4      	ldreq	r4, [r6, #12]
 800634a:	e79d      	b.n	8006288 <_vfiprintf_r+0x20>
 800634c:	4621      	mov	r1, r4
 800634e:	4630      	mov	r0, r6
 8006350:	f7fe fb78 	bl	8004a44 <__swsetup_r>
 8006354:	2800      	cmp	r0, #0
 8006356:	d09d      	beq.n	8006294 <_vfiprintf_r+0x2c>
 8006358:	f04f 30ff 	mov.w	r0, #4294967295
 800635c:	b01d      	add	sp, #116	; 0x74
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	46a8      	mov	r8, r5
 8006364:	e7a2      	b.n	80062ac <_vfiprintf_r+0x44>
 8006366:	4a44      	ldr	r2, [pc, #272]	; (8006478 <_vfiprintf_r+0x210>)
 8006368:	4645      	mov	r5, r8
 800636a:	1a80      	subs	r0, r0, r2
 800636c:	fa0b f000 	lsl.w	r0, fp, r0
 8006370:	4318      	orrs	r0, r3
 8006372:	9004      	str	r0, [sp, #16]
 8006374:	e7be      	b.n	80062f4 <_vfiprintf_r+0x8c>
 8006376:	9a03      	ldr	r2, [sp, #12]
 8006378:	1d11      	adds	r1, r2, #4
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	9103      	str	r1, [sp, #12]
 800637e:	2a00      	cmp	r2, #0
 8006380:	db01      	blt.n	8006386 <_vfiprintf_r+0x11e>
 8006382:	9207      	str	r2, [sp, #28]
 8006384:	e004      	b.n	8006390 <_vfiprintf_r+0x128>
 8006386:	4252      	negs	r2, r2
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	9207      	str	r2, [sp, #28]
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	f898 3000 	ldrb.w	r3, [r8]
 8006394:	2b2e      	cmp	r3, #46	; 0x2e
 8006396:	d10e      	bne.n	80063b6 <_vfiprintf_r+0x14e>
 8006398:	f898 3001 	ldrb.w	r3, [r8, #1]
 800639c:	2b2a      	cmp	r3, #42	; 0x2a
 800639e:	d138      	bne.n	8006412 <_vfiprintf_r+0x1aa>
 80063a0:	9b03      	ldr	r3, [sp, #12]
 80063a2:	f108 0802 	add.w	r8, r8, #2
 80063a6:	1d1a      	adds	r2, r3, #4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	9203      	str	r2, [sp, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	bfb8      	it	lt
 80063b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80063b4:	9305      	str	r3, [sp, #20]
 80063b6:	4d33      	ldr	r5, [pc, #204]	; (8006484 <_vfiprintf_r+0x21c>)
 80063b8:	2203      	movs	r2, #3
 80063ba:	f898 1000 	ldrb.w	r1, [r8]
 80063be:	4628      	mov	r0, r5
 80063c0:	f7ff fbe6 	bl	8005b90 <memchr>
 80063c4:	b140      	cbz	r0, 80063d8 <_vfiprintf_r+0x170>
 80063c6:	2340      	movs	r3, #64	; 0x40
 80063c8:	1b40      	subs	r0, r0, r5
 80063ca:	fa03 f000 	lsl.w	r0, r3, r0
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	f108 0801 	add.w	r8, r8, #1
 80063d4:	4303      	orrs	r3, r0
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	f898 1000 	ldrb.w	r1, [r8]
 80063dc:	2206      	movs	r2, #6
 80063de:	482a      	ldr	r0, [pc, #168]	; (8006488 <_vfiprintf_r+0x220>)
 80063e0:	f108 0701 	add.w	r7, r8, #1
 80063e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063e8:	f7ff fbd2 	bl	8005b90 <memchr>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d037      	beq.n	8006460 <_vfiprintf_r+0x1f8>
 80063f0:	4b26      	ldr	r3, [pc, #152]	; (800648c <_vfiprintf_r+0x224>)
 80063f2:	bb1b      	cbnz	r3, 800643c <_vfiprintf_r+0x1d4>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	3307      	adds	r3, #7
 80063f8:	f023 0307 	bic.w	r3, r3, #7
 80063fc:	3308      	adds	r3, #8
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006402:	444b      	add	r3, r9
 8006404:	9309      	str	r3, [sp, #36]	; 0x24
 8006406:	e750      	b.n	80062aa <_vfiprintf_r+0x42>
 8006408:	fb05 3202 	mla	r2, r5, r2, r3
 800640c:	2001      	movs	r0, #1
 800640e:	4688      	mov	r8, r1
 8006410:	e78a      	b.n	8006328 <_vfiprintf_r+0xc0>
 8006412:	2300      	movs	r3, #0
 8006414:	250a      	movs	r5, #10
 8006416:	4619      	mov	r1, r3
 8006418:	f108 0801 	add.w	r8, r8, #1
 800641c:	9305      	str	r3, [sp, #20]
 800641e:	4640      	mov	r0, r8
 8006420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006424:	3a30      	subs	r2, #48	; 0x30
 8006426:	2a09      	cmp	r2, #9
 8006428:	d903      	bls.n	8006432 <_vfiprintf_r+0x1ca>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0c3      	beq.n	80063b6 <_vfiprintf_r+0x14e>
 800642e:	9105      	str	r1, [sp, #20]
 8006430:	e7c1      	b.n	80063b6 <_vfiprintf_r+0x14e>
 8006432:	fb05 2101 	mla	r1, r5, r1, r2
 8006436:	2301      	movs	r3, #1
 8006438:	4680      	mov	r8, r0
 800643a:	e7f0      	b.n	800641e <_vfiprintf_r+0x1b6>
 800643c:	ab03      	add	r3, sp, #12
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	4622      	mov	r2, r4
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <_vfiprintf_r+0x228>)
 8006444:	a904      	add	r1, sp, #16
 8006446:	4630      	mov	r0, r6
 8006448:	f7fd fdb2 	bl	8003fb0 <_printf_float>
 800644c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006450:	4681      	mov	r9, r0
 8006452:	d1d5      	bne.n	8006400 <_vfiprintf_r+0x198>
 8006454:	89a3      	ldrh	r3, [r4, #12]
 8006456:	065b      	lsls	r3, r3, #25
 8006458:	f53f af7e 	bmi.w	8006358 <_vfiprintf_r+0xf0>
 800645c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800645e:	e77d      	b.n	800635c <_vfiprintf_r+0xf4>
 8006460:	ab03      	add	r3, sp, #12
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	4622      	mov	r2, r4
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <_vfiprintf_r+0x228>)
 8006468:	a904      	add	r1, sp, #16
 800646a:	4630      	mov	r0, r6
 800646c:	f7fe f84c 	bl	8004508 <_printf_i>
 8006470:	e7ec      	b.n	800644c <_vfiprintf_r+0x1e4>
 8006472:	bf00      	nop
 8006474:	08006968 	.word	0x08006968
 8006478:	08006aa4 	.word	0x08006aa4
 800647c:	08006988 	.word	0x08006988
 8006480:	08006948 	.word	0x08006948
 8006484:	08006aaa 	.word	0x08006aaa
 8006488:	08006aae 	.word	0x08006aae
 800648c:	08003fb1 	.word	0x08003fb1
 8006490:	08006243 	.word	0x08006243

08006494 <__sread>:
 8006494:	b510      	push	{r4, lr}
 8006496:	460c      	mov	r4, r1
 8006498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649c:	f000 f8a6 	bl	80065ec <_read_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	bfab      	itete	ge
 80064a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064a6:	89a3      	ldrhlt	r3, [r4, #12]
 80064a8:	181b      	addge	r3, r3, r0
 80064aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ae:	bfac      	ite	ge
 80064b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80064b2:	81a3      	strhlt	r3, [r4, #12]
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <__swrite>:
 80064b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ba:	461f      	mov	r7, r3
 80064bc:	898b      	ldrh	r3, [r1, #12]
 80064be:	4605      	mov	r5, r0
 80064c0:	05db      	lsls	r3, r3, #23
 80064c2:	460c      	mov	r4, r1
 80064c4:	4616      	mov	r6, r2
 80064c6:	d505      	bpl.n	80064d4 <__swrite+0x1e>
 80064c8:	2302      	movs	r3, #2
 80064ca:	2200      	movs	r2, #0
 80064cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d0:	f000 f868 	bl	80065a4 <_lseek_r>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	4632      	mov	r2, r6
 80064d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e2:	463b      	mov	r3, r7
 80064e4:	4628      	mov	r0, r5
 80064e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	f000 b817 	b.w	800651c <_write_r>

080064ee <__sseek>:
 80064ee:	b510      	push	{r4, lr}
 80064f0:	460c      	mov	r4, r1
 80064f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f6:	f000 f855 	bl	80065a4 <_lseek_r>
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	89a3      	ldrh	r3, [r4, #12]
 80064fe:	bf15      	itete	ne
 8006500:	6560      	strne	r0, [r4, #84]	; 0x54
 8006502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800650a:	81a3      	strheq	r3, [r4, #12]
 800650c:	bf18      	it	ne
 800650e:	81a3      	strhne	r3, [r4, #12]
 8006510:	bd10      	pop	{r4, pc}

08006512 <__sclose>:
 8006512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006516:	f000 b813 	b.w	8006540 <_close_r>
	...

0800651c <_write_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	4605      	mov	r5, r0
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	2200      	movs	r2, #0
 8006526:	4c05      	ldr	r4, [pc, #20]	; (800653c <_write_r+0x20>)
 8006528:	6022      	str	r2, [r4, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	f7fa feb4 	bl	8001298 <_write>
 8006530:	1c43      	adds	r3, r0, #1
 8006532:	d102      	bne.n	800653a <_write_r+0x1e>
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	b103      	cbz	r3, 800653a <_write_r+0x1e>
 8006538:	602b      	str	r3, [r5, #0]
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	200003e4 	.word	0x200003e4

08006540 <_close_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	2300      	movs	r3, #0
 8006544:	4c05      	ldr	r4, [pc, #20]	; (800655c <_close_r+0x1c>)
 8006546:	4605      	mov	r5, r0
 8006548:	4608      	mov	r0, r1
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	f7fa fed0 	bl	80012f0 <_close>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_close_r+0x1a>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	b103      	cbz	r3, 800655a <_close_r+0x1a>
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	200003e4 	.word	0x200003e4

08006560 <_fstat_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	2300      	movs	r3, #0
 8006564:	4c06      	ldr	r4, [pc, #24]	; (8006580 <_fstat_r+0x20>)
 8006566:	4605      	mov	r5, r0
 8006568:	4608      	mov	r0, r1
 800656a:	4611      	mov	r1, r2
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	f7fa ff0f 	bl	8001390 <_fstat>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	d102      	bne.n	800657c <_fstat_r+0x1c>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	b103      	cbz	r3, 800657c <_fstat_r+0x1c>
 800657a:	602b      	str	r3, [r5, #0]
 800657c:	bd38      	pop	{r3, r4, r5, pc}
 800657e:	bf00      	nop
 8006580:	200003e4 	.word	0x200003e4

08006584 <_isatty_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	2300      	movs	r3, #0
 8006588:	4c05      	ldr	r4, [pc, #20]	; (80065a0 <_isatty_r+0x1c>)
 800658a:	4605      	mov	r5, r0
 800658c:	4608      	mov	r0, r1
 800658e:	6023      	str	r3, [r4, #0]
 8006590:	f7fa fe6c 	bl	800126c <_isatty>
 8006594:	1c43      	adds	r3, r0, #1
 8006596:	d102      	bne.n	800659e <_isatty_r+0x1a>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	b103      	cbz	r3, 800659e <_isatty_r+0x1a>
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	200003e4 	.word	0x200003e4

080065a4 <_lseek_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4605      	mov	r5, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	2200      	movs	r2, #0
 80065ae:	4c05      	ldr	r4, [pc, #20]	; (80065c4 <_lseek_r+0x20>)
 80065b0:	6022      	str	r2, [r4, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f7fa feb3 	bl	800131e <_lseek>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_lseek_r+0x1e>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_lseek_r+0x1e>
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	200003e4 	.word	0x200003e4

080065c8 <__ascii_mbtowc>:
 80065c8:	b082      	sub	sp, #8
 80065ca:	b901      	cbnz	r1, 80065ce <__ascii_mbtowc+0x6>
 80065cc:	a901      	add	r1, sp, #4
 80065ce:	b142      	cbz	r2, 80065e2 <__ascii_mbtowc+0x1a>
 80065d0:	b14b      	cbz	r3, 80065e6 <__ascii_mbtowc+0x1e>
 80065d2:	7813      	ldrb	r3, [r2, #0]
 80065d4:	600b      	str	r3, [r1, #0]
 80065d6:	7812      	ldrb	r2, [r2, #0]
 80065d8:	1c10      	adds	r0, r2, #0
 80065da:	bf18      	it	ne
 80065dc:	2001      	movne	r0, #1
 80065de:	b002      	add	sp, #8
 80065e0:	4770      	bx	lr
 80065e2:	4610      	mov	r0, r2
 80065e4:	e7fb      	b.n	80065de <__ascii_mbtowc+0x16>
 80065e6:	f06f 0001 	mvn.w	r0, #1
 80065ea:	e7f8      	b.n	80065de <__ascii_mbtowc+0x16>

080065ec <_read_r>:
 80065ec:	b538      	push	{r3, r4, r5, lr}
 80065ee:	4605      	mov	r5, r0
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	2200      	movs	r2, #0
 80065f6:	4c05      	ldr	r4, [pc, #20]	; (800660c <_read_r+0x20>)
 80065f8:	6022      	str	r2, [r4, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	f7fa fea0 	bl	8001340 <_read>
 8006600:	1c43      	adds	r3, r0, #1
 8006602:	d102      	bne.n	800660a <_read_r+0x1e>
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	b103      	cbz	r3, 800660a <_read_r+0x1e>
 8006608:	602b      	str	r3, [r5, #0]
 800660a:	bd38      	pop	{r3, r4, r5, pc}
 800660c:	200003e4 	.word	0x200003e4

08006610 <__ascii_wctomb>:
 8006610:	b149      	cbz	r1, 8006626 <__ascii_wctomb+0x16>
 8006612:	2aff      	cmp	r2, #255	; 0xff
 8006614:	bf8b      	itete	hi
 8006616:	238a      	movhi	r3, #138	; 0x8a
 8006618:	700a      	strbls	r2, [r1, #0]
 800661a:	6003      	strhi	r3, [r0, #0]
 800661c:	2001      	movls	r0, #1
 800661e:	bf88      	it	hi
 8006620:	f04f 30ff 	movhi.w	r0, #4294967295
 8006624:	4770      	bx	lr
 8006626:	4608      	mov	r0, r1
 8006628:	4770      	bx	lr
	...

0800662c <_init>:
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	bf00      	nop
 8006630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006632:	bc08      	pop	{r3}
 8006634:	469e      	mov	lr, r3
 8006636:	4770      	bx	lr

08006638 <_fini>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	bf00      	nop
 800663c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663e:	bc08      	pop	{r3}
 8006640:	469e      	mov	lr, r3
 8006642:	4770      	bx	lr
